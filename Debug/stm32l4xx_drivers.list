
stm32l4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002038  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080021e8  080021e8  000031e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800222c  0800222c  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800222c  0800222c  0000322c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002234  08002234  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002234  08002234  00003234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002238  08002238  00003238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800223c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000405c  2**0
                  CONTENTS
 10 .bss          0000038c  2000005c  2000005c  0000405c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003e8  200003e8  0000405c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000203a  00000000  00000000  00004086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000809  00000000  00000000  000060c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000288  00000000  00000000  000068d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001d6  00000000  00000000  00006b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003691  00000000  00000000  00006d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002dfe  00000000  00000000  0000a3bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c281  00000000  00000000  0000d1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001943e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001124  00000000  00000000  00019484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0001a5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080021d0 	.word	0x080021d0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	080021d0 	.word	0x080021d0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <SPI1_GPIOInit>:
{
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
}

void SPI1_GPIOInit()
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000296:	4b14      	ldr	r3, [pc, #80]	@ (80002e8 <SPI1_GPIOInit+0x58>)
 8000298:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800029a:	2302      	movs	r3, #2
 800029c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800029e:	2305      	movs	r3, #5
 80002a0:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_PO_TYPE_PP;
 80002a2:	2300      	movs	r3, #0
 80002a4:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002a6:	2300      	movs	r3, #0
 80002a8:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002aa:	2302      	movs	r3, #2
 80002ac:	72bb      	strb	r3, [r7, #10]

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3; //SCLK
 80002ae:	2303      	movs	r3, #3
 80002b0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins); /* GPIO_Init operates only one pin at a time so call for every pin.*/
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 fae9 	bl	800088c <GPIO_Init>

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5; //MOSI
 80002ba:	2305      	movs	r3, #5
 80002bc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 fae3 	bl	800088c <GPIO_Init>

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4; //MISO
 80002c6:	2304      	movs	r3, #4
 80002c8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fadd 	bl	800088c <GPIO_Init>

	//Setup NSS manually - if working with internal setup
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0; //NSS
 80002d2:	2300      	movs	r3, #0
 80002d4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fad7 	bl	800088c <GPIO_Init>

}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	48000400 	.word	0x48000400

080002ec <SPI1_Init>:

void SPI1_Init()
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0

	SPI1handle.pSPIx = SPI1;
 80002f0:	4b0e      	ldr	r3, [pc, #56]	@ (800032c <SPI1_Init+0x40>)
 80002f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000330 <SPI1_Init+0x44>)
 80002f4:	601a      	str	r2, [r3, #0]
	SPI1handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80002f6:	4b0d      	ldr	r3, [pc, #52]	@ (800032c <SPI1_Init+0x40>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	715a      	strb	r2, [r3, #5]
	SPI1handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002fc:	4b0b      	ldr	r3, [pc, #44]	@ (800032c <SPI1_Init+0x40>)
 80002fe:	2201      	movs	r2, #1
 8000300:	711a      	strb	r2, [r3, #4]
	SPI1handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV16;
 8000302:	4b0a      	ldr	r3, [pc, #40]	@ (800032c <SPI1_Init+0x40>)
 8000304:	2203      	movs	r2, #3
 8000306:	719a      	strb	r2, [r3, #6]
	SPI1handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000308:	4b08      	ldr	r3, [pc, #32]	@ (800032c <SPI1_Init+0x40>)
 800030a:	2207      	movs	r2, #7
 800030c:	71da      	strb	r2, [r3, #7]
	SPI1handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800030e:	4b07      	ldr	r3, [pc, #28]	@ (800032c <SPI1_Init+0x40>)
 8000310:	2200      	movs	r2, #0
 8000312:	721a      	strb	r2, [r3, #8]
	SPI1handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000314:	4b05      	ldr	r3, [pc, #20]	@ (800032c <SPI1_Init+0x40>)
 8000316:	2200      	movs	r2, #0
 8000318:	725a      	strb	r2, [r3, #9]
	SPI1handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management
 800031a:	4b04      	ldr	r3, [pc, #16]	@ (800032c <SPI1_Init+0x40>)
 800031c:	2200      	movs	r2, #0
 800031e:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI1handle);
 8000320:	4802      	ldr	r0, [pc, #8]	@ (800032c <SPI1_Init+0x40>)
 8000322:	f000 fd8b 	bl	8000e3c <SPI_Init>

}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000270 	.word	0x20000270
 8000330:	40013000 	.word	0x40013000

08000334 <Slave_GPIO_InterruptPinInit>:

/*This function configures the gpio pin over which SPI peripheral issues data available interrupt */
void Slave_GPIO_InterruptPinInit(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
	GPIO_Handle_t spiIntPin;
	memset(&spiIntPin,0,sizeof(spiIntPin));
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	220c      	movs	r2, #12
 800033e:	2100      	movs	r1, #0
 8000340:	4618      	mov	r0, r3
 8000342:	f001 f934 	bl	80015ae <memset>

	//this is led gpio configuration
	spiIntPin.pGPIOx = GPIOE;
 8000346:	4b0d      	ldr	r3, [pc, #52]	@ (800037c <Slave_GPIO_InterruptPinInit+0x48>)
 8000348:	607b      	str	r3, [r7, #4]
	spiIntPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800034a:	2300      	movs	r3, #0
 800034c:	723b      	strb	r3, [r7, #8]
	spiIntPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800034e:	2304      	movs	r3, #4
 8000350:	727b      	strb	r3, [r7, #9]
	spiIntPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000352:	2300      	movs	r3, #0
 8000354:	72bb      	strb	r3, [r7, #10]
	spiIntPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000356:	2301      	movs	r3, #1
 8000358:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&spiIntPin);
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	4618      	mov	r0, r3
 800035e:	f000 fa95 	bl	800088c <GPIO_Init>

	GPIO_IRQPriorityConfig(IRQ_NO_EXTI0, 15);
 8000362:	210f      	movs	r1, #15
 8000364:	2006      	movs	r0, #6
 8000366:	f000 fcc3 	bl	8000cf0 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI0,ENABLE);
 800036a:	2101      	movs	r1, #1
 800036c:	2006      	movs	r0, #6
 800036e:	f000 fc3b 	bl	8000be8 <GPIO_IRQInterruptConfig>

}
 8000372:	bf00      	nop
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	48001000 	.word	0x48001000

08000380 <main>:

int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0

	uint8_t dummy = 0xff;
 8000386:	23ff      	movs	r3, #255	@ 0xff
 8000388:	71fb      	strb	r3, [r7, #7]

	Slave_GPIO_InterruptPinInit();
 800038a:	f7ff ffd3 	bl	8000334 <Slave_GPIO_InterruptPinInit>

	SPI1_GPIOInit();
 800038e:	f7ff ff7f 	bl	8000290 <SPI1_GPIOInit>

	SPI1_Init();
 8000392:	f7ff ffab 	bl	80002ec <SPI1_Init>

	SPI_SSOEConfig(SPI1,ENABLE);
 8000396:	2101      	movs	r1, #1
 8000398:	4824      	ldr	r0, [pc, #144]	@ (800042c <main+0xac>)
 800039a:	f000 fe5e 	bl	800105a <SPI_SSOEConfig>

	SPI_IRQInterruptConfig(IRQ_NO_SPI1,ENABLE);
 800039e:	2101      	movs	r1, #1
 80003a0:	2023      	movs	r0, #35	@ 0x23
 80003a2:	f000 fdbb 	bl	8000f1c <SPI_IRQInterruptConfig>

	while(1)
	{
		rcvStop = 0;
 80003a6:	4b22      	ldr	r3, [pc, #136]	@ (8000430 <main+0xb0>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	701a      	strb	r2, [r3, #0]

		while(!dataAvailable); ////wait till data available interrupt from transmitter device(slave)
 80003ac:	bf00      	nop
 80003ae:	4b21      	ldr	r3, [pc, #132]	@ (8000434 <main+0xb4>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d0fa      	beq.n	80003ae <main+0x2e>

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI0,DISABLE); //Disable to avoid further interrupts from the slave
 80003b8:	2100      	movs	r1, #0
 80003ba:	2006      	movs	r0, #6
 80003bc:	f000 fc14 	bl	8000be8 <GPIO_IRQInterruptConfig>

		SPI_Peripheral_Control(SPI1,ENABLE);
 80003c0:	2101      	movs	r1, #1
 80003c2:	481a      	ldr	r0, [pc, #104]	@ (800042c <main+0xac>)
 80003c4:	f000 fe2e 	bl	8001024 <SPI_Peripheral_Control>


		while(!rcvStop)
 80003c8:	e012      	b.n	80003f0 <main+0x70>
		{
			/* fetch the data from the SPI peripheral byte by byte in interrupt mode */

			/*These APIs basically enables the interrupt for SPI for further processes*/
			while(SPI_SendDataIT(&SPI1handle, &dummy, 1) == SPI_BUSY_IN_TX);
 80003ca:	bf00      	nop
 80003cc:	1dfb      	adds	r3, r7, #7
 80003ce:	2201      	movs	r2, #1
 80003d0:	4619      	mov	r1, r3
 80003d2:	4819      	ldr	r0, [pc, #100]	@ (8000438 <main+0xb8>)
 80003d4:	f000 fe5c 	bl	8001090 <SPI_SendDataIT>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b02      	cmp	r3, #2
 80003dc:	d0f6      	beq.n	80003cc <main+0x4c>


			while(SPI_ReceiveDataIT(&SPI1handle, &ReadByte, 1) == SPI_BUSY_IN_RX);
 80003de:	bf00      	nop
 80003e0:	2201      	movs	r2, #1
 80003e2:	4916      	ldr	r1, [pc, #88]	@ (800043c <main+0xbc>)
 80003e4:	4814      	ldr	r0, [pc, #80]	@ (8000438 <main+0xb8>)
 80003e6:	f000 fe76 	bl	80010d6 <SPI_ReceiveDataIT>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d0f7      	beq.n	80003e0 <main+0x60>
		while(!rcvStop)
 80003f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000430 <main+0xb0>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d0e7      	beq.n	80003ca <main+0x4a>

		}

		// confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI1, SPI_BSY_FLAG) );
 80003fa:	bf00      	nop
 80003fc:	2180      	movs	r1, #128	@ 0x80
 80003fe:	480b      	ldr	r0, [pc, #44]	@ (800042c <main+0xac>)
 8000400:	f000 fd78 	bl	8000ef4 <SPI_GetFlagStatus>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d1f8      	bne.n	80003fc <main+0x7c>

		//Disable the SPI1 peripheral
		SPI_Peripheral_Control(SPI1,DISABLE);
 800040a:	2100      	movs	r1, #0
 800040c:	4807      	ldr	r0, [pc, #28]	@ (800042c <main+0xac>)
 800040e:	f000 fe09 	bl	8001024 <SPI_Peripheral_Control>

		printf("Rcvd data = %s\n",RcvBuff);
 8000412:	490b      	ldr	r1, [pc, #44]	@ (8000440 <main+0xc0>)
 8000414:	480b      	ldr	r0, [pc, #44]	@ (8000444 <main+0xc4>)
 8000416:	f001 f875 	bl	8001504 <iprintf>

		dataAvailable = 0;
 800041a:	4b06      	ldr	r3, [pc, #24]	@ (8000434 <main+0xb4>)
 800041c:	2200      	movs	r2, #0
 800041e:	701a      	strb	r2, [r3, #0]

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI0,ENABLE);
 8000420:	2101      	movs	r1, #1
 8000422:	2006      	movs	r0, #6
 8000424:	f000 fbe0 	bl	8000be8 <GPIO_IRQInterruptConfig>
		rcvStop = 0;
 8000428:	e7bd      	b.n	80003a6 <main+0x26>
 800042a:	bf00      	nop
 800042c:	40013000 	.word	0x40013000
 8000430:	20000290 	.word	0x20000290
 8000434:	20000291 	.word	0x20000291
 8000438:	20000270 	.word	0x20000270
 800043c:	2000026c 	.word	0x2000026c
 8000440:	20000078 	.word	0x20000078
 8000444:	080021e8 	.word	0x080021e8

08000448 <SPI1_IRQHandler>:
	return 0;
}

/* Runs when a data byte is received from the peripheral over SPI*/
void SPI1_IRQHandler(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	SPI_IRQHandling(&SPI1handle);
 800044c:	4802      	ldr	r0, [pc, #8]	@ (8000458 <SPI1_IRQHandler+0x10>)
 800044e:	f000 fe65 	bl	800111c <SPI_IRQHandling>
}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	20000270 	.word	0x20000270

0800045c <SPI_ApplicationEventCallback>:

void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle, uint8_t AppEv) //Overriding the __weak attributed function
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	460b      	mov	r3, r1
 8000466:	70fb      	strb	r3, [r7, #3]
	static uint32_t i = 0;
	/* In the RX complete event , copy data in to rcv buffer . '\0' indicates end of message(rcvStop = 1) */
	if(AppEv == SPI_EVENT_RX_CMPLT)
 8000468:	78fb      	ldrb	r3, [r7, #3]
 800046a:	2b02      	cmp	r3, #2
 800046c:	d11f      	bne.n	80004ae <SPI_ApplicationEventCallback+0x52>
	{
		RcvBuff[i++] = ReadByte;
 800046e:	4b12      	ldr	r3, [pc, #72]	@ (80004b8 <SPI_ApplicationEventCallback+0x5c>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	1c5a      	adds	r2, r3, #1
 8000474:	4910      	ldr	r1, [pc, #64]	@ (80004b8 <SPI_ApplicationEventCallback+0x5c>)
 8000476:	600a      	str	r2, [r1, #0]
 8000478:	4a10      	ldr	r2, [pc, #64]	@ (80004bc <SPI_ApplicationEventCallback+0x60>)
 800047a:	7812      	ldrb	r2, [r2, #0]
 800047c:	b2d1      	uxtb	r1, r2
 800047e:	4a10      	ldr	r2, [pc, #64]	@ (80004c0 <SPI_ApplicationEventCallback+0x64>)
 8000480:	54d1      	strb	r1, [r2, r3]
		if(ReadByte == '\0' || ( i == MAX_LEN)){
 8000482:	4b0e      	ldr	r3, [pc, #56]	@ (80004bc <SPI_ApplicationEventCallback+0x60>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	2b00      	cmp	r3, #0
 800048a:	d004      	beq.n	8000496 <SPI_ApplicationEventCallback+0x3a>
 800048c:	4b0a      	ldr	r3, [pc, #40]	@ (80004b8 <SPI_ApplicationEventCallback+0x5c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000494:	d10b      	bne.n	80004ae <SPI_ApplicationEventCallback+0x52>
			rcvStop = 1;
 8000496:	4b0b      	ldr	r3, [pc, #44]	@ (80004c4 <SPI_ApplicationEventCallback+0x68>)
 8000498:	2201      	movs	r2, #1
 800049a:	701a      	strb	r2, [r3, #0]
			RcvBuff[i-1] = '\0';
 800049c:	4b06      	ldr	r3, [pc, #24]	@ (80004b8 <SPI_ApplicationEventCallback+0x5c>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	3b01      	subs	r3, #1
 80004a2:	4a07      	ldr	r2, [pc, #28]	@ (80004c0 <SPI_ApplicationEventCallback+0x64>)
 80004a4:	2100      	movs	r1, #0
 80004a6:	54d1      	strb	r1, [r2, r3]
			i = 0;
 80004a8:	4b03      	ldr	r3, [pc, #12]	@ (80004b8 <SPI_ApplicationEventCallback+0x5c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
		}
	}
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	20000294 	.word	0x20000294
 80004bc:	2000026c 	.word	0x2000026c
 80004c0:	20000078 	.word	0x20000078
 80004c4:	20000290 	.word	0x20000290

080004c8 <EXTI0_IRQHandler>:

/* Slave data available interrupt handler */
void EXTI0_IRQHandler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_0);
 80004cc:	2000      	movs	r0, #0
 80004ce:	f000 fc3d 	bl	8000d4c <GPIO_IRQHandling>
	dataAvailable = 1;
 80004d2:	4b02      	ldr	r3, [pc, #8]	@ (80004dc <EXTI0_IRQHandler+0x14>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	701a      	strb	r2, [r3, #0]
}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000291 	.word	0x20000291

080004e0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000524 <ITM_SendChar+0x44>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a0d      	ldr	r2, [pc, #52]	@ (8000524 <ITM_SendChar+0x44>)
 80004f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004f4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000528 <ITM_SendChar+0x48>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a0b      	ldr	r2, [pc, #44]	@ (8000528 <ITM_SendChar+0x48>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000502:	bf00      	nop
 8000504:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0f8      	beq.n	8000504 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000512:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	6013      	str	r3, [r2, #0]
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr
 8000524:	e000edfc 	.word	0xe000edfc
 8000528:	e0000e00 	.word	0xe0000e00

0800052c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	e00a      	b.n	8000554 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800053e:	f3af 8000 	nop.w
 8000542:	4601      	mov	r1, r0
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	1c5a      	adds	r2, r3, #1
 8000548:	60ba      	str	r2, [r7, #8]
 800054a:	b2ca      	uxtb	r2, r1
 800054c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	3301      	adds	r3, #1
 8000552:	617b      	str	r3, [r7, #20]
 8000554:	697a      	ldr	r2, [r7, #20]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	429a      	cmp	r2, r3
 800055a:	dbf0      	blt.n	800053e <_read+0x12>
  }

  return len;
 800055c:	687b      	ldr	r3, [r7, #4]
}
 800055e:	4618      	mov	r0, r3
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b086      	sub	sp, #24
 800056a:	af00      	add	r7, sp, #0
 800056c:	60f8      	str	r0, [r7, #12]
 800056e:	60b9      	str	r1, [r7, #8]
 8000570:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
 8000576:	e009      	b.n	800058c <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	1c5a      	adds	r2, r3, #1
 800057c:	60ba      	str	r2, [r7, #8]
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	4618      	mov	r0, r3
 8000582:	f7ff ffad 	bl	80004e0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	3301      	adds	r3, #1
 800058a:	617b      	str	r3, [r7, #20]
 800058c:	697a      	ldr	r2, [r7, #20]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	429a      	cmp	r2, r3
 8000592:	dbf1      	blt.n	8000578 <_write+0x12>
  }
  return len;
 8000594:	687b      	ldr	r3, [r7, #4]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3718      	adds	r7, #24
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <_close>:

int _close(int file)
{
 800059e:	b480      	push	{r7}
 80005a0:	b083      	sub	sp, #12
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr

080005b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005c4:	605a      	str	r2, [r3, #4]
  return 0;
 80005c6:	2300      	movs	r3, #0
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr

080005d2 <_isatty>:

int _isatty(int file)
{
 80005d2:	b480      	push	{r7}
 80005d4:	b083      	sub	sp, #12
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005da:	2301      	movs	r3, #1
}
 80005dc:	4618      	mov	r0, r3
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr

080005e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005e6:	b480      	push	{r7}
 80005e8:	b085      	sub	sp, #20
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	60f8      	str	r0, [r7, #12]
 80005ee:	60b9      	str	r1, [r7, #8]
 80005f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005f2:	2300      	movs	r3, #0
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bc80      	pop	{r7}
 80005fc:	4770      	bx	lr
	...

08000600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000608:	4a14      	ldr	r2, [pc, #80]	@ (800065c <_sbrk+0x5c>)
 800060a:	4b15      	ldr	r3, [pc, #84]	@ (8000660 <_sbrk+0x60>)
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000614:	4b13      	ldr	r3, [pc, #76]	@ (8000664 <_sbrk+0x64>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d102      	bne.n	8000622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800061c:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <_sbrk+0x64>)
 800061e:	4a12      	ldr	r2, [pc, #72]	@ (8000668 <_sbrk+0x68>)
 8000620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000622:	4b10      	ldr	r3, [pc, #64]	@ (8000664 <_sbrk+0x64>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	693a      	ldr	r2, [r7, #16]
 800062c:	429a      	cmp	r2, r3
 800062e:	d207      	bcs.n	8000640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000630:	f001 f80c 	bl	800164c <__errno>
 8000634:	4603      	mov	r3, r0
 8000636:	220c      	movs	r2, #12
 8000638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	e009      	b.n	8000654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000640:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <_sbrk+0x64>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000646:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <_sbrk+0x64>)
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4413      	add	r3, r2
 800064e:	4a05      	ldr	r2, [pc, #20]	@ (8000664 <_sbrk+0x64>)
 8000650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000652:	68fb      	ldr	r3, [r7, #12]
}
 8000654:	4618      	mov	r0, r3
 8000656:	3718      	adds	r7, #24
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20050000 	.word	0x20050000
 8000660:	00000400 	.word	0x00000400
 8000664:	20000298 	.word	0x20000298
 8000668:	200003e8 	.word	0x200003e8

0800066c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800066c:	480d      	ldr	r0, [pc, #52]	@ (80006a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800066e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000670:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000674:	480c      	ldr	r0, [pc, #48]	@ (80006a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000676:	490d      	ldr	r1, [pc, #52]	@ (80006ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000678:	4a0d      	ldr	r2, [pc, #52]	@ (80006b0 <LoopForever+0xe>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800067c:	e002      	b.n	8000684 <LoopCopyDataInit>

0800067e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000682:	3304      	adds	r3, #4

08000684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000688:	d3f9      	bcc.n	800067e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068a:	4a0a      	ldr	r2, [pc, #40]	@ (80006b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800068c:	4c0a      	ldr	r4, [pc, #40]	@ (80006b8 <LoopForever+0x16>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000690:	e001      	b.n	8000696 <LoopFillZerobss>

08000692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000694:	3204      	adds	r2, #4

08000696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000698:	d3fb      	bcc.n	8000692 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800069a:	f000 ffdd 	bl	8001658 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069e:	f7ff fe6f 	bl	8000380 <main>

080006a2 <LoopForever>:

LoopForever:
  b LoopForever
 80006a2:	e7fe      	b.n	80006a2 <LoopForever>
  ldr   r0, =_estack
 80006a4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80006a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006b0:	0800223c 	.word	0x0800223c
  ldr r2, =_sbss
 80006b4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006b8:	200003e8 	.word	0x200003e8

080006bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006bc:	e7fe      	b.n	80006bc <ADC1_2_IRQHandler>
	...

080006c0 <GPIO_PeriClockControl>:
 *
 * @Note:		-
 *****************************************************************************/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80006cc:	78fb      	ldrb	r3, [r7, #3]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d162      	bne.n	8000798 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA){
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80006d8:	d106      	bne.n	80006e8 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80006da:	4b63      	ldr	r3, [pc, #396]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006de:	4a62      	ldr	r2, [pc, #392]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
			GPIOI_PCLK_DI();
		}

	}

}
 80006e6:	e0b9      	b.n	800085c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB){
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4a60      	ldr	r2, [pc, #384]	@ (800086c <GPIO_PeriClockControl+0x1ac>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d106      	bne.n	80006fe <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80006f0:	4b5d      	ldr	r3, [pc, #372]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 80006f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f4:	4a5c      	ldr	r2, [pc, #368]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 80006f6:	f043 0302 	orr.w	r3, r3, #2
 80006fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80006fc:	e0ae      	b.n	800085c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC){
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a5b      	ldr	r2, [pc, #364]	@ (8000870 <GPIO_PeriClockControl+0x1b0>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d106      	bne.n	8000714 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000706:	4b58      	ldr	r3, [pc, #352]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	4a57      	ldr	r2, [pc, #348]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000712:	e0a3      	b.n	800085c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD){
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a57      	ldr	r2, [pc, #348]	@ (8000874 <GPIO_PeriClockControl+0x1b4>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d106      	bne.n	800072a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800071c:	4b52      	ldr	r3, [pc, #328]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 800071e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000720:	4a51      	ldr	r2, [pc, #324]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 8000722:	f043 0308 	orr.w	r3, r3, #8
 8000726:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000728:	e098      	b.n	800085c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE){
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4a52      	ldr	r2, [pc, #328]	@ (8000878 <GPIO_PeriClockControl+0x1b8>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d106      	bne.n	8000740 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000732:	4b4d      	ldr	r3, [pc, #308]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	4a4c      	ldr	r2, [pc, #304]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800073e:	e08d      	b.n	800085c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF){
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a4e      	ldr	r2, [pc, #312]	@ (800087c <GPIO_PeriClockControl+0x1bc>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d106      	bne.n	8000756 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000748:	4b47      	ldr	r3, [pc, #284]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 800074a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074c:	4a46      	ldr	r2, [pc, #280]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 800074e:	f043 0320 	orr.w	r3, r3, #32
 8000752:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000754:	e082      	b.n	800085c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG){
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a49      	ldr	r2, [pc, #292]	@ (8000880 <GPIO_PeriClockControl+0x1c0>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d106      	bne.n	800076c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800075e:	4b42      	ldr	r3, [pc, #264]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	4a41      	ldr	r2, [pc, #260]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 8000764:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000768:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800076a:	e077      	b.n	800085c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH){
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4a45      	ldr	r2, [pc, #276]	@ (8000884 <GPIO_PeriClockControl+0x1c4>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d106      	bne.n	8000782 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000774:	4b3c      	ldr	r3, [pc, #240]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 8000776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000778:	4a3b      	ldr	r2, [pc, #236]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 800077a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800077e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000780:	e06c      	b.n	800085c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI){
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a40      	ldr	r2, [pc, #256]	@ (8000888 <GPIO_PeriClockControl+0x1c8>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d168      	bne.n	800085c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800078a:	4b37      	ldr	r3, [pc, #220]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078e:	4a36      	ldr	r2, [pc, #216]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 8000790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000794:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000796:	e061      	b.n	800085c <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA){
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800079e:	d106      	bne.n	80007ae <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80007a0:	4b31      	ldr	r3, [pc, #196]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 80007a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a4:	4a30      	ldr	r2, [pc, #192]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 80007a6:	f023 0301 	bic.w	r3, r3, #1
 80007aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80007ac:	e056      	b.n	800085c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB){
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4a2e      	ldr	r2, [pc, #184]	@ (800086c <GPIO_PeriClockControl+0x1ac>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d106      	bne.n	80007c4 <GPIO_PeriClockControl+0x104>
			GPIOA_PCLK_DI();
 80007b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ba:	4a2b      	ldr	r2, [pc, #172]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 80007bc:	f023 0301 	bic.w	r3, r3, #1
 80007c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80007c2:	e04b      	b.n	800085c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC){
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a2a      	ldr	r2, [pc, #168]	@ (8000870 <GPIO_PeriClockControl+0x1b0>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d106      	bne.n	80007da <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80007cc:	4b26      	ldr	r3, [pc, #152]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 80007ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d0:	4a25      	ldr	r2, [pc, #148]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 80007d2:	f023 0304 	bic.w	r3, r3, #4
 80007d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80007d8:	e040      	b.n	800085c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD){
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a25      	ldr	r2, [pc, #148]	@ (8000874 <GPIO_PeriClockControl+0x1b4>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d106      	bne.n	80007f0 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80007e2:	4b21      	ldr	r3, [pc, #132]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	4a20      	ldr	r2, [pc, #128]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 80007e8:	f023 0308 	bic.w	r3, r3, #8
 80007ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80007ee:	e035      	b.n	800085c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE){
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a21      	ldr	r2, [pc, #132]	@ (8000878 <GPIO_PeriClockControl+0x1b8>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d106      	bne.n	8000806 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 80007f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 80007fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fc:	4a1a      	ldr	r2, [pc, #104]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 80007fe:	f023 0310 	bic.w	r3, r3, #16
 8000802:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000804:	e02a      	b.n	800085c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF){
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a1c      	ldr	r2, [pc, #112]	@ (800087c <GPIO_PeriClockControl+0x1bc>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d106      	bne.n	800081c <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 800080e:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	4a15      	ldr	r2, [pc, #84]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 8000814:	f023 0320 	bic.w	r3, r3, #32
 8000818:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800081a:	e01f      	b.n	800085c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG){
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a18      	ldr	r2, [pc, #96]	@ (8000880 <GPIO_PeriClockControl+0x1c0>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d106      	bne.n	8000832 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000824:	4b10      	ldr	r3, [pc, #64]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 8000826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000828:	4a0f      	ldr	r2, [pc, #60]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 800082a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800082e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000830:	e014      	b.n	800085c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH){
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a13      	ldr	r2, [pc, #76]	@ (8000884 <GPIO_PeriClockControl+0x1c4>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d106      	bne.n	8000848 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800083a:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	4a0a      	ldr	r2, [pc, #40]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 8000840:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000844:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000846:	e009      	b.n	800085c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI){
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a0f      	ldr	r2, [pc, #60]	@ (8000888 <GPIO_PeriClockControl+0x1c8>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d105      	bne.n	800085c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000850:	4b05      	ldr	r3, [pc, #20]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 8000852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000854:	4a04      	ldr	r2, [pc, #16]	@ (8000868 <GPIO_PeriClockControl+0x1a8>)
 8000856:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800085a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000
 800086c:	48000400 	.word	0x48000400
 8000870:	48000800 	.word	0x48000800
 8000874:	48000c00 	.word	0x48000c00
 8000878:	48001000 	.word	0x48001000
 800087c:	48001400 	.word	0x48001400
 8000880:	48001800 	.word	0x48001800
 8000884:	48001c00 	.word	0x48001c00
 8000888:	48002000 	.word	0x48002000

0800088c <GPIO_Init>:
/*Initializing GPIO with user's required configurations from GPIO_PinConfig_t*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]

	/*Enable the peripheral clock so that its easy for the user - added later*/
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2101      	movs	r1, #1
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ff10 	bl	80006c0 <GPIO_PeriClockControl>

	uint32_t  temp=0; //Temporary register
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]

	//1. Configure the mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	795b      	ldrb	r3, [r3, #5]
 80008a8:	2b03      	cmp	r3, #3
 80008aa:	d820      	bhi.n	80008ee <GPIO_Init+0x62>
		//Non-interrupt modes
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //2 bits for each pin number so multiply by 2
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	795b      	ldrb	r3, [r3, #5]
 80008b0:	461a      	mov	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	791b      	ldrb	r3, [r3, #4]
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	617b      	str	r3, [r7, #20]
		//Clear required bit fields
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	791b      	ldrb	r3, [r3, #4]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	2103      	movs	r1, #3
 80008cc:	fa01 f303 	lsl.w	r3, r1, r3
 80008d0:	43db      	mvns	r3, r3
 80008d2:	4619      	mov	r1, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	400a      	ands	r2, r1
 80008da:	601a      	str	r2, [r3, #0]
		//Now store into actual register
		pGPIOHandle->pGPIOx->MODER |= temp;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	6819      	ldr	r1, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	430a      	orrs	r2, r1
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	e0d7      	b.n	8000a9e <GPIO_Init+0x212>
		//Code later - Lecture 108

		/*IMPORTANT Change - To make sure that pin is configured as input, in L496 default is  Analog (0xFFFFFFFF)
		 * for other micro-controllers default might already be in input mode (0x00000000) ************************/

		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	791b      	ldrb	r3, [r3, #4]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	2103      	movs	r1, #3
 80008fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	4619      	mov	r1, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	400a      	ands	r2, r1
 800090a:	601a      	str	r2, [r3, #0]

		/**********************************************************************************************************/

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	795b      	ldrb	r3, [r3, #5]
 8000910:	2b04      	cmp	r3, #4
 8000912:	d117      	bne.n	8000944 <GPIO_Init+0xb8>
		{
			/*1. Configure FTSR1*/
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000914:	4b4a      	ldr	r3, [pc, #296]	@ (8000a40 <GPIO_Init+0x1b4>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	7912      	ldrb	r2, [r2, #4]
 800091c:	4611      	mov	r1, r2
 800091e:	2201      	movs	r2, #1
 8000920:	408a      	lsls	r2, r1
 8000922:	4611      	mov	r1, r2
 8000924:	4a46      	ldr	r2, [pc, #280]	@ (8000a40 <GPIO_Init+0x1b4>)
 8000926:	430b      	orrs	r3, r1
 8000928:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR1 bit
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800092a:	4b45      	ldr	r3, [pc, #276]	@ (8000a40 <GPIO_Init+0x1b4>)
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	7912      	ldrb	r2, [r2, #4]
 8000932:	4611      	mov	r1, r2
 8000934:	2201      	movs	r2, #1
 8000936:	408a      	lsls	r2, r1
 8000938:	43d2      	mvns	r2, r2
 800093a:	4611      	mov	r1, r2
 800093c:	4a40      	ldr	r2, [pc, #256]	@ (8000a40 <GPIO_Init+0x1b4>)
 800093e:	400b      	ands	r3, r1
 8000940:	6093      	str	r3, [r2, #8]
 8000942:	e035      	b.n	80009b0 <GPIO_Init+0x124>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	795b      	ldrb	r3, [r3, #5]
 8000948:	2b05      	cmp	r3, #5
 800094a:	d117      	bne.n	800097c <GPIO_Init+0xf0>
		{
			/*1. Configure RTSR1*/
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800094c:	4b3c      	ldr	r3, [pc, #240]	@ (8000a40 <GPIO_Init+0x1b4>)
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	7912      	ldrb	r2, [r2, #4]
 8000954:	4611      	mov	r1, r2
 8000956:	2201      	movs	r2, #1
 8000958:	408a      	lsls	r2, r1
 800095a:	4611      	mov	r1, r2
 800095c:	4a38      	ldr	r2, [pc, #224]	@ (8000a40 <GPIO_Init+0x1b4>)
 800095e:	430b      	orrs	r3, r1
 8000960:	6093      	str	r3, [r2, #8]
			//Clear the corresponding FTSR1 bit
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000962:	4b37      	ldr	r3, [pc, #220]	@ (8000a40 <GPIO_Init+0x1b4>)
 8000964:	68db      	ldr	r3, [r3, #12]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	7912      	ldrb	r2, [r2, #4]
 800096a:	4611      	mov	r1, r2
 800096c:	2201      	movs	r2, #1
 800096e:	408a      	lsls	r2, r1
 8000970:	43d2      	mvns	r2, r2
 8000972:	4611      	mov	r1, r2
 8000974:	4a32      	ldr	r2, [pc, #200]	@ (8000a40 <GPIO_Init+0x1b4>)
 8000976:	400b      	ands	r3, r1
 8000978:	60d3      	str	r3, [r2, #12]
 800097a:	e019      	b.n	80009b0 <GPIO_Init+0x124>

		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FRT)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	795b      	ldrb	r3, [r3, #5]
 8000980:	2b06      	cmp	r3, #6
 8000982:	d115      	bne.n	80009b0 <GPIO_Init+0x124>
		{
			/*1. Configure both FTSR and RTSR, set both*/
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000984:	4b2e      	ldr	r3, [pc, #184]	@ (8000a40 <GPIO_Init+0x1b4>)
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	7912      	ldrb	r2, [r2, #4]
 800098c:	4611      	mov	r1, r2
 800098e:	2201      	movs	r2, #1
 8000990:	408a      	lsls	r2, r1
 8000992:	4611      	mov	r1, r2
 8000994:	4a2a      	ldr	r2, [pc, #168]	@ (8000a40 <GPIO_Init+0x1b4>)
 8000996:	430b      	orrs	r3, r1
 8000998:	6093      	str	r3, [r2, #8]
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800099a:	4b29      	ldr	r3, [pc, #164]	@ (8000a40 <GPIO_Init+0x1b4>)
 800099c:	68db      	ldr	r3, [r3, #12]
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	7912      	ldrb	r2, [r2, #4]
 80009a2:	4611      	mov	r1, r2
 80009a4:	2201      	movs	r2, #1
 80009a6:	408a      	lsls	r2, r1
 80009a8:	4611      	mov	r1, r2
 80009aa:	4a25      	ldr	r2, [pc, #148]	@ (8000a40 <GPIO_Init+0x1b4>)
 80009ac:	430b      	orrs	r3, r1
 80009ae:	60d3      	str	r3, [r2, #12]
		}

		/*2. Configure the GPIO port selection in SYSCGF_EXTICR*/
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	791b      	ldrb	r3, [r3, #4]
 80009b4:	089b      	lsrs	r3, r3, #2
 80009b6:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	791b      	ldrb	r3, [r3, #4]
 80009bc:	f003 0303 	and.w	r3, r3, #3
 80009c0:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80009ca:	d04b      	beq.n	8000a64 <GPIO_Init+0x1d8>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a1c      	ldr	r2, [pc, #112]	@ (8000a44 <GPIO_Init+0x1b8>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d032      	beq.n	8000a3c <GPIO_Init+0x1b0>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a1b      	ldr	r2, [pc, #108]	@ (8000a48 <GPIO_Init+0x1bc>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d02b      	beq.n	8000a38 <GPIO_Init+0x1ac>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a19      	ldr	r2, [pc, #100]	@ (8000a4c <GPIO_Init+0x1c0>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d024      	beq.n	8000a34 <GPIO_Init+0x1a8>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a18      	ldr	r2, [pc, #96]	@ (8000a50 <GPIO_Init+0x1c4>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d01d      	beq.n	8000a30 <GPIO_Init+0x1a4>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a16      	ldr	r2, [pc, #88]	@ (8000a54 <GPIO_Init+0x1c8>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d016      	beq.n	8000a2c <GPIO_Init+0x1a0>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a15      	ldr	r2, [pc, #84]	@ (8000a58 <GPIO_Init+0x1cc>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d00f      	beq.n	8000a28 <GPIO_Init+0x19c>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a13      	ldr	r2, [pc, #76]	@ (8000a5c <GPIO_Init+0x1d0>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d008      	beq.n	8000a24 <GPIO_Init+0x198>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a12      	ldr	r2, [pc, #72]	@ (8000a60 <GPIO_Init+0x1d4>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d101      	bne.n	8000a20 <GPIO_Init+0x194>
 8000a1c:	2308      	movs	r3, #8
 8000a1e:	e022      	b.n	8000a66 <GPIO_Init+0x1da>
 8000a20:	2300      	movs	r3, #0
 8000a22:	e020      	b.n	8000a66 <GPIO_Init+0x1da>
 8000a24:	2307      	movs	r3, #7
 8000a26:	e01e      	b.n	8000a66 <GPIO_Init+0x1da>
 8000a28:	2306      	movs	r3, #6
 8000a2a:	e01c      	b.n	8000a66 <GPIO_Init+0x1da>
 8000a2c:	2305      	movs	r3, #5
 8000a2e:	e01a      	b.n	8000a66 <GPIO_Init+0x1da>
 8000a30:	2304      	movs	r3, #4
 8000a32:	e018      	b.n	8000a66 <GPIO_Init+0x1da>
 8000a34:	2303      	movs	r3, #3
 8000a36:	e016      	b.n	8000a66 <GPIO_Init+0x1da>
 8000a38:	2302      	movs	r3, #2
 8000a3a:	e014      	b.n	8000a66 <GPIO_Init+0x1da>
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e012      	b.n	8000a66 <GPIO_Init+0x1da>
 8000a40:	40010400 	.word	0x40010400
 8000a44:	48000400 	.word	0x48000400
 8000a48:	48000800 	.word	0x48000800
 8000a4c:	48000c00 	.word	0x48000c00
 8000a50:	48001000 	.word	0x48001000
 8000a54:	48001400 	.word	0x48001400
 8000a58:	48001800 	.word	0x48001800
 8000a5c:	48001c00 	.word	0x48001c00
 8000a60:	48002000 	.word	0x48002000
 8000a64:	2300      	movs	r3, #0
 8000a66:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000a68:	4b5c      	ldr	r3, [pc, #368]	@ (8000bdc <GPIO_Init+0x350>)
 8000a6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a6c:	4a5b      	ldr	r2, [pc, #364]	@ (8000bdc <GPIO_Init+0x350>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	6613      	str	r3, [r2, #96]	@ 0x60
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000a74:	7c7a      	ldrb	r2, [r7, #17]
 8000a76:	7cbb      	ldrb	r3, [r7, #18]
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	fa02 f103 	lsl.w	r1, r2, r3
 8000a7e:	4a58      	ldr	r2, [pc, #352]	@ (8000be0 <GPIO_Init+0x354>)
 8000a80:	7cfb      	ldrb	r3, [r7, #19]
 8000a82:	3302      	adds	r3, #2
 8000a84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		/*3. Enable EXTI interrupt delivery mode using IMR */
		EXTI->IMR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a88:	4b56      	ldr	r3, [pc, #344]	@ (8000be4 <GPIO_Init+0x358>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	7912      	ldrb	r2, [r2, #4]
 8000a90:	4611      	mov	r1, r2
 8000a92:	2201      	movs	r2, #1
 8000a94:	408a      	lsls	r2, r1
 8000a96:	4611      	mov	r1, r2
 8000a98:	4a52      	ldr	r2, [pc, #328]	@ (8000be4 <GPIO_Init+0x358>)
 8000a9a:	430b      	orrs	r3, r1
 8000a9c:	6013      	str	r3, [r2, #0]

	}

	//Reset value of temp
	temp=0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]

	//2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	799b      	ldrb	r3, [r3, #6]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	791b      	ldrb	r3, [r3, #4]
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	689a      	ldr	r2, [r3, #8]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	791b      	ldrb	r3, [r3, #4]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	408b      	lsls	r3, r1
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	400a      	ands	r2, r1
 8000ace:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	6899      	ldr	r1, [r3, #8]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	697a      	ldr	r2, [r7, #20]
 8000adc:	430a      	orrs	r2, r1
 8000ade:	609a      	str	r2, [r3, #8]

	temp=0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]

	//3. Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	79db      	ldrb	r3, [r3, #7]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	791b      	ldrb	r3, [r3, #4]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68da      	ldr	r2, [r3, #12]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	791b      	ldrb	r3, [r3, #4]
 8000b00:	4619      	mov	r1, r3
 8000b02:	2303      	movs	r3, #3
 8000b04:	408b      	lsls	r3, r1
 8000b06:	43db      	mvns	r3, r3
 8000b08:	4619      	mov	r1, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	400a      	ands	r2, r1
 8000b10:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	68d9      	ldr	r1, [r3, #12]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	60da      	str	r2, [r3, #12]

	temp=0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]

	//4. Configure the OPType
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	7a1b      	ldrb	r3, [r3, #8]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	791b      	ldrb	r3, [r3, #4]
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	791b      	ldrb	r3, [r3, #4]
 8000b40:	4619      	mov	r1, r3
 8000b42:	2301      	movs	r3, #1
 8000b44:	408b      	lsls	r3, r1
 8000b46:	43db      	mvns	r3, r3
 8000b48:	4619      	mov	r1, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	400a      	ands	r2, r1
 8000b50:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	6859      	ldr	r1, [r3, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	605a      	str	r2, [r3, #4]

	temp=0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]

	//5. Configure AF
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	795b      	ldrb	r3, [r3, #5]
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d131      	bne.n	8000bd2 <GPIO_Init+0x346>

		uint8_t temp1, temp2; //Check Theory
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	791b      	ldrb	r3, [r3, #4]
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	791b      	ldrb	r3, [r3, #4]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0x0F << (4* temp2)); //Clearing
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	7c3a      	ldrb	r2, [r7, #16]
 8000b86:	3208      	adds	r2, #8
 8000b88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	220f      	movs	r2, #15
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	4618      	mov	r0, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	7c3a      	ldrb	r2, [r7, #16]
 8000ba0:	4001      	ands	r1, r0
 8000ba2:	3208      	adds	r2, #8
 8000ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2)); //Setting
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	7c3a      	ldrb	r2, [r7, #16]
 8000bae:	3208      	adds	r2, #8
 8000bb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	7a5b      	ldrb	r3, [r3, #9]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	7c3a      	ldrb	r2, [r7, #16]
 8000bca:	4301      	orrs	r1, r0
 8000bcc:	3208      	adds	r2, #8
 8000bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 8000bd2:	bf00      	nop
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40010000 	.word	0x40010000
 8000be4:	40010400 	.word	0x40010400

08000be8 <GPIO_IRQInterruptConfig>:
{
	pGPIOx->ODR ^= (1 << PinNumber);
}

void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	71fb      	strb	r3, [r7, #7]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	71bb      	strb	r3, [r7, #6]
	//NVIC Registers data available in Cortex M4 generic user guide
	//Interrupt Set-Enable Registers (ISER) , Interrupt Clear-Enable Registers(ICER) and Interrupt Priority Registers (IPR) are to be used.

	if(EnorDi == ENABLE){
 8000bf8:	79bb      	ldrb	r3, [r7, #6]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d133      	bne.n	8000c66 <GPIO_IRQInterruptConfig+0x7e>

		if(IRQNumber <= 31){
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b1f      	cmp	r3, #31
 8000c02:	d80a      	bhi.n	8000c1a <GPIO_IRQInterruptConfig+0x32>
			/*Program ISER0 Register*/
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000c04:	4b34      	ldr	r3, [pc, #208]	@ (8000cd8 <GPIO_IRQInterruptConfig+0xf0>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	79fa      	ldrb	r2, [r7, #7]
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c10:	4611      	mov	r1, r2
 8000c12:	4a31      	ldr	r2, [pc, #196]	@ (8000cd8 <GPIO_IRQInterruptConfig+0xf0>)
 8000c14:	430b      	orrs	r3, r1
 8000c16:	6013      	str	r3, [r2, #0]
			/*Program ICER2 Register*/
			*NVIC_ICER2 |= (1 << (IRQNumber%64));
		}
	}

}
 8000c18:	e059      	b.n	8000cce <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber <= 64){
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b1f      	cmp	r3, #31
 8000c1e:	d90f      	bls.n	8000c40 <GPIO_IRQInterruptConfig+0x58>
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b40      	cmp	r3, #64	@ 0x40
 8000c24:	d80c      	bhi.n	8000c40 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber%32));
 8000c26:	4b2d      	ldr	r3, [pc, #180]	@ (8000cdc <GPIO_IRQInterruptConfig+0xf4>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	79fa      	ldrb	r2, [r7, #7]
 8000c2c:	f002 021f 	and.w	r2, r2, #31
 8000c30:	2101      	movs	r1, #1
 8000c32:	fa01 f202 	lsl.w	r2, r1, r2
 8000c36:	4611      	mov	r1, r2
 8000c38:	4a28      	ldr	r2, [pc, #160]	@ (8000cdc <GPIO_IRQInterruptConfig+0xf4>)
 8000c3a:	430b      	orrs	r3, r1
 8000c3c:	6013      	str	r3, [r2, #0]
 8000c3e:	e046      	b.n	8000cce <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 64 && IRQNumber <= 96){
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	2b40      	cmp	r3, #64	@ 0x40
 8000c44:	d943      	bls.n	8000cce <GPIO_IRQInterruptConfig+0xe6>
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	2b60      	cmp	r3, #96	@ 0x60
 8000c4a:	d840      	bhi.n	8000cce <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber%64));
 8000c4c:	4b24      	ldr	r3, [pc, #144]	@ (8000ce0 <GPIO_IRQInterruptConfig+0xf8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	79fa      	ldrb	r2, [r7, #7]
 8000c52:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000c56:	2101      	movs	r1, #1
 8000c58:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4a20      	ldr	r2, [pc, #128]	@ (8000ce0 <GPIO_IRQInterruptConfig+0xf8>)
 8000c60:	430b      	orrs	r3, r1
 8000c62:	6013      	str	r3, [r2, #0]
}
 8000c64:	e033      	b.n	8000cce <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31){
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b1f      	cmp	r3, #31
 8000c6a:	d80a      	bhi.n	8000c82 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <GPIO_IRQInterruptConfig+0xfc>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	79fa      	ldrb	r2, [r7, #7]
 8000c72:	2101      	movs	r1, #1
 8000c74:	fa01 f202 	lsl.w	r2, r1, r2
 8000c78:	4611      	mov	r1, r2
 8000c7a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ce4 <GPIO_IRQInterruptConfig+0xfc>)
 8000c7c:	430b      	orrs	r3, r1
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	e025      	b.n	8000cce <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber <= 64){
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	2b1f      	cmp	r3, #31
 8000c86:	d90f      	bls.n	8000ca8 <GPIO_IRQInterruptConfig+0xc0>
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	2b40      	cmp	r3, #64	@ 0x40
 8000c8c:	d80c      	bhi.n	8000ca8 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber%32));
 8000c8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ce8 <GPIO_IRQInterruptConfig+0x100>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	79fa      	ldrb	r2, [r7, #7]
 8000c94:	f002 021f 	and.w	r2, r2, #31
 8000c98:	2101      	movs	r1, #1
 8000c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	4a11      	ldr	r2, [pc, #68]	@ (8000ce8 <GPIO_IRQInterruptConfig+0x100>)
 8000ca2:	430b      	orrs	r3, r1
 8000ca4:	6013      	str	r3, [r2, #0]
 8000ca6:	e012      	b.n	8000cce <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 64 && IRQNumber <= 96){
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	2b40      	cmp	r3, #64	@ 0x40
 8000cac:	d90f      	bls.n	8000cce <GPIO_IRQInterruptConfig+0xe6>
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	2b60      	cmp	r3, #96	@ 0x60
 8000cb2:	d80c      	bhi.n	8000cce <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber%64));
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000cec <GPIO_IRQInterruptConfig+0x104>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	79fa      	ldrb	r2, [r7, #7]
 8000cba:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	4a09      	ldr	r2, [pc, #36]	@ (8000cec <GPIO_IRQInterruptConfig+0x104>)
 8000cc8:	430b      	orrs	r3, r1
 8000cca:	6013      	str	r3, [r2, #0]
}
 8000ccc:	e7ff      	b.n	8000cce <GPIO_IRQInterruptConfig+0xe6>
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	e000e100 	.word	0xe000e100
 8000cdc:	e000e104 	.word	0xe000e104
 8000ce0:	e000e108 	.word	0xe000e108
 8000ce4:	e000e180 	.word	0xe000e180
 8000ce8:	e000e184 	.word	0xe000e184
 8000cec:	e000e188 	.word	0xe000e188

08000cf0 <GPIO_IRQPriorityConfig>:

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	460a      	mov	r2, r1
 8000cfa:	71fb      	strb	r3, [r7, #7]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	71bb      	strb	r3, [r7, #6]
	//1. Find out the IPR register
	uint8_t iprx = IRQNumber / 4;
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	089b      	lsrs	r3, r3, #2
 8000d04:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_bits = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED); //NO_PR_BITS_IMPLEMENTED is usually upper 4 bits of each section in STM
 8000d0e:	7bbb      	ldrb	r3, [r7, #14]
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	3304      	adds	r3, #4
 8000d16:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASEADDR + (4 * iprx)) |=  (IRQPriority << shift_bits);
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	011b      	lsls	r3, r3, #4
 8000d1c:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000d20:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	79b9      	ldrb	r1, [r7, #6]
 8000d28:	7b7b      	ldrb	r3, [r7, #13]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	4619      	mov	r1, r3
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	011b      	lsls	r3, r3, #4
 8000d34:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000d38:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	601a      	str	r2, [r3, #0]

	/*Interrupt Priority when more IRQs have the same Priority
	 * Refer the below the web source for information:
	 * https://community.arm.com/arm-community-blogs/b/embedded-and-microcontrollers-blog/posts/cutting-through-the-confusion-with-arm-cortex-m-interrupt-priorities
	 * */
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
	...

08000d4c <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber){
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]

	 /*Clear the EXTI PR register for the corresponding GPIO pin
	  * Actual ISR code has to be executed in the main user application code,
	  * over riding the .weak ISR implementations is the device startup code.*/

	if(EXTI->PR1 & (1 << PinNumber))
 8000d56:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <GPIO_IRQHandling+0x3c>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	79fa      	ldrb	r2, [r7, #7]
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d62:	4013      	ands	r3, r2
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d009      	beq.n	8000d7c <GPIO_IRQHandling+0x30>
	{
		// This bit is cleared by writing a ‘1’ to the bit. As per RM
		EXTI->PR1 |= (1 << PinNumber);
 8000d68:	4b07      	ldr	r3, [pc, #28]	@ (8000d88 <GPIO_IRQHandling+0x3c>)
 8000d6a:	695b      	ldr	r3, [r3, #20]
 8000d6c:	79fa      	ldrb	r2, [r7, #7]
 8000d6e:	2101      	movs	r1, #1
 8000d70:	fa01 f202 	lsl.w	r2, r1, r2
 8000d74:	4611      	mov	r1, r2
 8000d76:	4a04      	ldr	r2, [pc, #16]	@ (8000d88 <GPIO_IRQHandling+0x3c>)
 8000d78:	430b      	orrs	r3, r1
 8000d7a:	6153      	str	r3, [r2, #20]
	}

}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40010400 	.word	0x40010400

08000d8c <SPI_PeriClockControl>:
static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle);


void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000d98:	78fb      	ldrb	r3, [r7, #3]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d120      	bne.n	8000de0 <SPI_PeriClockControl+0x54>
		if(pSPIx == SPI1){
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a22      	ldr	r2, [pc, #136]	@ (8000e2c <SPI_PeriClockControl+0xa0>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d106      	bne.n	8000db4 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000da6:	4b22      	ldr	r3, [pc, #136]	@ (8000e30 <SPI_PeriClockControl+0xa4>)
 8000da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000daa:	4a21      	ldr	r2, [pc, #132]	@ (8000e30 <SPI_PeriClockControl+0xa4>)
 8000dac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000db0:	6613      	str	r3, [r2, #96]	@ 0x60
		else if(pSPIx == SPI3){
			SPI3_PCLK_DI();
		}

	}
}
 8000db2:	e035      	b.n	8000e20 <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI2){
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a1f      	ldr	r2, [pc, #124]	@ (8000e34 <SPI_PeriClockControl+0xa8>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d106      	bne.n	8000dca <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <SPI_PeriClockControl+0xa4>)
 8000dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e30 <SPI_PeriClockControl+0xa4>)
 8000dc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc6:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000dc8:	e02a      	b.n	8000e20 <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI3){
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a1a      	ldr	r2, [pc, #104]	@ (8000e38 <SPI_PeriClockControl+0xac>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d126      	bne.n	8000e20 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 8000dd2:	4b17      	ldr	r3, [pc, #92]	@ (8000e30 <SPI_PeriClockControl+0xa4>)
 8000dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dd6:	4a16      	ldr	r2, [pc, #88]	@ (8000e30 <SPI_PeriClockControl+0xa4>)
 8000dd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ddc:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000dde:	e01f      	b.n	8000e20 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1){
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a12      	ldr	r2, [pc, #72]	@ (8000e2c <SPI_PeriClockControl+0xa0>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d106      	bne.n	8000df6 <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 8000de8:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <SPI_PeriClockControl+0xa4>)
 8000dea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dec:	4a10      	ldr	r2, [pc, #64]	@ (8000e30 <SPI_PeriClockControl+0xa4>)
 8000dee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000df2:	6613      	str	r3, [r2, #96]	@ 0x60
}
 8000df4:	e014      	b.n	8000e20 <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI2){
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a0e      	ldr	r2, [pc, #56]	@ (8000e34 <SPI_PeriClockControl+0xa8>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d106      	bne.n	8000e0c <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <SPI_PeriClockControl+0xa4>)
 8000e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e02:	4a0b      	ldr	r2, [pc, #44]	@ (8000e30 <SPI_PeriClockControl+0xa4>)
 8000e04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e08:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000e0a:	e009      	b.n	8000e20 <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI3){
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e38 <SPI_PeriClockControl+0xac>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d105      	bne.n	8000e20 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <SPI_PeriClockControl+0xa4>)
 8000e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e18:	4a05      	ldr	r2, [pc, #20]	@ (8000e30 <SPI_PeriClockControl+0xa4>)
 8000e1a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000e1e:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40013000 	.word	0x40013000
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40003800 	.word	0x40003800
 8000e38:	40003c00 	.word	0x40003c00

08000e3c <SPI_Init>:

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	/*Enable the peripheral clock so that its easy for the user*/
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2101      	movs	r1, #1
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff9e 	bl	8000d8c <SPI_PeriClockControl>
	/* Configure the SPI_CR1 register */

	uint32_t tempreg1 = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]

	/* 1. Configure the device mode */
	tempreg1 |= (pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSRT);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	791b      	ldrb	r3, [r3, #4]
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	60fb      	str	r3, [r7, #12]

	/* 2. Configure the bus configuration */
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	795b      	ldrb	r3, [r3, #5]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d104      	bne.n	8000e72 <SPI_Init+0x36>
	{
		/* Clear the BIDI mode*/
		tempreg1 &= ~(1 << SPI_CR1_BIDIMODE);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	e014      	b.n	8000e9c <SPI_Init+0x60>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	795b      	ldrb	r3, [r3, #5]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d104      	bne.n	8000e84 <SPI_Init+0x48>
	{
		/* Enable the BIDI mode*/
		tempreg1 |= (1 << SPI_CR1_BIDIMODE);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	e00b      	b.n	8000e9c <SPI_Init+0x60>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	795b      	ldrb	r3, [r3, #5]
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	d107      	bne.n	8000e9c <SPI_Init+0x60>
	{
		/* CLear the BIDI mode*/
		tempreg1 &= ~(1 << SPI_CR1_BIDIMODE);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000e92:	60fb      	str	r3, [r7, #12]

		/*RXONLY bit must be set*/
		tempreg1 |= (1 << SPI_CR1_RXONLY);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e9a:	60fb      	str	r3, [r7, #12]
	}

	/*3. Configure the SPI serial clock speed*/
	tempreg1 |= (pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	799b      	ldrb	r3, [r3, #6]
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]

	/*4. Configure the DFF*/
	uint32_t tempreg2=0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60bb      	str	r3, [r7, #8]
	tempreg2 |= (pSPIHandle->SPIConfig.SPI_DFF << SPI_CR2_DS);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	79db      	ldrb	r3, [r3, #7]
 8000eb0:	021b      	lsls	r3, r3, #8
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	60bb      	str	r3, [r7, #8]

	/*5. Configure the CPOL*/
	tempreg1 |= (pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	7a1b      	ldrb	r3, [r3, #8]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]

	/*6. Configure the CPHA*/
	tempreg1 |= (pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	7a5b      	ldrb	r3, [r3, #9]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	60fb      	str	r3, [r7, #12]

	/* 7. Configure SSM bit*/
	tempreg1 |= (pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7a9b      	ldrb	r3, [r3, #10]
 8000ed4:	025b      	lsls	r3, r3, #9
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg1;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	601a      	str	r2, [r3, #0]
	pSPIHandle->pSPIx->CR2 = tempreg2;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68ba      	ldr	r2, [r7, #8]
 8000eea:	605a      	str	r2, [r3, #4]

}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <SPI_GetFlagStatus>:
		}

}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t flagname) /* This function is an aid to the send and receive functions */
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
	/*Flag names have been defined with their respective position*/
	if(pSPIx->SR & flagname) // Masking with and operator
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	4013      	ands	r3, r2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e000      	b.n	8000f10 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr
	...

08000f1c <SPI_IRQInterruptConfig>:

}


void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	460a      	mov	r2, r1
 8000f26:	71fb      	strb	r3, [r7, #7]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	71bb      	strb	r3, [r7, #6]
	//NVIC Registers data available in Cortex M4 generic user guide
	//Interrupt Set-Enable Registers (ISER) , Interrupt Clear-Enable Registers(ICER) and Interrupt Priority Registers (IPR) are to be used.

	if(EnorDi == ENABLE){
 8000f2c:	79bb      	ldrb	r3, [r7, #6]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d133      	bne.n	8000f9a <SPI_IRQInterruptConfig+0x7e>

		if(IRQNumber <= 31){
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2b1f      	cmp	r3, #31
 8000f36:	d80a      	bhi.n	8000f4e <SPI_IRQInterruptConfig+0x32>
			/*Program ISER0 Register*/
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000f38:	4b34      	ldr	r3, [pc, #208]	@ (800100c <SPI_IRQInterruptConfig+0xf0>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	79fa      	ldrb	r2, [r7, #7]
 8000f3e:	2101      	movs	r1, #1
 8000f40:	fa01 f202 	lsl.w	r2, r1, r2
 8000f44:	4611      	mov	r1, r2
 8000f46:	4a31      	ldr	r2, [pc, #196]	@ (800100c <SPI_IRQInterruptConfig+0xf0>)
 8000f48:	430b      	orrs	r3, r1
 8000f4a:	6013      	str	r3, [r2, #0]
			/*Program ICER2 Register*/
			*NVIC_ICER2 |= (1 << (IRQNumber%64));
		}
	}

}
 8000f4c:	e059      	b.n	8001002 <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber <= 64){
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	2b1f      	cmp	r3, #31
 8000f52:	d90f      	bls.n	8000f74 <SPI_IRQInterruptConfig+0x58>
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	2b40      	cmp	r3, #64	@ 0x40
 8000f58:	d80c      	bhi.n	8000f74 <SPI_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber%32));
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001010 <SPI_IRQInterruptConfig+0xf4>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	79fa      	ldrb	r2, [r7, #7]
 8000f60:	f002 021f 	and.w	r2, r2, #31
 8000f64:	2101      	movs	r1, #1
 8000f66:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4a28      	ldr	r2, [pc, #160]	@ (8001010 <SPI_IRQInterruptConfig+0xf4>)
 8000f6e:	430b      	orrs	r3, r1
 8000f70:	6013      	str	r3, [r2, #0]
 8000f72:	e046      	b.n	8001002 <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 64 && IRQNumber <= 96){
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	2b40      	cmp	r3, #64	@ 0x40
 8000f78:	d943      	bls.n	8001002 <SPI_IRQInterruptConfig+0xe6>
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	2b60      	cmp	r3, #96	@ 0x60
 8000f7e:	d840      	bhi.n	8001002 <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber%64));
 8000f80:	4b24      	ldr	r3, [pc, #144]	@ (8001014 <SPI_IRQInterruptConfig+0xf8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	79fa      	ldrb	r2, [r7, #7]
 8000f86:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f90:	4611      	mov	r1, r2
 8000f92:	4a20      	ldr	r2, [pc, #128]	@ (8001014 <SPI_IRQInterruptConfig+0xf8>)
 8000f94:	430b      	orrs	r3, r1
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	e033      	b.n	8001002 <SPI_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31){
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b1f      	cmp	r3, #31
 8000f9e:	d80a      	bhi.n	8000fb6 <SPI_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8001018 <SPI_IRQInterruptConfig+0xfc>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	79fa      	ldrb	r2, [r7, #7]
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fac:	4611      	mov	r1, r2
 8000fae:	4a1a      	ldr	r2, [pc, #104]	@ (8001018 <SPI_IRQInterruptConfig+0xfc>)
 8000fb0:	430b      	orrs	r3, r1
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	e025      	b.n	8001002 <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber <= 64){
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b1f      	cmp	r3, #31
 8000fba:	d90f      	bls.n	8000fdc <SPI_IRQInterruptConfig+0xc0>
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	2b40      	cmp	r3, #64	@ 0x40
 8000fc0:	d80c      	bhi.n	8000fdc <SPI_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber%32));
 8000fc2:	4b16      	ldr	r3, [pc, #88]	@ (800101c <SPI_IRQInterruptConfig+0x100>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	79fa      	ldrb	r2, [r7, #7]
 8000fc8:	f002 021f 	and.w	r2, r2, #31
 8000fcc:	2101      	movs	r1, #1
 8000fce:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4a11      	ldr	r2, [pc, #68]	@ (800101c <SPI_IRQInterruptConfig+0x100>)
 8000fd6:	430b      	orrs	r3, r1
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	e012      	b.n	8001002 <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 64 && IRQNumber <= 96){
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	2b40      	cmp	r3, #64	@ 0x40
 8000fe0:	d90f      	bls.n	8001002 <SPI_IRQInterruptConfig+0xe6>
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	2b60      	cmp	r3, #96	@ 0x60
 8000fe6:	d80c      	bhi.n	8001002 <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber%64));
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <SPI_IRQInterruptConfig+0x104>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	79fa      	ldrb	r2, [r7, #7]
 8000fee:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4a09      	ldr	r2, [pc, #36]	@ (8001020 <SPI_IRQInterruptConfig+0x104>)
 8000ffc:	430b      	orrs	r3, r1
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	e7ff      	b.n	8001002 <SPI_IRQInterruptConfig+0xe6>
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100
 8001010:	e000e104 	.word	0xe000e104
 8001014:	e000e108 	.word	0xe000e108
 8001018:	e000e180 	.word	0xe000e180
 800101c:	e000e184 	.word	0xe000e184
 8001020:	e000e188 	.word	0xe000e188

08001024 <SPI_Peripheral_Control>:
	 * */

}

void SPI_Peripheral_Control(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d106      	bne.n	8001044 <SPI_Peripheral_Control+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}

}
 8001042:	e005      	b.n	8001050 <SPI_Peripheral_Control+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	601a      	str	r2, [r3, #0]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr

0800105a <SPI_SSOEConfig>:
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	460b      	mov	r3, r1
 8001064:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8001066:	78fb      	ldrb	r3, [r7, #3]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d106      	bne.n	800107a <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f043 0204 	orr.w	r2, r3, #4
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	605a      	str	r2, [r3, #4]
	}else{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8001078:	e005      	b.n	8001086 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f023 0204 	bic.w	r2, r3, #4
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	605a      	str	r2, [r3, #4]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <SPI_SendDataIT>:
		}
}


uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8001090:	b480      	push	{r7}
 8001092:	b087      	sub	sp, #28
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
	 *	uint8_t TxState;
	 *	uint8_t RxState;
	 * */

	/*1. Check if SPI is already busy*/
	uint8_t state = pSPIHandle->TxState;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	7f1b      	ldrb	r3, [r3, #28]
 80010a0:	75fb      	strb	r3, [r7, #23]
	if(state != SPI_BUSY_IN_TX)
 80010a2:	7dfb      	ldrb	r3, [r7, #23]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d010      	beq.n	80010ca <SPI_SendDataIT+0x3a>

	{
		/* 2. Save the Tx-buffer address and length information in some global variable*/
		pSPIHandle->pTxBuffer = pTxBuffer;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = Len;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	615a      	str	r2, [r3, #20]

		/* 3. Mark the SPI state as busy in transmission so that no other code can take over the same SPI
		 * till the transmission is over*/
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2202      	movs	r2, #2
 80010b8:	771a      	strb	r2, [r3, #28]

		/* 4. Enable the TXEIE control bit to get interrupt whenever TXE flag is set in SR*/
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_TXEIE);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80010c8:	605a      	str	r2, [r3, #4]

	}

	return state;
 80010ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	371c      	adds	r7, #28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr

080010d6 <SPI_ReceiveDataIT>:

uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b087      	sub	sp, #28
 80010da:	af00      	add	r7, sp, #0
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
	/*1. Check if SPI is already busy*/
	uint8_t state = pSPIHandle->RxState;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	7f5b      	ldrb	r3, [r3, #29]
 80010e6:	75fb      	strb	r3, [r7, #23]
	if(state != SPI_BUSY_IN_RX)
 80010e8:	7dfb      	ldrb	r3, [r7, #23]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d010      	beq.n	8001110 <SPI_ReceiveDataIT+0x3a>

	{
		/* 2. Save the Tx-buffer address and length information in some global variable*/
		pSPIHandle->pRxBuffer = pRxBuffer;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLen = Len;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	619a      	str	r2, [r3, #24]

		/* 3. Mark the SPI state as busy in transmission so that no other code can take over the same SPI
		 * till the transmission is over*/
		pSPIHandle->RxState = SPI_BUSY_IN_RX;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2201      	movs	r2, #1
 80010fe:	775a      	strb	r2, [r3, #29]

		/* 4. Enable the TXEIE control bit to get interrupt whenever TXE flag is set in SR*/
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_RXNEIE);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800110e:	605a      	str	r2, [r3, #4]

	}

	return state;
 8001110:	7dfb      	ldrb	r3, [r7, #23]

}
 8001112:	4618      	mov	r0, r3
 8001114:	371c      	adds	r7, #28
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <SPI_IRQHandling>:



void SPI_IRQHandling(SPI_Handle_t *pSPIHandle)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	uint8_t temp1, temp2;
	/*1. Check for the TXE*/
	temp1 = (pSPIHandle->pSPIx->SR & (1 << SPI_SR_TXE)) >> SPI_SR_TXE;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	085b      	lsrs	r3, r3, #1
 800112c:	b2db      	uxtb	r3, r3
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
	temp2 = (pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_TXEIE)) >> SPI_CR2_TXEIE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	09db      	lsrs	r3, r3, #7
 800113c:	b2db      	uxtb	r3, r3
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	73bb      	strb	r3, [r7, #14]

	if(temp1 && temp2)
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d005      	beq.n	8001156 <SPI_IRQHandling+0x3a>
 800114a:	7bbb      	ldrb	r3, [r7, #14]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <SPI_IRQHandling+0x3a>
	{
		/*Handle TXE*/
		spi_txe_interrupt_handle(pSPIHandle); //Helper function
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 f832 	bl	80011ba <spi_txe_interrupt_handle>
	}

	/*2. Check for the RXNE*/
	temp1 = pSPIHandle->pSPIx->SR & (1 << SPI_SR_RXNE);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	73fb      	strb	r3, [r7, #15]
	temp2 = pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_RXNEIE);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001170:	73bb      	strb	r3, [r7, #14]

	if(temp1 && temp2)
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d005      	beq.n	8001184 <SPI_IRQHandling+0x68>
 8001178:	7bbb      	ldrb	r3, [r7, #14]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d002      	beq.n	8001184 <SPI_IRQHandling+0x68>
	{
		/*Handle RXNE*/
		spi_rxne_interrupt_handle(pSPIHandle); //Helper function
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f862 	bl	8001248 <spi_rxne_interrupt_handle>
	}

	/*3. Check for the Overrun error (OVR) flag*/
	temp1 = pSPIHandle->pSPIx->SR & (1 << SPI_SR_OVR);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001190:	73fb      	strb	r3, [r7, #15]
	temp2 = pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_ERRIE);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	f003 0320 	and.w	r3, r3, #32
 800119e:	73bb      	strb	r3, [r7, #14]

	if(temp1 && temp2)
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d005      	beq.n	80011b2 <SPI_IRQHandling+0x96>
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d002      	beq.n	80011b2 <SPI_IRQHandling+0x96>
	{
		/*Handle OVR error*/
		spi_ovr_err_interrupt_handle(pSPIHandle); //Helper function
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 f89a 	bl	80012e6 <spi_ovr_err_interrupt_handle>
	}
}
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <spi_txe_interrupt_handle>:

/*Helper functions*/
static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b084      	sub	sp, #16
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
	/*Similar logic as SPI_SendData() polling function (errors solved)*/
	uint16_t tempvar = pSPIHandle->pSPIx->CR2;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	817b      	strh	r3, [r7, #10]
	tempvar = (tempvar >> SPI_CR2_DS);
 80011ca:	897b      	ldrh	r3, [r7, #10]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	817b      	strh	r3, [r7, #10]
	/*The FRXTH bit that will be set for 8 bit SPI communication will be present
	 * in the CR2 register, so make sure that we take only the last 4 bits*/
	tempvar &= 0x0F;
 80011d0:	897b      	ldrh	r3, [r7, #10]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	817b      	strh	r3, [r7, #10]

	/*Get length information from the SPI_Handle_t*/
	uint32_t len = pSPIHandle->TxLen;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	60fb      	str	r3, [r7, #12]

	if(tempvar == SPI_DFF_16BITS) //16-bit mode
 80011de:	897b      	ldrh	r3, [r7, #10]
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	d111      	bne.n	8001208 <spi_txe_interrupt_handle+0x4e>
	{
		// Load the data onto the data register DR
		pSPIHandle->pSPIx->DR = *((uint16_t*)pSPIHandle->pTxBuffer);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	881a      	ldrh	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	60da      	str	r2, [r3, #12]
		len--;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	60fb      	str	r3, [r7, #12]
		len--;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3b01      	subs	r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
		(uint16_t*)pSPIHandle->pTxBuffer++;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	1c5a      	adds	r2, r3, #1
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	e011      	b.n	800122c <spi_txe_interrupt_handle+0x72>

	}else if(tempvar == SPI_DFF_8BITS) //8-bit mode
 8001208:	897b      	ldrh	r3, [r7, #10]
 800120a:	2b07      	cmp	r3, #7
 800120c:	d10e      	bne.n	800122c <spi_txe_interrupt_handle+0x72>
	{
		// Load the data onto the data register DR
		*(volatile uint8_t *)&pSPIHandle->pSPIx->DR = *(pSPIHandle->pTxBuffer); /* Refer http://efton.sk/STM32/gotcha/g22.html */
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68da      	ldr	r2, [r3, #12]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	330c      	adds	r3, #12
 8001218:	7812      	ldrb	r2, [r2, #0]
 800121a:	701a      	strb	r2, [r3, #0]
		len--;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	3b01      	subs	r3, #1
 8001220:	60fb      	str	r3, [r7, #12]
		pSPIHandle->pTxBuffer++;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	60da      	str	r2, [r3, #12]
	}

	if(len == 0)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d106      	bne.n	8001240 <spi_txe_interrupt_handle+0x86>
	{
		//When length is zero close the SPI communication and inform the  application

		SPI_CloseTransmission(pSPIHandle);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 f86f 	bl	8001316 <SPI_CloseTransmission>

		/*Call back to inform the application*/
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_TX_CMPLT);
 8001238:	2101      	movs	r1, #1
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff f90e 	bl	800045c <SPI_ApplicationEventCallback>

	}

}
 8001240:	bf00      	nop
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <spi_rxne_interrupt_handle>:

static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	/*Similar logic as SPI_ReceiveData() polling function (errors solved)*/
	uint16_t tempvar = pSPIHandle->pSPIx->CR2;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	817b      	strh	r3, [r7, #10]
	tempvar = (tempvar >> SPI_CR2_DS);
 8001258:	897b      	ldrh	r3, [r7, #10]
 800125a:	0a1b      	lsrs	r3, r3, #8
 800125c:	817b      	strh	r3, [r7, #10]
	/*The FRXTH bit that will be set for 8 bit SPI communication will be present
	 * in the CR2 register, so make sure that we take only the last 4 bits*/
	tempvar &= 0x0F;
 800125e:	897b      	ldrh	r3, [r7, #10]
 8001260:	f003 030f 	and.w	r3, r3, #15
 8001264:	817b      	strh	r3, [r7, #10]

	/*Get length information from the SPI_Handle_t*/
	uint32_t len = pSPIHandle->RxLen;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	60fb      	str	r3, [r7, #12]

	if(tempvar == SPI_DFF_16BITS) //16-bit mode
 800126c:	897b      	ldrh	r3, [r7, #10]
 800126e:	2b0f      	cmp	r3, #15
 8001270:	d117      	bne.n	80012a2 <spi_rxne_interrupt_handle+0x5a>
	{
		// Load the data onto the data register DR
		*((uint16_t*)pSPIHandle->pRxBuffer) = (uint16_t) pSPIHandle->pSPIx->DR;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68da      	ldr	r2, [r3, #12]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	b292      	uxth	r2, r2
 800127e:	801a      	strh	r2, [r3, #0]
		len--;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	3b01      	subs	r3, #1
 8001284:	60fb      	str	r3, [r7, #12]
		len--;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3b01      	subs	r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
		pSPIHandle->pRxBuffer++;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	611a      	str	r2, [r3, #16]
		pSPIHandle->pRxBuffer++;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	1c5a      	adds	r2, r3, #1
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	611a      	str	r2, [r3, #16]
 80012a0:	e013      	b.n	80012ca <spi_rxne_interrupt_handle+0x82>

	}else if(tempvar == SPI_DFF_8BITS) //8-bit mode
 80012a2:	897b      	ldrh	r3, [r7, #10]
 80012a4:	2b07      	cmp	r3, #7
 80012a6:	d110      	bne.n	80012ca <spi_rxne_interrupt_handle+0x82>
	{
		// Load the data onto the data register DR
		*(pSPIHandle->pRxBuffer) = *(volatile uint8_t *)&pSPIHandle->pSPIx->DR; /* Refer http://efton.sk/STM32/gotcha/g22.html */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f103 020c 	add.w	r2, r3, #12
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	7812      	ldrb	r2, [r2, #0]
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	701a      	strb	r2, [r3, #0]
		len--;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	3b01      	subs	r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
		pSPIHandle->pRxBuffer++;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	611a      	str	r2, [r3, #16]
	}

	if(len == 0)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d106      	bne.n	80012de <spi_rxne_interrupt_handle+0x96>
	{

        //When length is zero close the SPI communication and inform the  application

		SPI_CloseReception(pSPIHandle);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 f83a 	bl	800134a <SPI_CloseReception>

		/*Call back to inform the application*/
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_RX_CMPLT);
 80012d6:	2102      	movs	r1, #2
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff f8bf 	bl	800045c <SPI_ApplicationEventCallback>

	}

}
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <spi_ovr_err_interrupt_handle>:

static void spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b084      	sub	sp, #16
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
	 * anomalies, the application will be notified. When the application receives the SPI_EVENT_OVR_ERR event, it has
	 * to call the SPI_ClearOVRFlag(SPI_RegDef_t *pSPIx) explicitly.*/

	uint8_t temp;

	if(pSPIHandle->TxState != SPI_BUSY_IN_TX)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	7f1b      	ldrb	r3, [r3, #28]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d007      	beq.n	8001306 <spi_ovr_err_interrupt_handle+0x20>
	{
		temp = pSPIHandle->pSPIx->DR;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SR;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	73fb      	strb	r3, [r7, #15]
	}

	(void)temp; /*To remove the unused temp variable warning*/

	/*2. Infrom the application*/
	SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_OVR_ERR);
 8001306:	2103      	movs	r1, #3
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff f8a7 	bl	800045c <SPI_ApplicationEventCallback>

}
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <SPI_CloseTransmission>:


void SPI_CloseTransmission(SPI_Handle_t *pSPIHandle)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
	/*Deactivate the TXEIE bit to prevent further interrupts from setting of TXE flag*/
	pSPIHandle->pSPIx->CR2 &= ~( 1 << SPI_CR2_TXEIE );
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800132c:	605a      	str	r2, [r3, #4]

	/*Reset Tx-buffer, length and state*/
	pSPIHandle->pTxBuffer = NULL; //NULL in stddef.h
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLen = 0;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
	pSPIHandle->TxState = SPI_READY;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	771a      	strb	r2, [r3, #28]

}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr

0800134a <SPI_CloseReception>:

void SPI_CloseReception(SPI_Handle_t *pSPIHandle)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
	/*Deactivate the RXNEIE bit to prevent further interrupts from setting of RXE flag*/
	pSPIHandle->pSPIx->CR2 &= ~( 1 << SPI_CR2_RXNEIE );
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001360:	605a      	str	r2, [r3, #4]

	/*Reset Tx-buffer, length and state*/
	pSPIHandle->pRxBuffer = NULL; //NULL in stddef.h
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLen = 0;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	619a      	str	r2, [r3, #24]
	pSPIHandle->RxState = SPI_READY;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	775a      	strb	r2, [r3, #29]

}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
	...

08001380 <std>:
 8001380:	2300      	movs	r3, #0
 8001382:	b510      	push	{r4, lr}
 8001384:	4604      	mov	r4, r0
 8001386:	e9c0 3300 	strd	r3, r3, [r0]
 800138a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800138e:	6083      	str	r3, [r0, #8]
 8001390:	8181      	strh	r1, [r0, #12]
 8001392:	6643      	str	r3, [r0, #100]	@ 0x64
 8001394:	81c2      	strh	r2, [r0, #14]
 8001396:	6183      	str	r3, [r0, #24]
 8001398:	4619      	mov	r1, r3
 800139a:	2208      	movs	r2, #8
 800139c:	305c      	adds	r0, #92	@ 0x5c
 800139e:	f000 f906 	bl	80015ae <memset>
 80013a2:	4b0d      	ldr	r3, [pc, #52]	@ (80013d8 <std+0x58>)
 80013a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80013a6:	4b0d      	ldr	r3, [pc, #52]	@ (80013dc <std+0x5c>)
 80013a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80013aa:	4b0d      	ldr	r3, [pc, #52]	@ (80013e0 <std+0x60>)
 80013ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80013ae:	4b0d      	ldr	r3, [pc, #52]	@ (80013e4 <std+0x64>)
 80013b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80013b2:	4b0d      	ldr	r3, [pc, #52]	@ (80013e8 <std+0x68>)
 80013b4:	6224      	str	r4, [r4, #32]
 80013b6:	429c      	cmp	r4, r3
 80013b8:	d006      	beq.n	80013c8 <std+0x48>
 80013ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80013be:	4294      	cmp	r4, r2
 80013c0:	d002      	beq.n	80013c8 <std+0x48>
 80013c2:	33d0      	adds	r3, #208	@ 0xd0
 80013c4:	429c      	cmp	r4, r3
 80013c6:	d105      	bne.n	80013d4 <std+0x54>
 80013c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80013cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013d0:	f000 b966 	b.w	80016a0 <__retarget_lock_init_recursive>
 80013d4:	bd10      	pop	{r4, pc}
 80013d6:	bf00      	nop
 80013d8:	08001529 	.word	0x08001529
 80013dc:	0800154b 	.word	0x0800154b
 80013e0:	08001583 	.word	0x08001583
 80013e4:	080015a7 	.word	0x080015a7
 80013e8:	2000029c 	.word	0x2000029c

080013ec <stdio_exit_handler>:
 80013ec:	4a02      	ldr	r2, [pc, #8]	@ (80013f8 <stdio_exit_handler+0xc>)
 80013ee:	4903      	ldr	r1, [pc, #12]	@ (80013fc <stdio_exit_handler+0x10>)
 80013f0:	4803      	ldr	r0, [pc, #12]	@ (8001400 <stdio_exit_handler+0x14>)
 80013f2:	f000 b869 	b.w	80014c8 <_fwalk_sglue>
 80013f6:	bf00      	nop
 80013f8:	20000000 	.word	0x20000000
 80013fc:	08001f31 	.word	0x08001f31
 8001400:	20000010 	.word	0x20000010

08001404 <cleanup_stdio>:
 8001404:	6841      	ldr	r1, [r0, #4]
 8001406:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <cleanup_stdio+0x34>)
 8001408:	4299      	cmp	r1, r3
 800140a:	b510      	push	{r4, lr}
 800140c:	4604      	mov	r4, r0
 800140e:	d001      	beq.n	8001414 <cleanup_stdio+0x10>
 8001410:	f000 fd8e 	bl	8001f30 <_fflush_r>
 8001414:	68a1      	ldr	r1, [r4, #8]
 8001416:	4b09      	ldr	r3, [pc, #36]	@ (800143c <cleanup_stdio+0x38>)
 8001418:	4299      	cmp	r1, r3
 800141a:	d002      	beq.n	8001422 <cleanup_stdio+0x1e>
 800141c:	4620      	mov	r0, r4
 800141e:	f000 fd87 	bl	8001f30 <_fflush_r>
 8001422:	68e1      	ldr	r1, [r4, #12]
 8001424:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <cleanup_stdio+0x3c>)
 8001426:	4299      	cmp	r1, r3
 8001428:	d004      	beq.n	8001434 <cleanup_stdio+0x30>
 800142a:	4620      	mov	r0, r4
 800142c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001430:	f000 bd7e 	b.w	8001f30 <_fflush_r>
 8001434:	bd10      	pop	{r4, pc}
 8001436:	bf00      	nop
 8001438:	2000029c 	.word	0x2000029c
 800143c:	20000304 	.word	0x20000304
 8001440:	2000036c 	.word	0x2000036c

08001444 <global_stdio_init.part.0>:
 8001444:	b510      	push	{r4, lr}
 8001446:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <global_stdio_init.part.0+0x30>)
 8001448:	4c0b      	ldr	r4, [pc, #44]	@ (8001478 <global_stdio_init.part.0+0x34>)
 800144a:	4a0c      	ldr	r2, [pc, #48]	@ (800147c <global_stdio_init.part.0+0x38>)
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	4620      	mov	r0, r4
 8001450:	2200      	movs	r2, #0
 8001452:	2104      	movs	r1, #4
 8001454:	f7ff ff94 	bl	8001380 <std>
 8001458:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800145c:	2201      	movs	r2, #1
 800145e:	2109      	movs	r1, #9
 8001460:	f7ff ff8e 	bl	8001380 <std>
 8001464:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001468:	2202      	movs	r2, #2
 800146a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800146e:	2112      	movs	r1, #18
 8001470:	f7ff bf86 	b.w	8001380 <std>
 8001474:	200003d4 	.word	0x200003d4
 8001478:	2000029c 	.word	0x2000029c
 800147c:	080013ed 	.word	0x080013ed

08001480 <__sfp_lock_acquire>:
 8001480:	4801      	ldr	r0, [pc, #4]	@ (8001488 <__sfp_lock_acquire+0x8>)
 8001482:	f000 b90e 	b.w	80016a2 <__retarget_lock_acquire_recursive>
 8001486:	bf00      	nop
 8001488:	200003dd 	.word	0x200003dd

0800148c <__sfp_lock_release>:
 800148c:	4801      	ldr	r0, [pc, #4]	@ (8001494 <__sfp_lock_release+0x8>)
 800148e:	f000 b909 	b.w	80016a4 <__retarget_lock_release_recursive>
 8001492:	bf00      	nop
 8001494:	200003dd 	.word	0x200003dd

08001498 <__sinit>:
 8001498:	b510      	push	{r4, lr}
 800149a:	4604      	mov	r4, r0
 800149c:	f7ff fff0 	bl	8001480 <__sfp_lock_acquire>
 80014a0:	6a23      	ldr	r3, [r4, #32]
 80014a2:	b11b      	cbz	r3, 80014ac <__sinit+0x14>
 80014a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014a8:	f7ff bff0 	b.w	800148c <__sfp_lock_release>
 80014ac:	4b04      	ldr	r3, [pc, #16]	@ (80014c0 <__sinit+0x28>)
 80014ae:	6223      	str	r3, [r4, #32]
 80014b0:	4b04      	ldr	r3, [pc, #16]	@ (80014c4 <__sinit+0x2c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f5      	bne.n	80014a4 <__sinit+0xc>
 80014b8:	f7ff ffc4 	bl	8001444 <global_stdio_init.part.0>
 80014bc:	e7f2      	b.n	80014a4 <__sinit+0xc>
 80014be:	bf00      	nop
 80014c0:	08001405 	.word	0x08001405
 80014c4:	200003d4 	.word	0x200003d4

080014c8 <_fwalk_sglue>:
 80014c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014cc:	4607      	mov	r7, r0
 80014ce:	4688      	mov	r8, r1
 80014d0:	4614      	mov	r4, r2
 80014d2:	2600      	movs	r6, #0
 80014d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80014d8:	f1b9 0901 	subs.w	r9, r9, #1
 80014dc:	d505      	bpl.n	80014ea <_fwalk_sglue+0x22>
 80014de:	6824      	ldr	r4, [r4, #0]
 80014e0:	2c00      	cmp	r4, #0
 80014e2:	d1f7      	bne.n	80014d4 <_fwalk_sglue+0xc>
 80014e4:	4630      	mov	r0, r6
 80014e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014ea:	89ab      	ldrh	r3, [r5, #12]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d907      	bls.n	8001500 <_fwalk_sglue+0x38>
 80014f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80014f4:	3301      	adds	r3, #1
 80014f6:	d003      	beq.n	8001500 <_fwalk_sglue+0x38>
 80014f8:	4629      	mov	r1, r5
 80014fa:	4638      	mov	r0, r7
 80014fc:	47c0      	blx	r8
 80014fe:	4306      	orrs	r6, r0
 8001500:	3568      	adds	r5, #104	@ 0x68
 8001502:	e7e9      	b.n	80014d8 <_fwalk_sglue+0x10>

08001504 <iprintf>:
 8001504:	b40f      	push	{r0, r1, r2, r3}
 8001506:	b507      	push	{r0, r1, r2, lr}
 8001508:	4906      	ldr	r1, [pc, #24]	@ (8001524 <iprintf+0x20>)
 800150a:	ab04      	add	r3, sp, #16
 800150c:	6808      	ldr	r0, [r1, #0]
 800150e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001512:	6881      	ldr	r1, [r0, #8]
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	f000 f9e7 	bl	80018e8 <_vfiprintf_r>
 800151a:	b003      	add	sp, #12
 800151c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001520:	b004      	add	sp, #16
 8001522:	4770      	bx	lr
 8001524:	2000000c 	.word	0x2000000c

08001528 <__sread>:
 8001528:	b510      	push	{r4, lr}
 800152a:	460c      	mov	r4, r1
 800152c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001530:	f000 f868 	bl	8001604 <_read_r>
 8001534:	2800      	cmp	r0, #0
 8001536:	bfab      	itete	ge
 8001538:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800153a:	89a3      	ldrhlt	r3, [r4, #12]
 800153c:	181b      	addge	r3, r3, r0
 800153e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001542:	bfac      	ite	ge
 8001544:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001546:	81a3      	strhlt	r3, [r4, #12]
 8001548:	bd10      	pop	{r4, pc}

0800154a <__swrite>:
 800154a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800154e:	461f      	mov	r7, r3
 8001550:	898b      	ldrh	r3, [r1, #12]
 8001552:	05db      	lsls	r3, r3, #23
 8001554:	4605      	mov	r5, r0
 8001556:	460c      	mov	r4, r1
 8001558:	4616      	mov	r6, r2
 800155a:	d505      	bpl.n	8001568 <__swrite+0x1e>
 800155c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001560:	2302      	movs	r3, #2
 8001562:	2200      	movs	r2, #0
 8001564:	f000 f83c 	bl	80015e0 <_lseek_r>
 8001568:	89a3      	ldrh	r3, [r4, #12]
 800156a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800156e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001572:	81a3      	strh	r3, [r4, #12]
 8001574:	4632      	mov	r2, r6
 8001576:	463b      	mov	r3, r7
 8001578:	4628      	mov	r0, r5
 800157a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800157e:	f000 b853 	b.w	8001628 <_write_r>

08001582 <__sseek>:
 8001582:	b510      	push	{r4, lr}
 8001584:	460c      	mov	r4, r1
 8001586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800158a:	f000 f829 	bl	80015e0 <_lseek_r>
 800158e:	1c43      	adds	r3, r0, #1
 8001590:	89a3      	ldrh	r3, [r4, #12]
 8001592:	bf15      	itete	ne
 8001594:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001596:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800159a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800159e:	81a3      	strheq	r3, [r4, #12]
 80015a0:	bf18      	it	ne
 80015a2:	81a3      	strhne	r3, [r4, #12]
 80015a4:	bd10      	pop	{r4, pc}

080015a6 <__sclose>:
 80015a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015aa:	f000 b809 	b.w	80015c0 <_close_r>

080015ae <memset>:
 80015ae:	4402      	add	r2, r0
 80015b0:	4603      	mov	r3, r0
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d100      	bne.n	80015b8 <memset+0xa>
 80015b6:	4770      	bx	lr
 80015b8:	f803 1b01 	strb.w	r1, [r3], #1
 80015bc:	e7f9      	b.n	80015b2 <memset+0x4>
	...

080015c0 <_close_r>:
 80015c0:	b538      	push	{r3, r4, r5, lr}
 80015c2:	4d06      	ldr	r5, [pc, #24]	@ (80015dc <_close_r+0x1c>)
 80015c4:	2300      	movs	r3, #0
 80015c6:	4604      	mov	r4, r0
 80015c8:	4608      	mov	r0, r1
 80015ca:	602b      	str	r3, [r5, #0]
 80015cc:	f7fe ffe7 	bl	800059e <_close>
 80015d0:	1c43      	adds	r3, r0, #1
 80015d2:	d102      	bne.n	80015da <_close_r+0x1a>
 80015d4:	682b      	ldr	r3, [r5, #0]
 80015d6:	b103      	cbz	r3, 80015da <_close_r+0x1a>
 80015d8:	6023      	str	r3, [r4, #0]
 80015da:	bd38      	pop	{r3, r4, r5, pc}
 80015dc:	200003d8 	.word	0x200003d8

080015e0 <_lseek_r>:
 80015e0:	b538      	push	{r3, r4, r5, lr}
 80015e2:	4d07      	ldr	r5, [pc, #28]	@ (8001600 <_lseek_r+0x20>)
 80015e4:	4604      	mov	r4, r0
 80015e6:	4608      	mov	r0, r1
 80015e8:	4611      	mov	r1, r2
 80015ea:	2200      	movs	r2, #0
 80015ec:	602a      	str	r2, [r5, #0]
 80015ee:	461a      	mov	r2, r3
 80015f0:	f7fe fff9 	bl	80005e6 <_lseek>
 80015f4:	1c43      	adds	r3, r0, #1
 80015f6:	d102      	bne.n	80015fe <_lseek_r+0x1e>
 80015f8:	682b      	ldr	r3, [r5, #0]
 80015fa:	b103      	cbz	r3, 80015fe <_lseek_r+0x1e>
 80015fc:	6023      	str	r3, [r4, #0]
 80015fe:	bd38      	pop	{r3, r4, r5, pc}
 8001600:	200003d8 	.word	0x200003d8

08001604 <_read_r>:
 8001604:	b538      	push	{r3, r4, r5, lr}
 8001606:	4d07      	ldr	r5, [pc, #28]	@ (8001624 <_read_r+0x20>)
 8001608:	4604      	mov	r4, r0
 800160a:	4608      	mov	r0, r1
 800160c:	4611      	mov	r1, r2
 800160e:	2200      	movs	r2, #0
 8001610:	602a      	str	r2, [r5, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	f7fe ff8a 	bl	800052c <_read>
 8001618:	1c43      	adds	r3, r0, #1
 800161a:	d102      	bne.n	8001622 <_read_r+0x1e>
 800161c:	682b      	ldr	r3, [r5, #0]
 800161e:	b103      	cbz	r3, 8001622 <_read_r+0x1e>
 8001620:	6023      	str	r3, [r4, #0]
 8001622:	bd38      	pop	{r3, r4, r5, pc}
 8001624:	200003d8 	.word	0x200003d8

08001628 <_write_r>:
 8001628:	b538      	push	{r3, r4, r5, lr}
 800162a:	4d07      	ldr	r5, [pc, #28]	@ (8001648 <_write_r+0x20>)
 800162c:	4604      	mov	r4, r0
 800162e:	4608      	mov	r0, r1
 8001630:	4611      	mov	r1, r2
 8001632:	2200      	movs	r2, #0
 8001634:	602a      	str	r2, [r5, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	f7fe ff95 	bl	8000566 <_write>
 800163c:	1c43      	adds	r3, r0, #1
 800163e:	d102      	bne.n	8001646 <_write_r+0x1e>
 8001640:	682b      	ldr	r3, [r5, #0]
 8001642:	b103      	cbz	r3, 8001646 <_write_r+0x1e>
 8001644:	6023      	str	r3, [r4, #0]
 8001646:	bd38      	pop	{r3, r4, r5, pc}
 8001648:	200003d8 	.word	0x200003d8

0800164c <__errno>:
 800164c:	4b01      	ldr	r3, [pc, #4]	@ (8001654 <__errno+0x8>)
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	2000000c 	.word	0x2000000c

08001658 <__libc_init_array>:
 8001658:	b570      	push	{r4, r5, r6, lr}
 800165a:	4d0d      	ldr	r5, [pc, #52]	@ (8001690 <__libc_init_array+0x38>)
 800165c:	4c0d      	ldr	r4, [pc, #52]	@ (8001694 <__libc_init_array+0x3c>)
 800165e:	1b64      	subs	r4, r4, r5
 8001660:	10a4      	asrs	r4, r4, #2
 8001662:	2600      	movs	r6, #0
 8001664:	42a6      	cmp	r6, r4
 8001666:	d109      	bne.n	800167c <__libc_init_array+0x24>
 8001668:	4d0b      	ldr	r5, [pc, #44]	@ (8001698 <__libc_init_array+0x40>)
 800166a:	4c0c      	ldr	r4, [pc, #48]	@ (800169c <__libc_init_array+0x44>)
 800166c:	f000 fdb0 	bl	80021d0 <_init>
 8001670:	1b64      	subs	r4, r4, r5
 8001672:	10a4      	asrs	r4, r4, #2
 8001674:	2600      	movs	r6, #0
 8001676:	42a6      	cmp	r6, r4
 8001678:	d105      	bne.n	8001686 <__libc_init_array+0x2e>
 800167a:	bd70      	pop	{r4, r5, r6, pc}
 800167c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001680:	4798      	blx	r3
 8001682:	3601      	adds	r6, #1
 8001684:	e7ee      	b.n	8001664 <__libc_init_array+0xc>
 8001686:	f855 3b04 	ldr.w	r3, [r5], #4
 800168a:	4798      	blx	r3
 800168c:	3601      	adds	r6, #1
 800168e:	e7f2      	b.n	8001676 <__libc_init_array+0x1e>
 8001690:	08002234 	.word	0x08002234
 8001694:	08002234 	.word	0x08002234
 8001698:	08002234 	.word	0x08002234
 800169c:	08002238 	.word	0x08002238

080016a0 <__retarget_lock_init_recursive>:
 80016a0:	4770      	bx	lr

080016a2 <__retarget_lock_acquire_recursive>:
 80016a2:	4770      	bx	lr

080016a4 <__retarget_lock_release_recursive>:
 80016a4:	4770      	bx	lr
	...

080016a8 <_free_r>:
 80016a8:	b538      	push	{r3, r4, r5, lr}
 80016aa:	4605      	mov	r5, r0
 80016ac:	2900      	cmp	r1, #0
 80016ae:	d041      	beq.n	8001734 <_free_r+0x8c>
 80016b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016b4:	1f0c      	subs	r4, r1, #4
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	bfb8      	it	lt
 80016ba:	18e4      	addlt	r4, r4, r3
 80016bc:	f000 f8e0 	bl	8001880 <__malloc_lock>
 80016c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001738 <_free_r+0x90>)
 80016c2:	6813      	ldr	r3, [r2, #0]
 80016c4:	b933      	cbnz	r3, 80016d4 <_free_r+0x2c>
 80016c6:	6063      	str	r3, [r4, #4]
 80016c8:	6014      	str	r4, [r2, #0]
 80016ca:	4628      	mov	r0, r5
 80016cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016d0:	f000 b8dc 	b.w	800188c <__malloc_unlock>
 80016d4:	42a3      	cmp	r3, r4
 80016d6:	d908      	bls.n	80016ea <_free_r+0x42>
 80016d8:	6820      	ldr	r0, [r4, #0]
 80016da:	1821      	adds	r1, r4, r0
 80016dc:	428b      	cmp	r3, r1
 80016de:	bf01      	itttt	eq
 80016e0:	6819      	ldreq	r1, [r3, #0]
 80016e2:	685b      	ldreq	r3, [r3, #4]
 80016e4:	1809      	addeq	r1, r1, r0
 80016e6:	6021      	streq	r1, [r4, #0]
 80016e8:	e7ed      	b.n	80016c6 <_free_r+0x1e>
 80016ea:	461a      	mov	r2, r3
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	b10b      	cbz	r3, 80016f4 <_free_r+0x4c>
 80016f0:	42a3      	cmp	r3, r4
 80016f2:	d9fa      	bls.n	80016ea <_free_r+0x42>
 80016f4:	6811      	ldr	r1, [r2, #0]
 80016f6:	1850      	adds	r0, r2, r1
 80016f8:	42a0      	cmp	r0, r4
 80016fa:	d10b      	bne.n	8001714 <_free_r+0x6c>
 80016fc:	6820      	ldr	r0, [r4, #0]
 80016fe:	4401      	add	r1, r0
 8001700:	1850      	adds	r0, r2, r1
 8001702:	4283      	cmp	r3, r0
 8001704:	6011      	str	r1, [r2, #0]
 8001706:	d1e0      	bne.n	80016ca <_free_r+0x22>
 8001708:	6818      	ldr	r0, [r3, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	6053      	str	r3, [r2, #4]
 800170e:	4408      	add	r0, r1
 8001710:	6010      	str	r0, [r2, #0]
 8001712:	e7da      	b.n	80016ca <_free_r+0x22>
 8001714:	d902      	bls.n	800171c <_free_r+0x74>
 8001716:	230c      	movs	r3, #12
 8001718:	602b      	str	r3, [r5, #0]
 800171a:	e7d6      	b.n	80016ca <_free_r+0x22>
 800171c:	6820      	ldr	r0, [r4, #0]
 800171e:	1821      	adds	r1, r4, r0
 8001720:	428b      	cmp	r3, r1
 8001722:	bf04      	itt	eq
 8001724:	6819      	ldreq	r1, [r3, #0]
 8001726:	685b      	ldreq	r3, [r3, #4]
 8001728:	6063      	str	r3, [r4, #4]
 800172a:	bf04      	itt	eq
 800172c:	1809      	addeq	r1, r1, r0
 800172e:	6021      	streq	r1, [r4, #0]
 8001730:	6054      	str	r4, [r2, #4]
 8001732:	e7ca      	b.n	80016ca <_free_r+0x22>
 8001734:	bd38      	pop	{r3, r4, r5, pc}
 8001736:	bf00      	nop
 8001738:	200003e4 	.word	0x200003e4

0800173c <sbrk_aligned>:
 800173c:	b570      	push	{r4, r5, r6, lr}
 800173e:	4e0f      	ldr	r6, [pc, #60]	@ (800177c <sbrk_aligned+0x40>)
 8001740:	460c      	mov	r4, r1
 8001742:	6831      	ldr	r1, [r6, #0]
 8001744:	4605      	mov	r5, r0
 8001746:	b911      	cbnz	r1, 800174e <sbrk_aligned+0x12>
 8001748:	f000 fcae 	bl	80020a8 <_sbrk_r>
 800174c:	6030      	str	r0, [r6, #0]
 800174e:	4621      	mov	r1, r4
 8001750:	4628      	mov	r0, r5
 8001752:	f000 fca9 	bl	80020a8 <_sbrk_r>
 8001756:	1c43      	adds	r3, r0, #1
 8001758:	d103      	bne.n	8001762 <sbrk_aligned+0x26>
 800175a:	f04f 34ff 	mov.w	r4, #4294967295
 800175e:	4620      	mov	r0, r4
 8001760:	bd70      	pop	{r4, r5, r6, pc}
 8001762:	1cc4      	adds	r4, r0, #3
 8001764:	f024 0403 	bic.w	r4, r4, #3
 8001768:	42a0      	cmp	r0, r4
 800176a:	d0f8      	beq.n	800175e <sbrk_aligned+0x22>
 800176c:	1a21      	subs	r1, r4, r0
 800176e:	4628      	mov	r0, r5
 8001770:	f000 fc9a 	bl	80020a8 <_sbrk_r>
 8001774:	3001      	adds	r0, #1
 8001776:	d1f2      	bne.n	800175e <sbrk_aligned+0x22>
 8001778:	e7ef      	b.n	800175a <sbrk_aligned+0x1e>
 800177a:	bf00      	nop
 800177c:	200003e0 	.word	0x200003e0

08001780 <_malloc_r>:
 8001780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001784:	1ccd      	adds	r5, r1, #3
 8001786:	f025 0503 	bic.w	r5, r5, #3
 800178a:	3508      	adds	r5, #8
 800178c:	2d0c      	cmp	r5, #12
 800178e:	bf38      	it	cc
 8001790:	250c      	movcc	r5, #12
 8001792:	2d00      	cmp	r5, #0
 8001794:	4606      	mov	r6, r0
 8001796:	db01      	blt.n	800179c <_malloc_r+0x1c>
 8001798:	42a9      	cmp	r1, r5
 800179a:	d904      	bls.n	80017a6 <_malloc_r+0x26>
 800179c:	230c      	movs	r3, #12
 800179e:	6033      	str	r3, [r6, #0]
 80017a0:	2000      	movs	r0, #0
 80017a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800187c <_malloc_r+0xfc>
 80017aa:	f000 f869 	bl	8001880 <__malloc_lock>
 80017ae:	f8d8 3000 	ldr.w	r3, [r8]
 80017b2:	461c      	mov	r4, r3
 80017b4:	bb44      	cbnz	r4, 8001808 <_malloc_r+0x88>
 80017b6:	4629      	mov	r1, r5
 80017b8:	4630      	mov	r0, r6
 80017ba:	f7ff ffbf 	bl	800173c <sbrk_aligned>
 80017be:	1c43      	adds	r3, r0, #1
 80017c0:	4604      	mov	r4, r0
 80017c2:	d158      	bne.n	8001876 <_malloc_r+0xf6>
 80017c4:	f8d8 4000 	ldr.w	r4, [r8]
 80017c8:	4627      	mov	r7, r4
 80017ca:	2f00      	cmp	r7, #0
 80017cc:	d143      	bne.n	8001856 <_malloc_r+0xd6>
 80017ce:	2c00      	cmp	r4, #0
 80017d0:	d04b      	beq.n	800186a <_malloc_r+0xea>
 80017d2:	6823      	ldr	r3, [r4, #0]
 80017d4:	4639      	mov	r1, r7
 80017d6:	4630      	mov	r0, r6
 80017d8:	eb04 0903 	add.w	r9, r4, r3
 80017dc:	f000 fc64 	bl	80020a8 <_sbrk_r>
 80017e0:	4581      	cmp	r9, r0
 80017e2:	d142      	bne.n	800186a <_malloc_r+0xea>
 80017e4:	6821      	ldr	r1, [r4, #0]
 80017e6:	1a6d      	subs	r5, r5, r1
 80017e8:	4629      	mov	r1, r5
 80017ea:	4630      	mov	r0, r6
 80017ec:	f7ff ffa6 	bl	800173c <sbrk_aligned>
 80017f0:	3001      	adds	r0, #1
 80017f2:	d03a      	beq.n	800186a <_malloc_r+0xea>
 80017f4:	6823      	ldr	r3, [r4, #0]
 80017f6:	442b      	add	r3, r5
 80017f8:	6023      	str	r3, [r4, #0]
 80017fa:	f8d8 3000 	ldr.w	r3, [r8]
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	bb62      	cbnz	r2, 800185c <_malloc_r+0xdc>
 8001802:	f8c8 7000 	str.w	r7, [r8]
 8001806:	e00f      	b.n	8001828 <_malloc_r+0xa8>
 8001808:	6822      	ldr	r2, [r4, #0]
 800180a:	1b52      	subs	r2, r2, r5
 800180c:	d420      	bmi.n	8001850 <_malloc_r+0xd0>
 800180e:	2a0b      	cmp	r2, #11
 8001810:	d917      	bls.n	8001842 <_malloc_r+0xc2>
 8001812:	1961      	adds	r1, r4, r5
 8001814:	42a3      	cmp	r3, r4
 8001816:	6025      	str	r5, [r4, #0]
 8001818:	bf18      	it	ne
 800181a:	6059      	strne	r1, [r3, #4]
 800181c:	6863      	ldr	r3, [r4, #4]
 800181e:	bf08      	it	eq
 8001820:	f8c8 1000 	streq.w	r1, [r8]
 8001824:	5162      	str	r2, [r4, r5]
 8001826:	604b      	str	r3, [r1, #4]
 8001828:	4630      	mov	r0, r6
 800182a:	f000 f82f 	bl	800188c <__malloc_unlock>
 800182e:	f104 000b 	add.w	r0, r4, #11
 8001832:	1d23      	adds	r3, r4, #4
 8001834:	f020 0007 	bic.w	r0, r0, #7
 8001838:	1ac2      	subs	r2, r0, r3
 800183a:	bf1c      	itt	ne
 800183c:	1a1b      	subne	r3, r3, r0
 800183e:	50a3      	strne	r3, [r4, r2]
 8001840:	e7af      	b.n	80017a2 <_malloc_r+0x22>
 8001842:	6862      	ldr	r2, [r4, #4]
 8001844:	42a3      	cmp	r3, r4
 8001846:	bf0c      	ite	eq
 8001848:	f8c8 2000 	streq.w	r2, [r8]
 800184c:	605a      	strne	r2, [r3, #4]
 800184e:	e7eb      	b.n	8001828 <_malloc_r+0xa8>
 8001850:	4623      	mov	r3, r4
 8001852:	6864      	ldr	r4, [r4, #4]
 8001854:	e7ae      	b.n	80017b4 <_malloc_r+0x34>
 8001856:	463c      	mov	r4, r7
 8001858:	687f      	ldr	r7, [r7, #4]
 800185a:	e7b6      	b.n	80017ca <_malloc_r+0x4a>
 800185c:	461a      	mov	r2, r3
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	42a3      	cmp	r3, r4
 8001862:	d1fb      	bne.n	800185c <_malloc_r+0xdc>
 8001864:	2300      	movs	r3, #0
 8001866:	6053      	str	r3, [r2, #4]
 8001868:	e7de      	b.n	8001828 <_malloc_r+0xa8>
 800186a:	230c      	movs	r3, #12
 800186c:	6033      	str	r3, [r6, #0]
 800186e:	4630      	mov	r0, r6
 8001870:	f000 f80c 	bl	800188c <__malloc_unlock>
 8001874:	e794      	b.n	80017a0 <_malloc_r+0x20>
 8001876:	6005      	str	r5, [r0, #0]
 8001878:	e7d6      	b.n	8001828 <_malloc_r+0xa8>
 800187a:	bf00      	nop
 800187c:	200003e4 	.word	0x200003e4

08001880 <__malloc_lock>:
 8001880:	4801      	ldr	r0, [pc, #4]	@ (8001888 <__malloc_lock+0x8>)
 8001882:	f7ff bf0e 	b.w	80016a2 <__retarget_lock_acquire_recursive>
 8001886:	bf00      	nop
 8001888:	200003dc 	.word	0x200003dc

0800188c <__malloc_unlock>:
 800188c:	4801      	ldr	r0, [pc, #4]	@ (8001894 <__malloc_unlock+0x8>)
 800188e:	f7ff bf09 	b.w	80016a4 <__retarget_lock_release_recursive>
 8001892:	bf00      	nop
 8001894:	200003dc 	.word	0x200003dc

08001898 <__sfputc_r>:
 8001898:	6893      	ldr	r3, [r2, #8]
 800189a:	3b01      	subs	r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	b410      	push	{r4}
 80018a0:	6093      	str	r3, [r2, #8]
 80018a2:	da07      	bge.n	80018b4 <__sfputc_r+0x1c>
 80018a4:	6994      	ldr	r4, [r2, #24]
 80018a6:	42a3      	cmp	r3, r4
 80018a8:	db01      	blt.n	80018ae <__sfputc_r+0x16>
 80018aa:	290a      	cmp	r1, #10
 80018ac:	d102      	bne.n	80018b4 <__sfputc_r+0x1c>
 80018ae:	bc10      	pop	{r4}
 80018b0:	f000 bb66 	b.w	8001f80 <__swbuf_r>
 80018b4:	6813      	ldr	r3, [r2, #0]
 80018b6:	1c58      	adds	r0, r3, #1
 80018b8:	6010      	str	r0, [r2, #0]
 80018ba:	7019      	strb	r1, [r3, #0]
 80018bc:	4608      	mov	r0, r1
 80018be:	bc10      	pop	{r4}
 80018c0:	4770      	bx	lr

080018c2 <__sfputs_r>:
 80018c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018c4:	4606      	mov	r6, r0
 80018c6:	460f      	mov	r7, r1
 80018c8:	4614      	mov	r4, r2
 80018ca:	18d5      	adds	r5, r2, r3
 80018cc:	42ac      	cmp	r4, r5
 80018ce:	d101      	bne.n	80018d4 <__sfputs_r+0x12>
 80018d0:	2000      	movs	r0, #0
 80018d2:	e007      	b.n	80018e4 <__sfputs_r+0x22>
 80018d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018d8:	463a      	mov	r2, r7
 80018da:	4630      	mov	r0, r6
 80018dc:	f7ff ffdc 	bl	8001898 <__sfputc_r>
 80018e0:	1c43      	adds	r3, r0, #1
 80018e2:	d1f3      	bne.n	80018cc <__sfputs_r+0xa>
 80018e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080018e8 <_vfiprintf_r>:
 80018e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018ec:	460d      	mov	r5, r1
 80018ee:	b09d      	sub	sp, #116	@ 0x74
 80018f0:	4614      	mov	r4, r2
 80018f2:	4698      	mov	r8, r3
 80018f4:	4606      	mov	r6, r0
 80018f6:	b118      	cbz	r0, 8001900 <_vfiprintf_r+0x18>
 80018f8:	6a03      	ldr	r3, [r0, #32]
 80018fa:	b90b      	cbnz	r3, 8001900 <_vfiprintf_r+0x18>
 80018fc:	f7ff fdcc 	bl	8001498 <__sinit>
 8001900:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001902:	07d9      	lsls	r1, r3, #31
 8001904:	d405      	bmi.n	8001912 <_vfiprintf_r+0x2a>
 8001906:	89ab      	ldrh	r3, [r5, #12]
 8001908:	059a      	lsls	r2, r3, #22
 800190a:	d402      	bmi.n	8001912 <_vfiprintf_r+0x2a>
 800190c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800190e:	f7ff fec8 	bl	80016a2 <__retarget_lock_acquire_recursive>
 8001912:	89ab      	ldrh	r3, [r5, #12]
 8001914:	071b      	lsls	r3, r3, #28
 8001916:	d501      	bpl.n	800191c <_vfiprintf_r+0x34>
 8001918:	692b      	ldr	r3, [r5, #16]
 800191a:	b99b      	cbnz	r3, 8001944 <_vfiprintf_r+0x5c>
 800191c:	4629      	mov	r1, r5
 800191e:	4630      	mov	r0, r6
 8001920:	f000 fb6c 	bl	8001ffc <__swsetup_r>
 8001924:	b170      	cbz	r0, 8001944 <_vfiprintf_r+0x5c>
 8001926:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001928:	07dc      	lsls	r4, r3, #31
 800192a:	d504      	bpl.n	8001936 <_vfiprintf_r+0x4e>
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	b01d      	add	sp, #116	@ 0x74
 8001932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001936:	89ab      	ldrh	r3, [r5, #12]
 8001938:	0598      	lsls	r0, r3, #22
 800193a:	d4f7      	bmi.n	800192c <_vfiprintf_r+0x44>
 800193c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800193e:	f7ff feb1 	bl	80016a4 <__retarget_lock_release_recursive>
 8001942:	e7f3      	b.n	800192c <_vfiprintf_r+0x44>
 8001944:	2300      	movs	r3, #0
 8001946:	9309      	str	r3, [sp, #36]	@ 0x24
 8001948:	2320      	movs	r3, #32
 800194a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800194e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001952:	2330      	movs	r3, #48	@ 0x30
 8001954:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001b04 <_vfiprintf_r+0x21c>
 8001958:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800195c:	f04f 0901 	mov.w	r9, #1
 8001960:	4623      	mov	r3, r4
 8001962:	469a      	mov	sl, r3
 8001964:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001968:	b10a      	cbz	r2, 800196e <_vfiprintf_r+0x86>
 800196a:	2a25      	cmp	r2, #37	@ 0x25
 800196c:	d1f9      	bne.n	8001962 <_vfiprintf_r+0x7a>
 800196e:	ebba 0b04 	subs.w	fp, sl, r4
 8001972:	d00b      	beq.n	800198c <_vfiprintf_r+0xa4>
 8001974:	465b      	mov	r3, fp
 8001976:	4622      	mov	r2, r4
 8001978:	4629      	mov	r1, r5
 800197a:	4630      	mov	r0, r6
 800197c:	f7ff ffa1 	bl	80018c2 <__sfputs_r>
 8001980:	3001      	adds	r0, #1
 8001982:	f000 80a7 	beq.w	8001ad4 <_vfiprintf_r+0x1ec>
 8001986:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001988:	445a      	add	r2, fp
 800198a:	9209      	str	r2, [sp, #36]	@ 0x24
 800198c:	f89a 3000 	ldrb.w	r3, [sl]
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 809f 	beq.w	8001ad4 <_vfiprintf_r+0x1ec>
 8001996:	2300      	movs	r3, #0
 8001998:	f04f 32ff 	mov.w	r2, #4294967295
 800199c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80019a0:	f10a 0a01 	add.w	sl, sl, #1
 80019a4:	9304      	str	r3, [sp, #16]
 80019a6:	9307      	str	r3, [sp, #28]
 80019a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80019ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80019ae:	4654      	mov	r4, sl
 80019b0:	2205      	movs	r2, #5
 80019b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019b6:	4853      	ldr	r0, [pc, #332]	@ (8001b04 <_vfiprintf_r+0x21c>)
 80019b8:	f7fe fc1a 	bl	80001f0 <memchr>
 80019bc:	9a04      	ldr	r2, [sp, #16]
 80019be:	b9d8      	cbnz	r0, 80019f8 <_vfiprintf_r+0x110>
 80019c0:	06d1      	lsls	r1, r2, #27
 80019c2:	bf44      	itt	mi
 80019c4:	2320      	movmi	r3, #32
 80019c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80019ca:	0713      	lsls	r3, r2, #28
 80019cc:	bf44      	itt	mi
 80019ce:	232b      	movmi	r3, #43	@ 0x2b
 80019d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80019d4:	f89a 3000 	ldrb.w	r3, [sl]
 80019d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80019da:	d015      	beq.n	8001a08 <_vfiprintf_r+0x120>
 80019dc:	9a07      	ldr	r2, [sp, #28]
 80019de:	4654      	mov	r4, sl
 80019e0:	2000      	movs	r0, #0
 80019e2:	f04f 0c0a 	mov.w	ip, #10
 80019e6:	4621      	mov	r1, r4
 80019e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80019ec:	3b30      	subs	r3, #48	@ 0x30
 80019ee:	2b09      	cmp	r3, #9
 80019f0:	d94b      	bls.n	8001a8a <_vfiprintf_r+0x1a2>
 80019f2:	b1b0      	cbz	r0, 8001a22 <_vfiprintf_r+0x13a>
 80019f4:	9207      	str	r2, [sp, #28]
 80019f6:	e014      	b.n	8001a22 <_vfiprintf_r+0x13a>
 80019f8:	eba0 0308 	sub.w	r3, r0, r8
 80019fc:	fa09 f303 	lsl.w	r3, r9, r3
 8001a00:	4313      	orrs	r3, r2
 8001a02:	9304      	str	r3, [sp, #16]
 8001a04:	46a2      	mov	sl, r4
 8001a06:	e7d2      	b.n	80019ae <_vfiprintf_r+0xc6>
 8001a08:	9b03      	ldr	r3, [sp, #12]
 8001a0a:	1d19      	adds	r1, r3, #4
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	9103      	str	r1, [sp, #12]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	bfbb      	ittet	lt
 8001a14:	425b      	neglt	r3, r3
 8001a16:	f042 0202 	orrlt.w	r2, r2, #2
 8001a1a:	9307      	strge	r3, [sp, #28]
 8001a1c:	9307      	strlt	r3, [sp, #28]
 8001a1e:	bfb8      	it	lt
 8001a20:	9204      	strlt	r2, [sp, #16]
 8001a22:	7823      	ldrb	r3, [r4, #0]
 8001a24:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a26:	d10a      	bne.n	8001a3e <_vfiprintf_r+0x156>
 8001a28:	7863      	ldrb	r3, [r4, #1]
 8001a2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a2c:	d132      	bne.n	8001a94 <_vfiprintf_r+0x1ac>
 8001a2e:	9b03      	ldr	r3, [sp, #12]
 8001a30:	1d1a      	adds	r2, r3, #4
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	9203      	str	r2, [sp, #12]
 8001a36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001a3a:	3402      	adds	r4, #2
 8001a3c:	9305      	str	r3, [sp, #20]
 8001a3e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001b08 <_vfiprintf_r+0x220>
 8001a42:	7821      	ldrb	r1, [r4, #0]
 8001a44:	2203      	movs	r2, #3
 8001a46:	4650      	mov	r0, sl
 8001a48:	f7fe fbd2 	bl	80001f0 <memchr>
 8001a4c:	b138      	cbz	r0, 8001a5e <_vfiprintf_r+0x176>
 8001a4e:	9b04      	ldr	r3, [sp, #16]
 8001a50:	eba0 000a 	sub.w	r0, r0, sl
 8001a54:	2240      	movs	r2, #64	@ 0x40
 8001a56:	4082      	lsls	r2, r0
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	3401      	adds	r4, #1
 8001a5c:	9304      	str	r3, [sp, #16]
 8001a5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a62:	482a      	ldr	r0, [pc, #168]	@ (8001b0c <_vfiprintf_r+0x224>)
 8001a64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001a68:	2206      	movs	r2, #6
 8001a6a:	f7fe fbc1 	bl	80001f0 <memchr>
 8001a6e:	2800      	cmp	r0, #0
 8001a70:	d03f      	beq.n	8001af2 <_vfiprintf_r+0x20a>
 8001a72:	4b27      	ldr	r3, [pc, #156]	@ (8001b10 <_vfiprintf_r+0x228>)
 8001a74:	bb1b      	cbnz	r3, 8001abe <_vfiprintf_r+0x1d6>
 8001a76:	9b03      	ldr	r3, [sp, #12]
 8001a78:	3307      	adds	r3, #7
 8001a7a:	f023 0307 	bic.w	r3, r3, #7
 8001a7e:	3308      	adds	r3, #8
 8001a80:	9303      	str	r3, [sp, #12]
 8001a82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001a84:	443b      	add	r3, r7
 8001a86:	9309      	str	r3, [sp, #36]	@ 0x24
 8001a88:	e76a      	b.n	8001960 <_vfiprintf_r+0x78>
 8001a8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a8e:	460c      	mov	r4, r1
 8001a90:	2001      	movs	r0, #1
 8001a92:	e7a8      	b.n	80019e6 <_vfiprintf_r+0xfe>
 8001a94:	2300      	movs	r3, #0
 8001a96:	3401      	adds	r4, #1
 8001a98:	9305      	str	r3, [sp, #20]
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f04f 0c0a 	mov.w	ip, #10
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001aa6:	3a30      	subs	r2, #48	@ 0x30
 8001aa8:	2a09      	cmp	r2, #9
 8001aaa:	d903      	bls.n	8001ab4 <_vfiprintf_r+0x1cc>
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0c6      	beq.n	8001a3e <_vfiprintf_r+0x156>
 8001ab0:	9105      	str	r1, [sp, #20]
 8001ab2:	e7c4      	b.n	8001a3e <_vfiprintf_r+0x156>
 8001ab4:	fb0c 2101 	mla	r1, ip, r1, r2
 8001ab8:	4604      	mov	r4, r0
 8001aba:	2301      	movs	r3, #1
 8001abc:	e7f0      	b.n	8001aa0 <_vfiprintf_r+0x1b8>
 8001abe:	ab03      	add	r3, sp, #12
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	462a      	mov	r2, r5
 8001ac4:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <_vfiprintf_r+0x22c>)
 8001ac6:	a904      	add	r1, sp, #16
 8001ac8:	4630      	mov	r0, r6
 8001aca:	f3af 8000 	nop.w
 8001ace:	4607      	mov	r7, r0
 8001ad0:	1c78      	adds	r0, r7, #1
 8001ad2:	d1d6      	bne.n	8001a82 <_vfiprintf_r+0x19a>
 8001ad4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001ad6:	07d9      	lsls	r1, r3, #31
 8001ad8:	d405      	bmi.n	8001ae6 <_vfiprintf_r+0x1fe>
 8001ada:	89ab      	ldrh	r3, [r5, #12]
 8001adc:	059a      	lsls	r2, r3, #22
 8001ade:	d402      	bmi.n	8001ae6 <_vfiprintf_r+0x1fe>
 8001ae0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001ae2:	f7ff fddf 	bl	80016a4 <__retarget_lock_release_recursive>
 8001ae6:	89ab      	ldrh	r3, [r5, #12]
 8001ae8:	065b      	lsls	r3, r3, #25
 8001aea:	f53f af1f 	bmi.w	800192c <_vfiprintf_r+0x44>
 8001aee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001af0:	e71e      	b.n	8001930 <_vfiprintf_r+0x48>
 8001af2:	ab03      	add	r3, sp, #12
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	462a      	mov	r2, r5
 8001af8:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <_vfiprintf_r+0x22c>)
 8001afa:	a904      	add	r1, sp, #16
 8001afc:	4630      	mov	r0, r6
 8001afe:	f000 f879 	bl	8001bf4 <_printf_i>
 8001b02:	e7e4      	b.n	8001ace <_vfiprintf_r+0x1e6>
 8001b04:	080021f8 	.word	0x080021f8
 8001b08:	080021fe 	.word	0x080021fe
 8001b0c:	08002202 	.word	0x08002202
 8001b10:	00000000 	.word	0x00000000
 8001b14:	080018c3 	.word	0x080018c3

08001b18 <_printf_common>:
 8001b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b1c:	4616      	mov	r6, r2
 8001b1e:	4698      	mov	r8, r3
 8001b20:	688a      	ldr	r2, [r1, #8]
 8001b22:	690b      	ldr	r3, [r1, #16]
 8001b24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	bfb8      	it	lt
 8001b2c:	4613      	movlt	r3, r2
 8001b2e:	6033      	str	r3, [r6, #0]
 8001b30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001b34:	4607      	mov	r7, r0
 8001b36:	460c      	mov	r4, r1
 8001b38:	b10a      	cbz	r2, 8001b3e <_printf_common+0x26>
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	6033      	str	r3, [r6, #0]
 8001b3e:	6823      	ldr	r3, [r4, #0]
 8001b40:	0699      	lsls	r1, r3, #26
 8001b42:	bf42      	ittt	mi
 8001b44:	6833      	ldrmi	r3, [r6, #0]
 8001b46:	3302      	addmi	r3, #2
 8001b48:	6033      	strmi	r3, [r6, #0]
 8001b4a:	6825      	ldr	r5, [r4, #0]
 8001b4c:	f015 0506 	ands.w	r5, r5, #6
 8001b50:	d106      	bne.n	8001b60 <_printf_common+0x48>
 8001b52:	f104 0a19 	add.w	sl, r4, #25
 8001b56:	68e3      	ldr	r3, [r4, #12]
 8001b58:	6832      	ldr	r2, [r6, #0]
 8001b5a:	1a9b      	subs	r3, r3, r2
 8001b5c:	42ab      	cmp	r3, r5
 8001b5e:	dc26      	bgt.n	8001bae <_printf_common+0x96>
 8001b60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001b64:	6822      	ldr	r2, [r4, #0]
 8001b66:	3b00      	subs	r3, #0
 8001b68:	bf18      	it	ne
 8001b6a:	2301      	movne	r3, #1
 8001b6c:	0692      	lsls	r2, r2, #26
 8001b6e:	d42b      	bmi.n	8001bc8 <_printf_common+0xb0>
 8001b70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001b74:	4641      	mov	r1, r8
 8001b76:	4638      	mov	r0, r7
 8001b78:	47c8      	blx	r9
 8001b7a:	3001      	adds	r0, #1
 8001b7c:	d01e      	beq.n	8001bbc <_printf_common+0xa4>
 8001b7e:	6823      	ldr	r3, [r4, #0]
 8001b80:	6922      	ldr	r2, [r4, #16]
 8001b82:	f003 0306 	and.w	r3, r3, #6
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	bf02      	ittt	eq
 8001b8a:	68e5      	ldreq	r5, [r4, #12]
 8001b8c:	6833      	ldreq	r3, [r6, #0]
 8001b8e:	1aed      	subeq	r5, r5, r3
 8001b90:	68a3      	ldr	r3, [r4, #8]
 8001b92:	bf0c      	ite	eq
 8001b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b98:	2500      	movne	r5, #0
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	bfc4      	itt	gt
 8001b9e:	1a9b      	subgt	r3, r3, r2
 8001ba0:	18ed      	addgt	r5, r5, r3
 8001ba2:	2600      	movs	r6, #0
 8001ba4:	341a      	adds	r4, #26
 8001ba6:	42b5      	cmp	r5, r6
 8001ba8:	d11a      	bne.n	8001be0 <_printf_common+0xc8>
 8001baa:	2000      	movs	r0, #0
 8001bac:	e008      	b.n	8001bc0 <_printf_common+0xa8>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	4652      	mov	r2, sl
 8001bb2:	4641      	mov	r1, r8
 8001bb4:	4638      	mov	r0, r7
 8001bb6:	47c8      	blx	r9
 8001bb8:	3001      	adds	r0, #1
 8001bba:	d103      	bne.n	8001bc4 <_printf_common+0xac>
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bc4:	3501      	adds	r5, #1
 8001bc6:	e7c6      	b.n	8001b56 <_printf_common+0x3e>
 8001bc8:	18e1      	adds	r1, r4, r3
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	2030      	movs	r0, #48	@ 0x30
 8001bce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001bd2:	4422      	add	r2, r4
 8001bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001bd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001bdc:	3302      	adds	r3, #2
 8001bde:	e7c7      	b.n	8001b70 <_printf_common+0x58>
 8001be0:	2301      	movs	r3, #1
 8001be2:	4622      	mov	r2, r4
 8001be4:	4641      	mov	r1, r8
 8001be6:	4638      	mov	r0, r7
 8001be8:	47c8      	blx	r9
 8001bea:	3001      	adds	r0, #1
 8001bec:	d0e6      	beq.n	8001bbc <_printf_common+0xa4>
 8001bee:	3601      	adds	r6, #1
 8001bf0:	e7d9      	b.n	8001ba6 <_printf_common+0x8e>
	...

08001bf4 <_printf_i>:
 8001bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001bf8:	7e0f      	ldrb	r7, [r1, #24]
 8001bfa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001bfc:	2f78      	cmp	r7, #120	@ 0x78
 8001bfe:	4691      	mov	r9, r2
 8001c00:	4680      	mov	r8, r0
 8001c02:	460c      	mov	r4, r1
 8001c04:	469a      	mov	sl, r3
 8001c06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001c0a:	d807      	bhi.n	8001c1c <_printf_i+0x28>
 8001c0c:	2f62      	cmp	r7, #98	@ 0x62
 8001c0e:	d80a      	bhi.n	8001c26 <_printf_i+0x32>
 8001c10:	2f00      	cmp	r7, #0
 8001c12:	f000 80d1 	beq.w	8001db8 <_printf_i+0x1c4>
 8001c16:	2f58      	cmp	r7, #88	@ 0x58
 8001c18:	f000 80b8 	beq.w	8001d8c <_printf_i+0x198>
 8001c1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001c20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001c24:	e03a      	b.n	8001c9c <_printf_i+0xa8>
 8001c26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001c2a:	2b15      	cmp	r3, #21
 8001c2c:	d8f6      	bhi.n	8001c1c <_printf_i+0x28>
 8001c2e:	a101      	add	r1, pc, #4	@ (adr r1, 8001c34 <_printf_i+0x40>)
 8001c30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001c34:	08001c8d 	.word	0x08001c8d
 8001c38:	08001ca1 	.word	0x08001ca1
 8001c3c:	08001c1d 	.word	0x08001c1d
 8001c40:	08001c1d 	.word	0x08001c1d
 8001c44:	08001c1d 	.word	0x08001c1d
 8001c48:	08001c1d 	.word	0x08001c1d
 8001c4c:	08001ca1 	.word	0x08001ca1
 8001c50:	08001c1d 	.word	0x08001c1d
 8001c54:	08001c1d 	.word	0x08001c1d
 8001c58:	08001c1d 	.word	0x08001c1d
 8001c5c:	08001c1d 	.word	0x08001c1d
 8001c60:	08001d9f 	.word	0x08001d9f
 8001c64:	08001ccb 	.word	0x08001ccb
 8001c68:	08001d59 	.word	0x08001d59
 8001c6c:	08001c1d 	.word	0x08001c1d
 8001c70:	08001c1d 	.word	0x08001c1d
 8001c74:	08001dc1 	.word	0x08001dc1
 8001c78:	08001c1d 	.word	0x08001c1d
 8001c7c:	08001ccb 	.word	0x08001ccb
 8001c80:	08001c1d 	.word	0x08001c1d
 8001c84:	08001c1d 	.word	0x08001c1d
 8001c88:	08001d61 	.word	0x08001d61
 8001c8c:	6833      	ldr	r3, [r6, #0]
 8001c8e:	1d1a      	adds	r2, r3, #4
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6032      	str	r2, [r6, #0]
 8001c94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001c98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e09c      	b.n	8001dda <_printf_i+0x1e6>
 8001ca0:	6833      	ldr	r3, [r6, #0]
 8001ca2:	6820      	ldr	r0, [r4, #0]
 8001ca4:	1d19      	adds	r1, r3, #4
 8001ca6:	6031      	str	r1, [r6, #0]
 8001ca8:	0606      	lsls	r6, r0, #24
 8001caa:	d501      	bpl.n	8001cb0 <_printf_i+0xbc>
 8001cac:	681d      	ldr	r5, [r3, #0]
 8001cae:	e003      	b.n	8001cb8 <_printf_i+0xc4>
 8001cb0:	0645      	lsls	r5, r0, #25
 8001cb2:	d5fb      	bpl.n	8001cac <_printf_i+0xb8>
 8001cb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001cb8:	2d00      	cmp	r5, #0
 8001cba:	da03      	bge.n	8001cc4 <_printf_i+0xd0>
 8001cbc:	232d      	movs	r3, #45	@ 0x2d
 8001cbe:	426d      	negs	r5, r5
 8001cc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001cc4:	4858      	ldr	r0, [pc, #352]	@ (8001e28 <_printf_i+0x234>)
 8001cc6:	230a      	movs	r3, #10
 8001cc8:	e011      	b.n	8001cee <_printf_i+0xfa>
 8001cca:	6821      	ldr	r1, [r4, #0]
 8001ccc:	6833      	ldr	r3, [r6, #0]
 8001cce:	0608      	lsls	r0, r1, #24
 8001cd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8001cd4:	d402      	bmi.n	8001cdc <_printf_i+0xe8>
 8001cd6:	0649      	lsls	r1, r1, #25
 8001cd8:	bf48      	it	mi
 8001cda:	b2ad      	uxthmi	r5, r5
 8001cdc:	2f6f      	cmp	r7, #111	@ 0x6f
 8001cde:	4852      	ldr	r0, [pc, #328]	@ (8001e28 <_printf_i+0x234>)
 8001ce0:	6033      	str	r3, [r6, #0]
 8001ce2:	bf14      	ite	ne
 8001ce4:	230a      	movne	r3, #10
 8001ce6:	2308      	moveq	r3, #8
 8001ce8:	2100      	movs	r1, #0
 8001cea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001cee:	6866      	ldr	r6, [r4, #4]
 8001cf0:	60a6      	str	r6, [r4, #8]
 8001cf2:	2e00      	cmp	r6, #0
 8001cf4:	db05      	blt.n	8001d02 <_printf_i+0x10e>
 8001cf6:	6821      	ldr	r1, [r4, #0]
 8001cf8:	432e      	orrs	r6, r5
 8001cfa:	f021 0104 	bic.w	r1, r1, #4
 8001cfe:	6021      	str	r1, [r4, #0]
 8001d00:	d04b      	beq.n	8001d9a <_printf_i+0x1a6>
 8001d02:	4616      	mov	r6, r2
 8001d04:	fbb5 f1f3 	udiv	r1, r5, r3
 8001d08:	fb03 5711 	mls	r7, r3, r1, r5
 8001d0c:	5dc7      	ldrb	r7, [r0, r7]
 8001d0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001d12:	462f      	mov	r7, r5
 8001d14:	42bb      	cmp	r3, r7
 8001d16:	460d      	mov	r5, r1
 8001d18:	d9f4      	bls.n	8001d04 <_printf_i+0x110>
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d10b      	bne.n	8001d36 <_printf_i+0x142>
 8001d1e:	6823      	ldr	r3, [r4, #0]
 8001d20:	07df      	lsls	r7, r3, #31
 8001d22:	d508      	bpl.n	8001d36 <_printf_i+0x142>
 8001d24:	6923      	ldr	r3, [r4, #16]
 8001d26:	6861      	ldr	r1, [r4, #4]
 8001d28:	4299      	cmp	r1, r3
 8001d2a:	bfde      	ittt	le
 8001d2c:	2330      	movle	r3, #48	@ 0x30
 8001d2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001d32:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001d36:	1b92      	subs	r2, r2, r6
 8001d38:	6122      	str	r2, [r4, #16]
 8001d3a:	f8cd a000 	str.w	sl, [sp]
 8001d3e:	464b      	mov	r3, r9
 8001d40:	aa03      	add	r2, sp, #12
 8001d42:	4621      	mov	r1, r4
 8001d44:	4640      	mov	r0, r8
 8001d46:	f7ff fee7 	bl	8001b18 <_printf_common>
 8001d4a:	3001      	adds	r0, #1
 8001d4c:	d14a      	bne.n	8001de4 <_printf_i+0x1f0>
 8001d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d52:	b004      	add	sp, #16
 8001d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d58:	6823      	ldr	r3, [r4, #0]
 8001d5a:	f043 0320 	orr.w	r3, r3, #32
 8001d5e:	6023      	str	r3, [r4, #0]
 8001d60:	4832      	ldr	r0, [pc, #200]	@ (8001e2c <_printf_i+0x238>)
 8001d62:	2778      	movs	r7, #120	@ 0x78
 8001d64:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001d68:	6823      	ldr	r3, [r4, #0]
 8001d6a:	6831      	ldr	r1, [r6, #0]
 8001d6c:	061f      	lsls	r7, r3, #24
 8001d6e:	f851 5b04 	ldr.w	r5, [r1], #4
 8001d72:	d402      	bmi.n	8001d7a <_printf_i+0x186>
 8001d74:	065f      	lsls	r7, r3, #25
 8001d76:	bf48      	it	mi
 8001d78:	b2ad      	uxthmi	r5, r5
 8001d7a:	6031      	str	r1, [r6, #0]
 8001d7c:	07d9      	lsls	r1, r3, #31
 8001d7e:	bf44      	itt	mi
 8001d80:	f043 0320 	orrmi.w	r3, r3, #32
 8001d84:	6023      	strmi	r3, [r4, #0]
 8001d86:	b11d      	cbz	r5, 8001d90 <_printf_i+0x19c>
 8001d88:	2310      	movs	r3, #16
 8001d8a:	e7ad      	b.n	8001ce8 <_printf_i+0xf4>
 8001d8c:	4826      	ldr	r0, [pc, #152]	@ (8001e28 <_printf_i+0x234>)
 8001d8e:	e7e9      	b.n	8001d64 <_printf_i+0x170>
 8001d90:	6823      	ldr	r3, [r4, #0]
 8001d92:	f023 0320 	bic.w	r3, r3, #32
 8001d96:	6023      	str	r3, [r4, #0]
 8001d98:	e7f6      	b.n	8001d88 <_printf_i+0x194>
 8001d9a:	4616      	mov	r6, r2
 8001d9c:	e7bd      	b.n	8001d1a <_printf_i+0x126>
 8001d9e:	6833      	ldr	r3, [r6, #0]
 8001da0:	6825      	ldr	r5, [r4, #0]
 8001da2:	6961      	ldr	r1, [r4, #20]
 8001da4:	1d18      	adds	r0, r3, #4
 8001da6:	6030      	str	r0, [r6, #0]
 8001da8:	062e      	lsls	r6, r5, #24
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	d501      	bpl.n	8001db2 <_printf_i+0x1be>
 8001dae:	6019      	str	r1, [r3, #0]
 8001db0:	e002      	b.n	8001db8 <_printf_i+0x1c4>
 8001db2:	0668      	lsls	r0, r5, #25
 8001db4:	d5fb      	bpl.n	8001dae <_printf_i+0x1ba>
 8001db6:	8019      	strh	r1, [r3, #0]
 8001db8:	2300      	movs	r3, #0
 8001dba:	6123      	str	r3, [r4, #16]
 8001dbc:	4616      	mov	r6, r2
 8001dbe:	e7bc      	b.n	8001d3a <_printf_i+0x146>
 8001dc0:	6833      	ldr	r3, [r6, #0]
 8001dc2:	1d1a      	adds	r2, r3, #4
 8001dc4:	6032      	str	r2, [r6, #0]
 8001dc6:	681e      	ldr	r6, [r3, #0]
 8001dc8:	6862      	ldr	r2, [r4, #4]
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4630      	mov	r0, r6
 8001dce:	f7fe fa0f 	bl	80001f0 <memchr>
 8001dd2:	b108      	cbz	r0, 8001dd8 <_printf_i+0x1e4>
 8001dd4:	1b80      	subs	r0, r0, r6
 8001dd6:	6060      	str	r0, [r4, #4]
 8001dd8:	6863      	ldr	r3, [r4, #4]
 8001dda:	6123      	str	r3, [r4, #16]
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001de2:	e7aa      	b.n	8001d3a <_printf_i+0x146>
 8001de4:	6923      	ldr	r3, [r4, #16]
 8001de6:	4632      	mov	r2, r6
 8001de8:	4649      	mov	r1, r9
 8001dea:	4640      	mov	r0, r8
 8001dec:	47d0      	blx	sl
 8001dee:	3001      	adds	r0, #1
 8001df0:	d0ad      	beq.n	8001d4e <_printf_i+0x15a>
 8001df2:	6823      	ldr	r3, [r4, #0]
 8001df4:	079b      	lsls	r3, r3, #30
 8001df6:	d413      	bmi.n	8001e20 <_printf_i+0x22c>
 8001df8:	68e0      	ldr	r0, [r4, #12]
 8001dfa:	9b03      	ldr	r3, [sp, #12]
 8001dfc:	4298      	cmp	r0, r3
 8001dfe:	bfb8      	it	lt
 8001e00:	4618      	movlt	r0, r3
 8001e02:	e7a6      	b.n	8001d52 <_printf_i+0x15e>
 8001e04:	2301      	movs	r3, #1
 8001e06:	4632      	mov	r2, r6
 8001e08:	4649      	mov	r1, r9
 8001e0a:	4640      	mov	r0, r8
 8001e0c:	47d0      	blx	sl
 8001e0e:	3001      	adds	r0, #1
 8001e10:	d09d      	beq.n	8001d4e <_printf_i+0x15a>
 8001e12:	3501      	adds	r5, #1
 8001e14:	68e3      	ldr	r3, [r4, #12]
 8001e16:	9903      	ldr	r1, [sp, #12]
 8001e18:	1a5b      	subs	r3, r3, r1
 8001e1a:	42ab      	cmp	r3, r5
 8001e1c:	dcf2      	bgt.n	8001e04 <_printf_i+0x210>
 8001e1e:	e7eb      	b.n	8001df8 <_printf_i+0x204>
 8001e20:	2500      	movs	r5, #0
 8001e22:	f104 0619 	add.w	r6, r4, #25
 8001e26:	e7f5      	b.n	8001e14 <_printf_i+0x220>
 8001e28:	08002209 	.word	0x08002209
 8001e2c:	0800221a 	.word	0x0800221a

08001e30 <__sflush_r>:
 8001e30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e36:	0716      	lsls	r6, r2, #28
 8001e38:	4605      	mov	r5, r0
 8001e3a:	460c      	mov	r4, r1
 8001e3c:	d454      	bmi.n	8001ee8 <__sflush_r+0xb8>
 8001e3e:	684b      	ldr	r3, [r1, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	dc02      	bgt.n	8001e4a <__sflush_r+0x1a>
 8001e44:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	dd48      	ble.n	8001edc <__sflush_r+0xac>
 8001e4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e4c:	2e00      	cmp	r6, #0
 8001e4e:	d045      	beq.n	8001edc <__sflush_r+0xac>
 8001e50:	2300      	movs	r3, #0
 8001e52:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001e56:	682f      	ldr	r7, [r5, #0]
 8001e58:	6a21      	ldr	r1, [r4, #32]
 8001e5a:	602b      	str	r3, [r5, #0]
 8001e5c:	d030      	beq.n	8001ec0 <__sflush_r+0x90>
 8001e5e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001e60:	89a3      	ldrh	r3, [r4, #12]
 8001e62:	0759      	lsls	r1, r3, #29
 8001e64:	d505      	bpl.n	8001e72 <__sflush_r+0x42>
 8001e66:	6863      	ldr	r3, [r4, #4]
 8001e68:	1ad2      	subs	r2, r2, r3
 8001e6a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001e6c:	b10b      	cbz	r3, 8001e72 <__sflush_r+0x42>
 8001e6e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e70:	1ad2      	subs	r2, r2, r3
 8001e72:	2300      	movs	r3, #0
 8001e74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e76:	6a21      	ldr	r1, [r4, #32]
 8001e78:	4628      	mov	r0, r5
 8001e7a:	47b0      	blx	r6
 8001e7c:	1c43      	adds	r3, r0, #1
 8001e7e:	89a3      	ldrh	r3, [r4, #12]
 8001e80:	d106      	bne.n	8001e90 <__sflush_r+0x60>
 8001e82:	6829      	ldr	r1, [r5, #0]
 8001e84:	291d      	cmp	r1, #29
 8001e86:	d82b      	bhi.n	8001ee0 <__sflush_r+0xb0>
 8001e88:	4a28      	ldr	r2, [pc, #160]	@ (8001f2c <__sflush_r+0xfc>)
 8001e8a:	40ca      	lsrs	r2, r1
 8001e8c:	07d6      	lsls	r6, r2, #31
 8001e8e:	d527      	bpl.n	8001ee0 <__sflush_r+0xb0>
 8001e90:	2200      	movs	r2, #0
 8001e92:	6062      	str	r2, [r4, #4]
 8001e94:	04d9      	lsls	r1, r3, #19
 8001e96:	6922      	ldr	r2, [r4, #16]
 8001e98:	6022      	str	r2, [r4, #0]
 8001e9a:	d504      	bpl.n	8001ea6 <__sflush_r+0x76>
 8001e9c:	1c42      	adds	r2, r0, #1
 8001e9e:	d101      	bne.n	8001ea4 <__sflush_r+0x74>
 8001ea0:	682b      	ldr	r3, [r5, #0]
 8001ea2:	b903      	cbnz	r3, 8001ea6 <__sflush_r+0x76>
 8001ea4:	6560      	str	r0, [r4, #84]	@ 0x54
 8001ea6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001ea8:	602f      	str	r7, [r5, #0]
 8001eaa:	b1b9      	cbz	r1, 8001edc <__sflush_r+0xac>
 8001eac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001eb0:	4299      	cmp	r1, r3
 8001eb2:	d002      	beq.n	8001eba <__sflush_r+0x8a>
 8001eb4:	4628      	mov	r0, r5
 8001eb6:	f7ff fbf7 	bl	80016a8 <_free_r>
 8001eba:	2300      	movs	r3, #0
 8001ebc:	6363      	str	r3, [r4, #52]	@ 0x34
 8001ebe:	e00d      	b.n	8001edc <__sflush_r+0xac>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	4628      	mov	r0, r5
 8001ec4:	47b0      	blx	r6
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	1c50      	adds	r0, r2, #1
 8001eca:	d1c9      	bne.n	8001e60 <__sflush_r+0x30>
 8001ecc:	682b      	ldr	r3, [r5, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0c6      	beq.n	8001e60 <__sflush_r+0x30>
 8001ed2:	2b1d      	cmp	r3, #29
 8001ed4:	d001      	beq.n	8001eda <__sflush_r+0xaa>
 8001ed6:	2b16      	cmp	r3, #22
 8001ed8:	d11d      	bne.n	8001f16 <__sflush_r+0xe6>
 8001eda:	602f      	str	r7, [r5, #0]
 8001edc:	2000      	movs	r0, #0
 8001ede:	e021      	b.n	8001f24 <__sflush_r+0xf4>
 8001ee0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	e01a      	b.n	8001f1e <__sflush_r+0xee>
 8001ee8:	690f      	ldr	r7, [r1, #16]
 8001eea:	2f00      	cmp	r7, #0
 8001eec:	d0f6      	beq.n	8001edc <__sflush_r+0xac>
 8001eee:	0793      	lsls	r3, r2, #30
 8001ef0:	680e      	ldr	r6, [r1, #0]
 8001ef2:	bf08      	it	eq
 8001ef4:	694b      	ldreq	r3, [r1, #20]
 8001ef6:	600f      	str	r7, [r1, #0]
 8001ef8:	bf18      	it	ne
 8001efa:	2300      	movne	r3, #0
 8001efc:	1bf6      	subs	r6, r6, r7
 8001efe:	608b      	str	r3, [r1, #8]
 8001f00:	2e00      	cmp	r6, #0
 8001f02:	ddeb      	ble.n	8001edc <__sflush_r+0xac>
 8001f04:	6a21      	ldr	r1, [r4, #32]
 8001f06:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001f0a:	4633      	mov	r3, r6
 8001f0c:	463a      	mov	r2, r7
 8001f0e:	4628      	mov	r0, r5
 8001f10:	47e0      	blx	ip
 8001f12:	2800      	cmp	r0, #0
 8001f14:	dc07      	bgt.n	8001f26 <__sflush_r+0xf6>
 8001f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f1e:	81a3      	strh	r3, [r4, #12]
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295
 8001f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f26:	4407      	add	r7, r0
 8001f28:	1a36      	subs	r6, r6, r0
 8001f2a:	e7e9      	b.n	8001f00 <__sflush_r+0xd0>
 8001f2c:	20400001 	.word	0x20400001

08001f30 <_fflush_r>:
 8001f30:	b538      	push	{r3, r4, r5, lr}
 8001f32:	690b      	ldr	r3, [r1, #16]
 8001f34:	4605      	mov	r5, r0
 8001f36:	460c      	mov	r4, r1
 8001f38:	b913      	cbnz	r3, 8001f40 <_fflush_r+0x10>
 8001f3a:	2500      	movs	r5, #0
 8001f3c:	4628      	mov	r0, r5
 8001f3e:	bd38      	pop	{r3, r4, r5, pc}
 8001f40:	b118      	cbz	r0, 8001f4a <_fflush_r+0x1a>
 8001f42:	6a03      	ldr	r3, [r0, #32]
 8001f44:	b90b      	cbnz	r3, 8001f4a <_fflush_r+0x1a>
 8001f46:	f7ff faa7 	bl	8001498 <__sinit>
 8001f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f3      	beq.n	8001f3a <_fflush_r+0xa>
 8001f52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001f54:	07d0      	lsls	r0, r2, #31
 8001f56:	d404      	bmi.n	8001f62 <_fflush_r+0x32>
 8001f58:	0599      	lsls	r1, r3, #22
 8001f5a:	d402      	bmi.n	8001f62 <_fflush_r+0x32>
 8001f5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f5e:	f7ff fba0 	bl	80016a2 <__retarget_lock_acquire_recursive>
 8001f62:	4628      	mov	r0, r5
 8001f64:	4621      	mov	r1, r4
 8001f66:	f7ff ff63 	bl	8001e30 <__sflush_r>
 8001f6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001f6c:	07da      	lsls	r2, r3, #31
 8001f6e:	4605      	mov	r5, r0
 8001f70:	d4e4      	bmi.n	8001f3c <_fflush_r+0xc>
 8001f72:	89a3      	ldrh	r3, [r4, #12]
 8001f74:	059b      	lsls	r3, r3, #22
 8001f76:	d4e1      	bmi.n	8001f3c <_fflush_r+0xc>
 8001f78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f7a:	f7ff fb93 	bl	80016a4 <__retarget_lock_release_recursive>
 8001f7e:	e7dd      	b.n	8001f3c <_fflush_r+0xc>

08001f80 <__swbuf_r>:
 8001f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f82:	460e      	mov	r6, r1
 8001f84:	4614      	mov	r4, r2
 8001f86:	4605      	mov	r5, r0
 8001f88:	b118      	cbz	r0, 8001f92 <__swbuf_r+0x12>
 8001f8a:	6a03      	ldr	r3, [r0, #32]
 8001f8c:	b90b      	cbnz	r3, 8001f92 <__swbuf_r+0x12>
 8001f8e:	f7ff fa83 	bl	8001498 <__sinit>
 8001f92:	69a3      	ldr	r3, [r4, #24]
 8001f94:	60a3      	str	r3, [r4, #8]
 8001f96:	89a3      	ldrh	r3, [r4, #12]
 8001f98:	071a      	lsls	r2, r3, #28
 8001f9a:	d501      	bpl.n	8001fa0 <__swbuf_r+0x20>
 8001f9c:	6923      	ldr	r3, [r4, #16]
 8001f9e:	b943      	cbnz	r3, 8001fb2 <__swbuf_r+0x32>
 8001fa0:	4621      	mov	r1, r4
 8001fa2:	4628      	mov	r0, r5
 8001fa4:	f000 f82a 	bl	8001ffc <__swsetup_r>
 8001fa8:	b118      	cbz	r0, 8001fb2 <__swbuf_r+0x32>
 8001faa:	f04f 37ff 	mov.w	r7, #4294967295
 8001fae:	4638      	mov	r0, r7
 8001fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fb2:	6823      	ldr	r3, [r4, #0]
 8001fb4:	6922      	ldr	r2, [r4, #16]
 8001fb6:	1a98      	subs	r0, r3, r2
 8001fb8:	6963      	ldr	r3, [r4, #20]
 8001fba:	b2f6      	uxtb	r6, r6
 8001fbc:	4283      	cmp	r3, r0
 8001fbe:	4637      	mov	r7, r6
 8001fc0:	dc05      	bgt.n	8001fce <__swbuf_r+0x4e>
 8001fc2:	4621      	mov	r1, r4
 8001fc4:	4628      	mov	r0, r5
 8001fc6:	f7ff ffb3 	bl	8001f30 <_fflush_r>
 8001fca:	2800      	cmp	r0, #0
 8001fcc:	d1ed      	bne.n	8001faa <__swbuf_r+0x2a>
 8001fce:	68a3      	ldr	r3, [r4, #8]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	60a3      	str	r3, [r4, #8]
 8001fd4:	6823      	ldr	r3, [r4, #0]
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	6022      	str	r2, [r4, #0]
 8001fda:	701e      	strb	r6, [r3, #0]
 8001fdc:	6962      	ldr	r2, [r4, #20]
 8001fde:	1c43      	adds	r3, r0, #1
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d004      	beq.n	8001fee <__swbuf_r+0x6e>
 8001fe4:	89a3      	ldrh	r3, [r4, #12]
 8001fe6:	07db      	lsls	r3, r3, #31
 8001fe8:	d5e1      	bpl.n	8001fae <__swbuf_r+0x2e>
 8001fea:	2e0a      	cmp	r6, #10
 8001fec:	d1df      	bne.n	8001fae <__swbuf_r+0x2e>
 8001fee:	4621      	mov	r1, r4
 8001ff0:	4628      	mov	r0, r5
 8001ff2:	f7ff ff9d 	bl	8001f30 <_fflush_r>
 8001ff6:	2800      	cmp	r0, #0
 8001ff8:	d0d9      	beq.n	8001fae <__swbuf_r+0x2e>
 8001ffa:	e7d6      	b.n	8001faa <__swbuf_r+0x2a>

08001ffc <__swsetup_r>:
 8001ffc:	b538      	push	{r3, r4, r5, lr}
 8001ffe:	4b29      	ldr	r3, [pc, #164]	@ (80020a4 <__swsetup_r+0xa8>)
 8002000:	4605      	mov	r5, r0
 8002002:	6818      	ldr	r0, [r3, #0]
 8002004:	460c      	mov	r4, r1
 8002006:	b118      	cbz	r0, 8002010 <__swsetup_r+0x14>
 8002008:	6a03      	ldr	r3, [r0, #32]
 800200a:	b90b      	cbnz	r3, 8002010 <__swsetup_r+0x14>
 800200c:	f7ff fa44 	bl	8001498 <__sinit>
 8002010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002014:	0719      	lsls	r1, r3, #28
 8002016:	d422      	bmi.n	800205e <__swsetup_r+0x62>
 8002018:	06da      	lsls	r2, r3, #27
 800201a:	d407      	bmi.n	800202c <__swsetup_r+0x30>
 800201c:	2209      	movs	r2, #9
 800201e:	602a      	str	r2, [r5, #0]
 8002020:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002024:	81a3      	strh	r3, [r4, #12]
 8002026:	f04f 30ff 	mov.w	r0, #4294967295
 800202a:	e033      	b.n	8002094 <__swsetup_r+0x98>
 800202c:	0758      	lsls	r0, r3, #29
 800202e:	d512      	bpl.n	8002056 <__swsetup_r+0x5a>
 8002030:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002032:	b141      	cbz	r1, 8002046 <__swsetup_r+0x4a>
 8002034:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002038:	4299      	cmp	r1, r3
 800203a:	d002      	beq.n	8002042 <__swsetup_r+0x46>
 800203c:	4628      	mov	r0, r5
 800203e:	f7ff fb33 	bl	80016a8 <_free_r>
 8002042:	2300      	movs	r3, #0
 8002044:	6363      	str	r3, [r4, #52]	@ 0x34
 8002046:	89a3      	ldrh	r3, [r4, #12]
 8002048:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800204c:	81a3      	strh	r3, [r4, #12]
 800204e:	2300      	movs	r3, #0
 8002050:	6063      	str	r3, [r4, #4]
 8002052:	6923      	ldr	r3, [r4, #16]
 8002054:	6023      	str	r3, [r4, #0]
 8002056:	89a3      	ldrh	r3, [r4, #12]
 8002058:	f043 0308 	orr.w	r3, r3, #8
 800205c:	81a3      	strh	r3, [r4, #12]
 800205e:	6923      	ldr	r3, [r4, #16]
 8002060:	b94b      	cbnz	r3, 8002076 <__swsetup_r+0x7a>
 8002062:	89a3      	ldrh	r3, [r4, #12]
 8002064:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800206c:	d003      	beq.n	8002076 <__swsetup_r+0x7a>
 800206e:	4621      	mov	r1, r4
 8002070:	4628      	mov	r0, r5
 8002072:	f000 f84f 	bl	8002114 <__smakebuf_r>
 8002076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800207a:	f013 0201 	ands.w	r2, r3, #1
 800207e:	d00a      	beq.n	8002096 <__swsetup_r+0x9a>
 8002080:	2200      	movs	r2, #0
 8002082:	60a2      	str	r2, [r4, #8]
 8002084:	6962      	ldr	r2, [r4, #20]
 8002086:	4252      	negs	r2, r2
 8002088:	61a2      	str	r2, [r4, #24]
 800208a:	6922      	ldr	r2, [r4, #16]
 800208c:	b942      	cbnz	r2, 80020a0 <__swsetup_r+0xa4>
 800208e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002092:	d1c5      	bne.n	8002020 <__swsetup_r+0x24>
 8002094:	bd38      	pop	{r3, r4, r5, pc}
 8002096:	0799      	lsls	r1, r3, #30
 8002098:	bf58      	it	pl
 800209a:	6962      	ldrpl	r2, [r4, #20]
 800209c:	60a2      	str	r2, [r4, #8]
 800209e:	e7f4      	b.n	800208a <__swsetup_r+0x8e>
 80020a0:	2000      	movs	r0, #0
 80020a2:	e7f7      	b.n	8002094 <__swsetup_r+0x98>
 80020a4:	2000000c 	.word	0x2000000c

080020a8 <_sbrk_r>:
 80020a8:	b538      	push	{r3, r4, r5, lr}
 80020aa:	4d06      	ldr	r5, [pc, #24]	@ (80020c4 <_sbrk_r+0x1c>)
 80020ac:	2300      	movs	r3, #0
 80020ae:	4604      	mov	r4, r0
 80020b0:	4608      	mov	r0, r1
 80020b2:	602b      	str	r3, [r5, #0]
 80020b4:	f7fe faa4 	bl	8000600 <_sbrk>
 80020b8:	1c43      	adds	r3, r0, #1
 80020ba:	d102      	bne.n	80020c2 <_sbrk_r+0x1a>
 80020bc:	682b      	ldr	r3, [r5, #0]
 80020be:	b103      	cbz	r3, 80020c2 <_sbrk_r+0x1a>
 80020c0:	6023      	str	r3, [r4, #0]
 80020c2:	bd38      	pop	{r3, r4, r5, pc}
 80020c4:	200003d8 	.word	0x200003d8

080020c8 <__swhatbuf_r>:
 80020c8:	b570      	push	{r4, r5, r6, lr}
 80020ca:	460c      	mov	r4, r1
 80020cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020d0:	2900      	cmp	r1, #0
 80020d2:	b096      	sub	sp, #88	@ 0x58
 80020d4:	4615      	mov	r5, r2
 80020d6:	461e      	mov	r6, r3
 80020d8:	da0d      	bge.n	80020f6 <__swhatbuf_r+0x2e>
 80020da:	89a3      	ldrh	r3, [r4, #12]
 80020dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80020e0:	f04f 0100 	mov.w	r1, #0
 80020e4:	bf14      	ite	ne
 80020e6:	2340      	movne	r3, #64	@ 0x40
 80020e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80020ec:	2000      	movs	r0, #0
 80020ee:	6031      	str	r1, [r6, #0]
 80020f0:	602b      	str	r3, [r5, #0]
 80020f2:	b016      	add	sp, #88	@ 0x58
 80020f4:	bd70      	pop	{r4, r5, r6, pc}
 80020f6:	466a      	mov	r2, sp
 80020f8:	f000 f848 	bl	800218c <_fstat_r>
 80020fc:	2800      	cmp	r0, #0
 80020fe:	dbec      	blt.n	80020da <__swhatbuf_r+0x12>
 8002100:	9901      	ldr	r1, [sp, #4]
 8002102:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002106:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800210a:	4259      	negs	r1, r3
 800210c:	4159      	adcs	r1, r3
 800210e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002112:	e7eb      	b.n	80020ec <__swhatbuf_r+0x24>

08002114 <__smakebuf_r>:
 8002114:	898b      	ldrh	r3, [r1, #12]
 8002116:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002118:	079d      	lsls	r5, r3, #30
 800211a:	4606      	mov	r6, r0
 800211c:	460c      	mov	r4, r1
 800211e:	d507      	bpl.n	8002130 <__smakebuf_r+0x1c>
 8002120:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002124:	6023      	str	r3, [r4, #0]
 8002126:	6123      	str	r3, [r4, #16]
 8002128:	2301      	movs	r3, #1
 800212a:	6163      	str	r3, [r4, #20]
 800212c:	b003      	add	sp, #12
 800212e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002130:	ab01      	add	r3, sp, #4
 8002132:	466a      	mov	r2, sp
 8002134:	f7ff ffc8 	bl	80020c8 <__swhatbuf_r>
 8002138:	9f00      	ldr	r7, [sp, #0]
 800213a:	4605      	mov	r5, r0
 800213c:	4639      	mov	r1, r7
 800213e:	4630      	mov	r0, r6
 8002140:	f7ff fb1e 	bl	8001780 <_malloc_r>
 8002144:	b948      	cbnz	r0, 800215a <__smakebuf_r+0x46>
 8002146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800214a:	059a      	lsls	r2, r3, #22
 800214c:	d4ee      	bmi.n	800212c <__smakebuf_r+0x18>
 800214e:	f023 0303 	bic.w	r3, r3, #3
 8002152:	f043 0302 	orr.w	r3, r3, #2
 8002156:	81a3      	strh	r3, [r4, #12]
 8002158:	e7e2      	b.n	8002120 <__smakebuf_r+0xc>
 800215a:	89a3      	ldrh	r3, [r4, #12]
 800215c:	6020      	str	r0, [r4, #0]
 800215e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002162:	81a3      	strh	r3, [r4, #12]
 8002164:	9b01      	ldr	r3, [sp, #4]
 8002166:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800216a:	b15b      	cbz	r3, 8002184 <__smakebuf_r+0x70>
 800216c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002170:	4630      	mov	r0, r6
 8002172:	f000 f81d 	bl	80021b0 <_isatty_r>
 8002176:	b128      	cbz	r0, 8002184 <__smakebuf_r+0x70>
 8002178:	89a3      	ldrh	r3, [r4, #12]
 800217a:	f023 0303 	bic.w	r3, r3, #3
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	81a3      	strh	r3, [r4, #12]
 8002184:	89a3      	ldrh	r3, [r4, #12]
 8002186:	431d      	orrs	r5, r3
 8002188:	81a5      	strh	r5, [r4, #12]
 800218a:	e7cf      	b.n	800212c <__smakebuf_r+0x18>

0800218c <_fstat_r>:
 800218c:	b538      	push	{r3, r4, r5, lr}
 800218e:	4d07      	ldr	r5, [pc, #28]	@ (80021ac <_fstat_r+0x20>)
 8002190:	2300      	movs	r3, #0
 8002192:	4604      	mov	r4, r0
 8002194:	4608      	mov	r0, r1
 8002196:	4611      	mov	r1, r2
 8002198:	602b      	str	r3, [r5, #0]
 800219a:	f7fe fa0b 	bl	80005b4 <_fstat>
 800219e:	1c43      	adds	r3, r0, #1
 80021a0:	d102      	bne.n	80021a8 <_fstat_r+0x1c>
 80021a2:	682b      	ldr	r3, [r5, #0]
 80021a4:	b103      	cbz	r3, 80021a8 <_fstat_r+0x1c>
 80021a6:	6023      	str	r3, [r4, #0]
 80021a8:	bd38      	pop	{r3, r4, r5, pc}
 80021aa:	bf00      	nop
 80021ac:	200003d8 	.word	0x200003d8

080021b0 <_isatty_r>:
 80021b0:	b538      	push	{r3, r4, r5, lr}
 80021b2:	4d06      	ldr	r5, [pc, #24]	@ (80021cc <_isatty_r+0x1c>)
 80021b4:	2300      	movs	r3, #0
 80021b6:	4604      	mov	r4, r0
 80021b8:	4608      	mov	r0, r1
 80021ba:	602b      	str	r3, [r5, #0]
 80021bc:	f7fe fa09 	bl	80005d2 <_isatty>
 80021c0:	1c43      	adds	r3, r0, #1
 80021c2:	d102      	bne.n	80021ca <_isatty_r+0x1a>
 80021c4:	682b      	ldr	r3, [r5, #0]
 80021c6:	b103      	cbz	r3, 80021ca <_isatty_r+0x1a>
 80021c8:	6023      	str	r3, [r4, #0]
 80021ca:	bd38      	pop	{r3, r4, r5, pc}
 80021cc:	200003d8 	.word	0x200003d8

080021d0 <_init>:
 80021d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d2:	bf00      	nop
 80021d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021d6:	bc08      	pop	{r3}
 80021d8:	469e      	mov	lr, r3
 80021da:	4770      	bx	lr

080021dc <_fini>:
 80021dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021de:	bf00      	nop
 80021e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021e2:	bc08      	pop	{r3}
 80021e4:	469e      	mov	lr, r3
 80021e6:	4770      	bx	lr
