
stm32l4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008c4  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a70  08000a78  00001a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a70  08000a70  00001a78  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000a70  08000a70  00001a78  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000a70  08000a78  00001a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a70  08000a70  00001a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000a74  08000a74  00001a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00001a78  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b47  00000000  00000000  00001aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002cc  00000000  00000000  000025e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  000028b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008c  00000000  00000000  00002980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001fc7  00000000  00000000  00002a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000011ee  00000000  00000000  000049d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008f4b  00000000  00000000  00005bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000eb0c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000288  00000000  00000000  0000eb50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0000edd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000a58 	.word	0x08000a58

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000a58 	.word	0x08000a58

080001ec <delay>:
 */

#include <string.h>
#include "stm32l496xx.h"

void delay(){
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<250000; i++);
 80001f2:	2300      	movs	r3, #0
 80001f4:	607b      	str	r3, [r7, #4]
 80001f6:	e002      	b.n	80001fe <delay+0x12>
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	3301      	adds	r3, #1
 80001fc:	607b      	str	r3, [r7, #4]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	4a04      	ldr	r2, [pc, #16]	@ (8000214 <delay+0x28>)
 8000202:	4293      	cmp	r3, r2
 8000204:	d9f8      	bls.n	80001f8 <delay+0xc>
}
 8000206:	bf00      	nop
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	0003d08f 	.word	0x0003d08f

08000218 <main>:

int main(void){
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpio_led, gpio_btn;

	/* IMPORTANT - If one parameter is not configured (Example: GPIO_PinOPType here) , the register MAY be initialized with garbage values.
	* So it is better to initialize all registers to zero beforehand*/

	memset(&gpio_led, 0, sizeof(gpio_led)); /* #include <string.h>  */
 800021e:	f107 030c 	add.w	r3, r7, #12
 8000222:	220c      	movs	r2, #12
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f000 fbea 	bl	8000a00 <memset>
	memset(&gpio_btn, 0, sizeof(gpio_btn));
 800022c:	463b      	mov	r3, r7
 800022e:	220c      	movs	r2, #12
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f000 fbe4 	bl	8000a00 <memset>

	gpio_led.pGPIOx = GPIOB;
 8000238:	4b18      	ldr	r3, [pc, #96]	@ (800029c <main+0x84>)
 800023a:	60fb      	str	r3, [r7, #12]
	gpio_led.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800023c:	2307      	movs	r3, #7
 800023e:	743b      	strb	r3, [r7, #16]
	gpio_led.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000240:	2301      	movs	r3, #1
 8000242:	747b      	strb	r3, [r7, #17]
	gpio_led.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000244:	2302      	movs	r3, #2
 8000246:	74bb      	strb	r3, [r7, #18]
	gpio_led.GPIO_PinConfig.GPIO_PinOPType = GPIO_PO_TYPE_PP; //External pull up resistor for Open Drain
 8000248:	2300      	movs	r3, #0
 800024a:	753b      	strb	r3, [r7, #20]
	gpio_led.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800024c:	2300      	movs	r3, #0
 800024e:	74fb      	strb	r3, [r7, #19]

	gpio_btn.pGPIOx = GPIOC;
 8000250:	4b13      	ldr	r3, [pc, #76]	@ (80002a0 <main+0x88>)
 8000252:	603b      	str	r3, [r7, #0]
	gpio_btn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 8000254:	2308      	movs	r3, #8
 8000256:	713b      	strb	r3, [r7, #4]
	gpio_btn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000258:	2304      	movs	r3, #4
 800025a:	717b      	strb	r3, [r7, #5]
	gpio_btn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800025c:	2302      	movs	r3, #2
 800025e:	71bb      	strb	r3, [r7, #6]
	//gpio_btn.GPIO_PinConfig.GPIO_PinOPType = GPIO_PO_TYPE_PP; //Applicable only when the mode is output

	gpio_btn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU; //(L496ZG-P has Pull Down Resistor for PC13) Usually External pull up already available in Nucleo Board (Pull down in Discovery)
 8000260:	2301      	movs	r3, #1
 8000262:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOB, ENABLE);
 8000264:	2101      	movs	r1, #1
 8000266:	480d      	ldr	r0, [pc, #52]	@ (800029c <main+0x84>)
 8000268:	f000 f856 	bl	8000318 <GPIO_PeriClockControl>
	GPIO_PeriClockControl(GPIOC, ENABLE);
 800026c:	2101      	movs	r1, #1
 800026e:	480c      	ldr	r0, [pc, #48]	@ (80002a0 <main+0x88>)
 8000270:	f000 f852 	bl	8000318 <GPIO_PeriClockControl>

	GPIO_Init(&gpio_led);
 8000274:	f107 030c 	add.w	r3, r7, #12
 8000278:	4618      	mov	r0, r3
 800027a:	f000 f933 	bl	80004e4 <GPIO_Init>
	GPIO_Init(&gpio_btn);
 800027e:	463b      	mov	r3, r7
 8000280:	4618      	mov	r0, r3
 8000282:	f000 f92f 	bl	80004e4 <GPIO_Init>

	/*IRQ Configurations*/
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5, 15); //Optional in this application
 8000286:	210f      	movs	r1, #15
 8000288:	2017      	movs	r0, #23
 800028a:	f000 fb6b 	bl	8000964 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5, ENABLE);
 800028e:	2101      	movs	r1, #1
 8000290:	2017      	movs	r0, #23
 8000292:	f000 fae3 	bl	800085c <GPIO_IRQInterruptConfig>

	while(1);
 8000296:	bf00      	nop
 8000298:	e7fd      	b.n	8000296 <main+0x7e>
 800029a:	bf00      	nop
 800029c:	48000400 	.word	0x48000400
 80002a0:	48000800 	.word	0x48000800

080002a4 <EXTI9_5_IRQHandler>:
}

void EXTI9_5_IRQHandler(void)
{ //Over riding function from device starup file
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0

	delay();
 80002a8:	f7ff ffa0 	bl	80001ec <delay>
	GPIO_IRQHandling(GPIO_PIN_NO_8);
 80002ac:	2008      	movs	r0, #8
 80002ae:	f000 fb87 	bl	80009c0 <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOB, GPIO_PIN_NO_7);
 80002b2:	2107      	movs	r1, #7
 80002b4:	4802      	ldr	r0, [pc, #8]	@ (80002c0 <EXTI9_5_IRQHandler+0x1c>)
 80002b6:	f000 fabd 	bl	8000834 <GPIO_ToggleOutputPin>

}
 80002ba:	bf00      	nop
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	48000400 	.word	0x48000400

080002c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c4:	480d      	ldr	r0, [pc, #52]	@ (80002fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002cc:	480c      	ldr	r0, [pc, #48]	@ (8000300 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ce:	490d      	ldr	r1, [pc, #52]	@ (8000304 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000308 <LoopForever+0xe>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d4:	e002      	b.n	80002dc <LoopCopyDataInit>

080002d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002da:	3304      	adds	r3, #4

080002dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e0:	d3f9      	bcc.n	80002d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e2:	4a0a      	ldr	r2, [pc, #40]	@ (800030c <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000310 <LoopForever+0x16>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e8:	e001      	b.n	80002ee <LoopFillZerobss>

080002ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002ec:	3204      	adds	r2, #4

080002ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f0:	d3fb      	bcc.n	80002ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f2:	f000 fb8d 	bl	8000a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002f6:	f7ff ff8f 	bl	8000218 <main>

080002fa <LoopForever>:

LoopForever:
  b LoopForever
 80002fa:	e7fe      	b.n	80002fa <LoopForever>
  ldr   r0, =_estack
 80002fc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000304:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000308:	08000a78 	.word	0x08000a78
  ldr r2, =_sbss
 800030c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000310:	2000001c 	.word	0x2000001c

08000314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000314:	e7fe      	b.n	8000314 <ADC1_2_IRQHandler>
	...

08000318 <GPIO_PeriClockControl>:
 *
 * @Note:		-
 *****************************************************************************/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	460b      	mov	r3, r1
 8000322:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000324:	78fb      	ldrb	r3, [r7, #3]
 8000326:	2b01      	cmp	r3, #1
 8000328:	d162      	bne.n	80003f0 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA){
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000330:	d106      	bne.n	8000340 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000332:	4b63      	ldr	r3, [pc, #396]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 8000334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000336:	4a62      	ldr	r2, [pc, #392]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	64d3      	str	r3, [r2, #76]	@ 0x4c
		else if(pGPIOx == GPIOI){
			GPIOI_PCLK_DI();
		}

	}
}
 800033e:	e0b9      	b.n	80004b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB){
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4a60      	ldr	r2, [pc, #384]	@ (80004c4 <GPIO_PeriClockControl+0x1ac>)
 8000344:	4293      	cmp	r3, r2
 8000346:	d106      	bne.n	8000356 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000348:	4b5d      	ldr	r3, [pc, #372]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 800034a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800034c:	4a5c      	ldr	r2, [pc, #368]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 800034e:	f043 0302 	orr.w	r3, r3, #2
 8000352:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000354:	e0ae      	b.n	80004b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC){
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4a5b      	ldr	r2, [pc, #364]	@ (80004c8 <GPIO_PeriClockControl+0x1b0>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d106      	bne.n	800036c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800035e:	4b58      	ldr	r3, [pc, #352]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 8000360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000362:	4a57      	ldr	r2, [pc, #348]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 8000364:	f043 0304 	orr.w	r3, r3, #4
 8000368:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800036a:	e0a3      	b.n	80004b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD){
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a57      	ldr	r2, [pc, #348]	@ (80004cc <GPIO_PeriClockControl+0x1b4>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d106      	bne.n	8000382 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000374:	4b52      	ldr	r3, [pc, #328]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 8000376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000378:	4a51      	ldr	r2, [pc, #324]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 800037a:	f043 0308 	orr.w	r3, r3, #8
 800037e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000380:	e098      	b.n	80004b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE){
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4a52      	ldr	r2, [pc, #328]	@ (80004d0 <GPIO_PeriClockControl+0x1b8>)
 8000386:	4293      	cmp	r3, r2
 8000388:	d106      	bne.n	8000398 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800038a:	4b4d      	ldr	r3, [pc, #308]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 800038c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800038e:	4a4c      	ldr	r2, [pc, #304]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 8000390:	f043 0310 	orr.w	r3, r3, #16
 8000394:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000396:	e08d      	b.n	80004b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF){
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a4e      	ldr	r2, [pc, #312]	@ (80004d4 <GPIO_PeriClockControl+0x1bc>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d106      	bne.n	80003ae <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003a0:	4b47      	ldr	r3, [pc, #284]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 80003a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003a4:	4a46      	ldr	r2, [pc, #280]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 80003a6:	f043 0320 	orr.w	r3, r3, #32
 80003aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003ac:	e082      	b.n	80004b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG){
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4a49      	ldr	r2, [pc, #292]	@ (80004d8 <GPIO_PeriClockControl+0x1c0>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d106      	bne.n	80003c4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003b6:	4b42      	ldr	r3, [pc, #264]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 80003b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ba:	4a41      	ldr	r2, [pc, #260]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 80003bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003c2:	e077      	b.n	80004b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH){
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a45      	ldr	r2, [pc, #276]	@ (80004dc <GPIO_PeriClockControl+0x1c4>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d106      	bne.n	80003da <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003cc:	4b3c      	ldr	r3, [pc, #240]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 80003ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003d0:	4a3b      	ldr	r2, [pc, #236]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 80003d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003d8:	e06c      	b.n	80004b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI){
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a40      	ldr	r2, [pc, #256]	@ (80004e0 <GPIO_PeriClockControl+0x1c8>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d168      	bne.n	80004b4 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80003e2:	4b37      	ldr	r3, [pc, #220]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 80003e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003e6:	4a36      	ldr	r2, [pc, #216]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 80003e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003ee:	e061      	b.n	80004b4 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA){
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80003f6:	d106      	bne.n	8000406 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80003f8:	4b31      	ldr	r3, [pc, #196]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 80003fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003fc:	4a30      	ldr	r2, [pc, #192]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 80003fe:	f023 0301 	bic.w	r3, r3, #1
 8000402:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000404:	e056      	b.n	80004b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB){
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a2e      	ldr	r2, [pc, #184]	@ (80004c4 <GPIO_PeriClockControl+0x1ac>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d106      	bne.n	800041c <GPIO_PeriClockControl+0x104>
			GPIOA_PCLK_DI();
 800040e:	4b2c      	ldr	r3, [pc, #176]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000412:	4a2b      	ldr	r2, [pc, #172]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 8000414:	f023 0301 	bic.w	r3, r3, #1
 8000418:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800041a:	e04b      	b.n	80004b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC){
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4a2a      	ldr	r2, [pc, #168]	@ (80004c8 <GPIO_PeriClockControl+0x1b0>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d106      	bne.n	8000432 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000424:	4b26      	ldr	r3, [pc, #152]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 8000426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000428:	4a25      	ldr	r2, [pc, #148]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 800042a:	f023 0304 	bic.w	r3, r3, #4
 800042e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000430:	e040      	b.n	80004b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD){
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a25      	ldr	r2, [pc, #148]	@ (80004cc <GPIO_PeriClockControl+0x1b4>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d106      	bne.n	8000448 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 800043a:	4b21      	ldr	r3, [pc, #132]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800043e:	4a20      	ldr	r2, [pc, #128]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 8000440:	f023 0308 	bic.w	r3, r3, #8
 8000444:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000446:	e035      	b.n	80004b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE){
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4a21      	ldr	r2, [pc, #132]	@ (80004d0 <GPIO_PeriClockControl+0x1b8>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d106      	bne.n	800045e <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000450:	4b1b      	ldr	r3, [pc, #108]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 8000452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000454:	4a1a      	ldr	r2, [pc, #104]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 8000456:	f023 0310 	bic.w	r3, r3, #16
 800045a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800045c:	e02a      	b.n	80004b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF){
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a1c      	ldr	r2, [pc, #112]	@ (80004d4 <GPIO_PeriClockControl+0x1bc>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d106      	bne.n	8000474 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000466:	4b16      	ldr	r3, [pc, #88]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 8000468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800046a:	4a15      	ldr	r2, [pc, #84]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 800046c:	f023 0320 	bic.w	r3, r3, #32
 8000470:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000472:	e01f      	b.n	80004b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG){
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4a18      	ldr	r2, [pc, #96]	@ (80004d8 <GPIO_PeriClockControl+0x1c0>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d106      	bne.n	800048a <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 800047c:	4b10      	ldr	r3, [pc, #64]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 800047e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000480:	4a0f      	ldr	r2, [pc, #60]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 8000482:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000486:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000488:	e014      	b.n	80004b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH){
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4a13      	ldr	r2, [pc, #76]	@ (80004dc <GPIO_PeriClockControl+0x1c4>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d106      	bne.n	80004a0 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000492:	4b0b      	ldr	r3, [pc, #44]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 8000494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000496:	4a0a      	ldr	r2, [pc, #40]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 8000498:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800049c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800049e:	e009      	b.n	80004b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI){
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4a0f      	ldr	r2, [pc, #60]	@ (80004e0 <GPIO_PeriClockControl+0x1c8>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d105      	bne.n	80004b4 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 80004a8:	4b05      	ldr	r3, [pc, #20]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 80004aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ac:	4a04      	ldr	r2, [pc, #16]	@ (80004c0 <GPIO_PeriClockControl+0x1a8>)
 80004ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80004b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004b4:	bf00      	nop
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000
 80004c4:	48000400 	.word	0x48000400
 80004c8:	48000800 	.word	0x48000800
 80004cc:	48000c00 	.word	0x48000c00
 80004d0:	48001000 	.word	0x48001000
 80004d4:	48001400 	.word	0x48001400
 80004d8:	48001800 	.word	0x48001800
 80004dc:	48001c00 	.word	0x48001c00
 80004e0:	48002000 	.word	0x48002000

080004e4 <GPIO_Init>:
/*Initializing GPIO with user's required configurations*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80004e4:	b480      	push	{r7}
 80004e6:	b087      	sub	sp, #28
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]

	uint32_t  temp=0; //Temporary register
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]

	//1. Configure the mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	795b      	ldrb	r3, [r3, #5]
 80004f4:	2b03      	cmp	r3, #3
 80004f6:	d820      	bhi.n	800053a <GPIO_Init+0x56>
		//Non-interrupt modes
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //2 bits for each pin number so multiply by 2
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	795b      	ldrb	r3, [r3, #5]
 80004fc:	461a      	mov	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	791b      	ldrb	r3, [r3, #4]
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	fa02 f303 	lsl.w	r3, r2, r3
 8000508:	617b      	str	r3, [r7, #20]
		//Clear required bit fields
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	791b      	ldrb	r3, [r3, #4]
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	2103      	movs	r1, #3
 8000518:	fa01 f303 	lsl.w	r3, r1, r3
 800051c:	43db      	mvns	r3, r3
 800051e:	4619      	mov	r1, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	400a      	ands	r2, r1
 8000526:	601a      	str	r2, [r3, #0]
		//Now store into actual register
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	6819      	ldr	r1, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	697a      	ldr	r2, [r7, #20]
 8000534:	430a      	orrs	r2, r1
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	e0d7      	b.n	80006ea <GPIO_Init+0x206>
		//Code later - Lecture 108

		/*IMPORTANT Change - To make sure that pin is configured as input, in L496 default is  Analog (0xFFFFFFFF)
		 * for other micro-controllers default might already be in input mode (0x00000000) ************************/

		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	791b      	ldrb	r3, [r3, #4]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	2103      	movs	r1, #3
 8000548:	fa01 f303 	lsl.w	r3, r1, r3
 800054c:	43db      	mvns	r3, r3
 800054e:	4619      	mov	r1, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	400a      	ands	r2, r1
 8000556:	601a      	str	r2, [r3, #0]

		/**********************************************************************************************************/

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	795b      	ldrb	r3, [r3, #5]
 800055c:	2b04      	cmp	r3, #4
 800055e:	d117      	bne.n	8000590 <GPIO_Init+0xac>
		{
			/*1. Configure FTSR1*/
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000560:	4b4a      	ldr	r3, [pc, #296]	@ (800068c <GPIO_Init+0x1a8>)
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	7912      	ldrb	r2, [r2, #4]
 8000568:	4611      	mov	r1, r2
 800056a:	2201      	movs	r2, #1
 800056c:	408a      	lsls	r2, r1
 800056e:	4611      	mov	r1, r2
 8000570:	4a46      	ldr	r2, [pc, #280]	@ (800068c <GPIO_Init+0x1a8>)
 8000572:	430b      	orrs	r3, r1
 8000574:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR1 bit
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000576:	4b45      	ldr	r3, [pc, #276]	@ (800068c <GPIO_Init+0x1a8>)
 8000578:	689b      	ldr	r3, [r3, #8]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	7912      	ldrb	r2, [r2, #4]
 800057e:	4611      	mov	r1, r2
 8000580:	2201      	movs	r2, #1
 8000582:	408a      	lsls	r2, r1
 8000584:	43d2      	mvns	r2, r2
 8000586:	4611      	mov	r1, r2
 8000588:	4a40      	ldr	r2, [pc, #256]	@ (800068c <GPIO_Init+0x1a8>)
 800058a:	400b      	ands	r3, r1
 800058c:	6093      	str	r3, [r2, #8]
 800058e:	e035      	b.n	80005fc <GPIO_Init+0x118>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	795b      	ldrb	r3, [r3, #5]
 8000594:	2b05      	cmp	r3, #5
 8000596:	d117      	bne.n	80005c8 <GPIO_Init+0xe4>
		{
			/*1. Configure RTSR1*/
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000598:	4b3c      	ldr	r3, [pc, #240]	@ (800068c <GPIO_Init+0x1a8>)
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	7912      	ldrb	r2, [r2, #4]
 80005a0:	4611      	mov	r1, r2
 80005a2:	2201      	movs	r2, #1
 80005a4:	408a      	lsls	r2, r1
 80005a6:	4611      	mov	r1, r2
 80005a8:	4a38      	ldr	r2, [pc, #224]	@ (800068c <GPIO_Init+0x1a8>)
 80005aa:	430b      	orrs	r3, r1
 80005ac:	6093      	str	r3, [r2, #8]
			//Clear the corresponding FTSR1 bit
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ae:	4b37      	ldr	r3, [pc, #220]	@ (800068c <GPIO_Init+0x1a8>)
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	7912      	ldrb	r2, [r2, #4]
 80005b6:	4611      	mov	r1, r2
 80005b8:	2201      	movs	r2, #1
 80005ba:	408a      	lsls	r2, r1
 80005bc:	43d2      	mvns	r2, r2
 80005be:	4611      	mov	r1, r2
 80005c0:	4a32      	ldr	r2, [pc, #200]	@ (800068c <GPIO_Init+0x1a8>)
 80005c2:	400b      	ands	r3, r1
 80005c4:	60d3      	str	r3, [r2, #12]
 80005c6:	e019      	b.n	80005fc <GPIO_Init+0x118>

		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FRT)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	795b      	ldrb	r3, [r3, #5]
 80005cc:	2b06      	cmp	r3, #6
 80005ce:	d115      	bne.n	80005fc <GPIO_Init+0x118>
		{
			/*1. Configure both FTSR and RTSR, set both*/
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d0:	4b2e      	ldr	r3, [pc, #184]	@ (800068c <GPIO_Init+0x1a8>)
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	7912      	ldrb	r2, [r2, #4]
 80005d8:	4611      	mov	r1, r2
 80005da:	2201      	movs	r2, #1
 80005dc:	408a      	lsls	r2, r1
 80005de:	4611      	mov	r1, r2
 80005e0:	4a2a      	ldr	r2, [pc, #168]	@ (800068c <GPIO_Init+0x1a8>)
 80005e2:	430b      	orrs	r3, r1
 80005e4:	6093      	str	r3, [r2, #8]
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e6:	4b29      	ldr	r3, [pc, #164]	@ (800068c <GPIO_Init+0x1a8>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	7912      	ldrb	r2, [r2, #4]
 80005ee:	4611      	mov	r1, r2
 80005f0:	2201      	movs	r2, #1
 80005f2:	408a      	lsls	r2, r1
 80005f4:	4611      	mov	r1, r2
 80005f6:	4a25      	ldr	r2, [pc, #148]	@ (800068c <GPIO_Init+0x1a8>)
 80005f8:	430b      	orrs	r3, r1
 80005fa:	60d3      	str	r3, [r2, #12]
		}

		/*2. Configure the GPIO port selection in SYSCGF_EXTICR*/
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	791b      	ldrb	r3, [r3, #4]
 8000600:	089b      	lsrs	r3, r3, #2
 8000602:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	791b      	ldrb	r3, [r3, #4]
 8000608:	f003 0303 	and.w	r3, r3, #3
 800060c:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000616:	d04b      	beq.n	80006b0 <GPIO_Init+0x1cc>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a1c      	ldr	r2, [pc, #112]	@ (8000690 <GPIO_Init+0x1ac>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d032      	beq.n	8000688 <GPIO_Init+0x1a4>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a1b      	ldr	r2, [pc, #108]	@ (8000694 <GPIO_Init+0x1b0>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d02b      	beq.n	8000684 <GPIO_Init+0x1a0>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a19      	ldr	r2, [pc, #100]	@ (8000698 <GPIO_Init+0x1b4>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d024      	beq.n	8000680 <GPIO_Init+0x19c>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a18      	ldr	r2, [pc, #96]	@ (800069c <GPIO_Init+0x1b8>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d01d      	beq.n	800067c <GPIO_Init+0x198>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a16      	ldr	r2, [pc, #88]	@ (80006a0 <GPIO_Init+0x1bc>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d016      	beq.n	8000678 <GPIO_Init+0x194>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a15      	ldr	r2, [pc, #84]	@ (80006a4 <GPIO_Init+0x1c0>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d00f      	beq.n	8000674 <GPIO_Init+0x190>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a13      	ldr	r2, [pc, #76]	@ (80006a8 <GPIO_Init+0x1c4>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d008      	beq.n	8000670 <GPIO_Init+0x18c>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a12      	ldr	r2, [pc, #72]	@ (80006ac <GPIO_Init+0x1c8>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d101      	bne.n	800066c <GPIO_Init+0x188>
 8000668:	2308      	movs	r3, #8
 800066a:	e022      	b.n	80006b2 <GPIO_Init+0x1ce>
 800066c:	2300      	movs	r3, #0
 800066e:	e020      	b.n	80006b2 <GPIO_Init+0x1ce>
 8000670:	2307      	movs	r3, #7
 8000672:	e01e      	b.n	80006b2 <GPIO_Init+0x1ce>
 8000674:	2306      	movs	r3, #6
 8000676:	e01c      	b.n	80006b2 <GPIO_Init+0x1ce>
 8000678:	2305      	movs	r3, #5
 800067a:	e01a      	b.n	80006b2 <GPIO_Init+0x1ce>
 800067c:	2304      	movs	r3, #4
 800067e:	e018      	b.n	80006b2 <GPIO_Init+0x1ce>
 8000680:	2303      	movs	r3, #3
 8000682:	e016      	b.n	80006b2 <GPIO_Init+0x1ce>
 8000684:	2302      	movs	r3, #2
 8000686:	e014      	b.n	80006b2 <GPIO_Init+0x1ce>
 8000688:	2301      	movs	r3, #1
 800068a:	e012      	b.n	80006b2 <GPIO_Init+0x1ce>
 800068c:	40010400 	.word	0x40010400
 8000690:	48000400 	.word	0x48000400
 8000694:	48000800 	.word	0x48000800
 8000698:	48000c00 	.word	0x48000c00
 800069c:	48001000 	.word	0x48001000
 80006a0:	48001400 	.word	0x48001400
 80006a4:	48001800 	.word	0x48001800
 80006a8:	48001c00 	.word	0x48001c00
 80006ac:	48002000 	.word	0x48002000
 80006b0:	2300      	movs	r3, #0
 80006b2:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80006b4:	4b5c      	ldr	r3, [pc, #368]	@ (8000828 <GPIO_Init+0x344>)
 80006b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006b8:	4a5b      	ldr	r2, [pc, #364]	@ (8000828 <GPIO_Init+0x344>)
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	6613      	str	r3, [r2, #96]	@ 0x60
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 80006c0:	7c7a      	ldrb	r2, [r7, #17]
 80006c2:	7cbb      	ldrb	r3, [r7, #18]
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	fa02 f103 	lsl.w	r1, r2, r3
 80006ca:	4a58      	ldr	r2, [pc, #352]	@ (800082c <GPIO_Init+0x348>)
 80006cc:	7cfb      	ldrb	r3, [r7, #19]
 80006ce:	3302      	adds	r3, #2
 80006d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		/*3. Enable EXTI interrupt delivery mode using IMR */
		EXTI->IMR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006d4:	4b56      	ldr	r3, [pc, #344]	@ (8000830 <GPIO_Init+0x34c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	7912      	ldrb	r2, [r2, #4]
 80006dc:	4611      	mov	r1, r2
 80006de:	2201      	movs	r2, #1
 80006e0:	408a      	lsls	r2, r1
 80006e2:	4611      	mov	r1, r2
 80006e4:	4a52      	ldr	r2, [pc, #328]	@ (8000830 <GPIO_Init+0x34c>)
 80006e6:	430b      	orrs	r3, r1
 80006e8:	6013      	str	r3, [r2, #0]

	}

	//Reset value of temp
	temp=0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]

	//2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	799b      	ldrb	r3, [r3, #6]
 80006f2:	461a      	mov	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	791b      	ldrb	r3, [r3, #4]
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	689a      	ldr	r2, [r3, #8]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	791b      	ldrb	r3, [r3, #4]
 800070a:	4619      	mov	r1, r3
 800070c:	2303      	movs	r3, #3
 800070e:	408b      	lsls	r3, r1
 8000710:	43db      	mvns	r3, r3
 8000712:	4619      	mov	r1, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	400a      	ands	r2, r1
 800071a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	6899      	ldr	r1, [r3, #8]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	697a      	ldr	r2, [r7, #20]
 8000728:	430a      	orrs	r2, r1
 800072a:	609a      	str	r2, [r3, #8]

	temp=0;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]

	//3. Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	79db      	ldrb	r3, [r3, #7]
 8000734:	461a      	mov	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	791b      	ldrb	r3, [r3, #4]
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	fa02 f303 	lsl.w	r3, r2, r3
 8000740:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	68da      	ldr	r2, [r3, #12]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	791b      	ldrb	r3, [r3, #4]
 800074c:	4619      	mov	r1, r3
 800074e:	2303      	movs	r3, #3
 8000750:	408b      	lsls	r3, r1
 8000752:	43db      	mvns	r3, r3
 8000754:	4619      	mov	r1, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	400a      	ands	r2, r1
 800075c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	68d9      	ldr	r1, [r3, #12]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	697a      	ldr	r2, [r7, #20]
 800076a:	430a      	orrs	r2, r1
 800076c:	60da      	str	r2, [r3, #12]

	temp=0;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]

	//4. Configure the OPType
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	7a1b      	ldrb	r3, [r3, #8]
 8000776:	461a      	mov	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	791b      	ldrb	r3, [r3, #4]
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	685a      	ldr	r2, [r3, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	791b      	ldrb	r3, [r3, #4]
 800078c:	4619      	mov	r1, r3
 800078e:	2301      	movs	r3, #1
 8000790:	408b      	lsls	r3, r1
 8000792:	43db      	mvns	r3, r3
 8000794:	4619      	mov	r1, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	400a      	ands	r2, r1
 800079c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	6859      	ldr	r1, [r3, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	697a      	ldr	r2, [r7, #20]
 80007aa:	430a      	orrs	r2, r1
 80007ac:	605a      	str	r2, [r3, #4]

	temp=0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]

	//5. Configure AF
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	795b      	ldrb	r3, [r3, #5]
 80007b6:	2b02      	cmp	r3, #2
 80007b8:	d131      	bne.n	800081e <GPIO_Init+0x33a>

		uint8_t temp1, temp2; //Check Theory
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	791b      	ldrb	r3, [r3, #4]
 80007be:	08db      	lsrs	r3, r3, #3
 80007c0:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	791b      	ldrb	r3, [r3, #4]
 80007c6:	f003 0307 	and.w	r3, r3, #7
 80007ca:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0x0F << (4* temp2)); //Clearing
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	7c3a      	ldrb	r2, [r7, #16]
 80007d2:	3208      	adds	r2, #8
 80007d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	220f      	movs	r2, #15
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	43db      	mvns	r3, r3
 80007e4:	4618      	mov	r0, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	7c3a      	ldrb	r2, [r7, #16]
 80007ec:	4001      	ands	r1, r0
 80007ee:	3208      	adds	r2, #8
 80007f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2)); //Setting
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	7c3a      	ldrb	r2, [r7, #16]
 80007fa:	3208      	adds	r2, #8
 80007fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	7a5b      	ldrb	r3, [r3, #9]
 8000804:	461a      	mov	r2, r3
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	4618      	mov	r0, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	7c3a      	ldrb	r2, [r7, #16]
 8000816:	4301      	orrs	r1, r0
 8000818:	3208      	adds	r2, #8
 800081a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 800081e:	bf00      	nop
 8000820:	371c      	adds	r7, #28
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	40021000 	.word	0x40021000
 800082c:	40010000 	.word	0x40010000
 8000830:	40010400 	.word	0x40010400

08000834 <GPIO_ToggleOutputPin>:
{
	pGPIOx->ODR = Value;
}

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	695b      	ldr	r3, [r3, #20]
 8000844:	78fa      	ldrb	r2, [r7, #3]
 8000846:	2101      	movs	r1, #1
 8000848:	fa01 f202 	lsl.w	r2, r1, r2
 800084c:	405a      	eors	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	615a      	str	r2, [r3, #20]
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <GPIO_IRQInterruptConfig>:

void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	460a      	mov	r2, r1
 8000866:	71fb      	strb	r3, [r7, #7]
 8000868:	4613      	mov	r3, r2
 800086a:	71bb      	strb	r3, [r7, #6]
	//NVIC Registers data available in Cortex M4 generic user guide
	//Interrupt Set-Enable Registers (ISER) , Interrupt Clear-Enable Registers(ICER) and Interrupt Priority Registers (IPR) are to be used.

	if(EnorDi == ENABLE){
 800086c:	79bb      	ldrb	r3, [r7, #6]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d133      	bne.n	80008da <GPIO_IRQInterruptConfig+0x7e>

		if(IRQNumber <= 31){
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	2b1f      	cmp	r3, #31
 8000876:	d80a      	bhi.n	800088e <GPIO_IRQInterruptConfig+0x32>
			/*Program ISER0 Register*/
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000878:	4b34      	ldr	r3, [pc, #208]	@ (800094c <GPIO_IRQInterruptConfig+0xf0>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	79fa      	ldrb	r2, [r7, #7]
 800087e:	2101      	movs	r1, #1
 8000880:	fa01 f202 	lsl.w	r2, r1, r2
 8000884:	4611      	mov	r1, r2
 8000886:	4a31      	ldr	r2, [pc, #196]	@ (800094c <GPIO_IRQInterruptConfig+0xf0>)
 8000888:	430b      	orrs	r3, r1
 800088a:	6013      	str	r3, [r2, #0]
			/*Program ICER2 Register*/
			*NVIC_ICER2 |= (1 << (IRQNumber%64));
		}
	}

}
 800088c:	e059      	b.n	8000942 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber <= 64){
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2b1f      	cmp	r3, #31
 8000892:	d90f      	bls.n	80008b4 <GPIO_IRQInterruptConfig+0x58>
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	2b40      	cmp	r3, #64	@ 0x40
 8000898:	d80c      	bhi.n	80008b4 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber%32));
 800089a:	4b2d      	ldr	r3, [pc, #180]	@ (8000950 <GPIO_IRQInterruptConfig+0xf4>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	79fa      	ldrb	r2, [r7, #7]
 80008a0:	f002 021f 	and.w	r2, r2, #31
 80008a4:	2101      	movs	r1, #1
 80008a6:	fa01 f202 	lsl.w	r2, r1, r2
 80008aa:	4611      	mov	r1, r2
 80008ac:	4a28      	ldr	r2, [pc, #160]	@ (8000950 <GPIO_IRQInterruptConfig+0xf4>)
 80008ae:	430b      	orrs	r3, r1
 80008b0:	6013      	str	r3, [r2, #0]
 80008b2:	e046      	b.n	8000942 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 64 && IRQNumber <= 96){
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	2b40      	cmp	r3, #64	@ 0x40
 80008b8:	d943      	bls.n	8000942 <GPIO_IRQInterruptConfig+0xe6>
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	2b60      	cmp	r3, #96	@ 0x60
 80008be:	d840      	bhi.n	8000942 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber%64));
 80008c0:	4b24      	ldr	r3, [pc, #144]	@ (8000954 <GPIO_IRQInterruptConfig+0xf8>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	79fa      	ldrb	r2, [r7, #7]
 80008c6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80008ca:	2101      	movs	r1, #1
 80008cc:	fa01 f202 	lsl.w	r2, r1, r2
 80008d0:	4611      	mov	r1, r2
 80008d2:	4a20      	ldr	r2, [pc, #128]	@ (8000954 <GPIO_IRQInterruptConfig+0xf8>)
 80008d4:	430b      	orrs	r3, r1
 80008d6:	6013      	str	r3, [r2, #0]
}
 80008d8:	e033      	b.n	8000942 <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31){
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	2b1f      	cmp	r3, #31
 80008de:	d80a      	bhi.n	80008f6 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80008e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000958 <GPIO_IRQInterruptConfig+0xfc>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	79fa      	ldrb	r2, [r7, #7]
 80008e6:	2101      	movs	r1, #1
 80008e8:	fa01 f202 	lsl.w	r2, r1, r2
 80008ec:	4611      	mov	r1, r2
 80008ee:	4a1a      	ldr	r2, [pc, #104]	@ (8000958 <GPIO_IRQInterruptConfig+0xfc>)
 80008f0:	430b      	orrs	r3, r1
 80008f2:	6013      	str	r3, [r2, #0]
}
 80008f4:	e025      	b.n	8000942 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber <= 64){
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b1f      	cmp	r3, #31
 80008fa:	d90f      	bls.n	800091c <GPIO_IRQInterruptConfig+0xc0>
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	2b40      	cmp	r3, #64	@ 0x40
 8000900:	d80c      	bhi.n	800091c <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber%32));
 8000902:	4b16      	ldr	r3, [pc, #88]	@ (800095c <GPIO_IRQInterruptConfig+0x100>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	79fa      	ldrb	r2, [r7, #7]
 8000908:	f002 021f 	and.w	r2, r2, #31
 800090c:	2101      	movs	r1, #1
 800090e:	fa01 f202 	lsl.w	r2, r1, r2
 8000912:	4611      	mov	r1, r2
 8000914:	4a11      	ldr	r2, [pc, #68]	@ (800095c <GPIO_IRQInterruptConfig+0x100>)
 8000916:	430b      	orrs	r3, r1
 8000918:	6013      	str	r3, [r2, #0]
 800091a:	e012      	b.n	8000942 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 64 && IRQNumber <= 96){
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	2b40      	cmp	r3, #64	@ 0x40
 8000920:	d90f      	bls.n	8000942 <GPIO_IRQInterruptConfig+0xe6>
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	2b60      	cmp	r3, #96	@ 0x60
 8000926:	d80c      	bhi.n	8000942 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber%64));
 8000928:	4b0d      	ldr	r3, [pc, #52]	@ (8000960 <GPIO_IRQInterruptConfig+0x104>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	79fa      	ldrb	r2, [r7, #7]
 800092e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000932:	2101      	movs	r1, #1
 8000934:	fa01 f202 	lsl.w	r2, r1, r2
 8000938:	4611      	mov	r1, r2
 800093a:	4a09      	ldr	r2, [pc, #36]	@ (8000960 <GPIO_IRQInterruptConfig+0x104>)
 800093c:	430b      	orrs	r3, r1
 800093e:	6013      	str	r3, [r2, #0]
}
 8000940:	e7ff      	b.n	8000942 <GPIO_IRQInterruptConfig+0xe6>
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr
 800094c:	e000e100 	.word	0xe000e100
 8000950:	e000e104 	.word	0xe000e104
 8000954:	e000e108 	.word	0xe000e108
 8000958:	e000e180 	.word	0xe000e180
 800095c:	e000e184 	.word	0xe000e184
 8000960:	e000e188 	.word	0xe000e188

08000964 <GPIO_IRQPriorityConfig>:

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	460a      	mov	r2, r1
 800096e:	71fb      	strb	r3, [r7, #7]
 8000970:	4613      	mov	r3, r2
 8000972:	71bb      	strb	r3, [r7, #6]
	//1. Find out the IPR register
	uint8_t iprx = IRQNumber / 4;
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	089b      	lsrs	r3, r3, #2
 8000978:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	f003 0303 	and.w	r3, r3, #3
 8000980:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_bits = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED); //NO_PR_BITS_IMPLEMENTED is usually upper 4 bits of each section in STM
 8000982:	7bbb      	ldrb	r3, [r7, #14]
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	b2db      	uxtb	r3, r3
 8000988:	3304      	adds	r3, #4
 800098a:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASEADDR + (4 * iprx)) |=  (IRQPriority << shift_bits);
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	011b      	lsls	r3, r3, #4
 8000990:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000994:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	79b9      	ldrb	r1, [r7, #6]
 800099c:	7b7b      	ldrb	r3, [r7, #13]
 800099e:	fa01 f303 	lsl.w	r3, r1, r3
 80009a2:	4619      	mov	r1, r3
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	011b      	lsls	r3, r3, #4
 80009a8:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80009ac:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80009b0:	430a      	orrs	r2, r1
 80009b2:	601a      	str	r2, [r3, #0]

	/*Interrupt Priority when more IRQs have the same Priority
	 * Refer the below the web source for information:
	 * https://community.arm.com/arm-community-blogs/b/embedded-and-microcontrollers-blog/posts/cutting-through-the-confusion-with-arm-cortex-m-interrupt-priorities
	 * */
}
 80009b4:	bf00      	nop
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
	...

080009c0 <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber){
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]

	 /*Clear the EXTI PR register for the corresponding GPIO pin
	  * Actual ISR code has to be executed in the main user application code,
	  * over riding the .weak ISR implementations is the device startup code.*/

	if(EXTI->PR1 & (1 << PinNumber))
 80009ca:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <GPIO_IRQHandling+0x3c>)
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	79fa      	ldrb	r2, [r7, #7]
 80009d0:	2101      	movs	r1, #1
 80009d2:	fa01 f202 	lsl.w	r2, r1, r2
 80009d6:	4013      	ands	r3, r2
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d009      	beq.n	80009f0 <GPIO_IRQHandling+0x30>
	{
		// This bit is cleared by writing a ‘1’ to the bit. As per RM
		EXTI->PR1 |= (1 << PinNumber);
 80009dc:	4b07      	ldr	r3, [pc, #28]	@ (80009fc <GPIO_IRQHandling+0x3c>)
 80009de:	695b      	ldr	r3, [r3, #20]
 80009e0:	79fa      	ldrb	r2, [r7, #7]
 80009e2:	2101      	movs	r1, #1
 80009e4:	fa01 f202 	lsl.w	r2, r1, r2
 80009e8:	4611      	mov	r1, r2
 80009ea:	4a04      	ldr	r2, [pc, #16]	@ (80009fc <GPIO_IRQHandling+0x3c>)
 80009ec:	430b      	orrs	r3, r1
 80009ee:	6153      	str	r3, [r2, #20]
	}

}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40010400 	.word	0x40010400

08000a00 <memset>:
 8000a00:	4402      	add	r2, r0
 8000a02:	4603      	mov	r3, r0
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d100      	bne.n	8000a0a <memset+0xa>
 8000a08:	4770      	bx	lr
 8000a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8000a0e:	e7f9      	b.n	8000a04 <memset+0x4>

08000a10 <__libc_init_array>:
 8000a10:	b570      	push	{r4, r5, r6, lr}
 8000a12:	4d0d      	ldr	r5, [pc, #52]	@ (8000a48 <__libc_init_array+0x38>)
 8000a14:	4c0d      	ldr	r4, [pc, #52]	@ (8000a4c <__libc_init_array+0x3c>)
 8000a16:	1b64      	subs	r4, r4, r5
 8000a18:	10a4      	asrs	r4, r4, #2
 8000a1a:	2600      	movs	r6, #0
 8000a1c:	42a6      	cmp	r6, r4
 8000a1e:	d109      	bne.n	8000a34 <__libc_init_array+0x24>
 8000a20:	4d0b      	ldr	r5, [pc, #44]	@ (8000a50 <__libc_init_array+0x40>)
 8000a22:	4c0c      	ldr	r4, [pc, #48]	@ (8000a54 <__libc_init_array+0x44>)
 8000a24:	f000 f818 	bl	8000a58 <_init>
 8000a28:	1b64      	subs	r4, r4, r5
 8000a2a:	10a4      	asrs	r4, r4, #2
 8000a2c:	2600      	movs	r6, #0
 8000a2e:	42a6      	cmp	r6, r4
 8000a30:	d105      	bne.n	8000a3e <__libc_init_array+0x2e>
 8000a32:	bd70      	pop	{r4, r5, r6, pc}
 8000a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a38:	4798      	blx	r3
 8000a3a:	3601      	adds	r6, #1
 8000a3c:	e7ee      	b.n	8000a1c <__libc_init_array+0xc>
 8000a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a42:	4798      	blx	r3
 8000a44:	3601      	adds	r6, #1
 8000a46:	e7f2      	b.n	8000a2e <__libc_init_array+0x1e>
 8000a48:	08000a70 	.word	0x08000a70
 8000a4c:	08000a70 	.word	0x08000a70
 8000a50:	08000a70 	.word	0x08000a70
 8000a54:	08000a74 	.word	0x08000a74

08000a58 <_init>:
 8000a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a5a:	bf00      	nop
 8000a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a5e:	bc08      	pop	{r3}
 8000a60:	469e      	mov	lr, r3
 8000a62:	4770      	bx	lr

08000a64 <_fini>:
 8000a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a66:	bf00      	nop
 8000a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a6a:	bc08      	pop	{r3}
 8000a6c:	469e      	mov	lr, r3
 8000a6e:	4770      	bx	lr
