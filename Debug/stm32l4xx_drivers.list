
stm32l4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bf0  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d9c  08000da4  00001da4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d9c  08000d9c  00001da4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000d9c  08000d9c  00001da4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000d9c  08000da4  00001da4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d9c  08000d9c  00001d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000da0  08000da0  00001da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001da4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00001da4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001da4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000141a  00000000  00000000  00001dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004be  00000000  00000000  000031e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000160  00000000  00000000  000036a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000fe  00000000  00000000  00003808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002408  00000000  00000000  00003906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a3d  00000000  00000000  00005d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000099c1  00000000  00000000  0000774b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001110c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004ec  00000000  00000000  00011150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0001163c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000d84 	.word	0x08000d84

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000d84 	.word	0x08000d84

080001ec <SPI1_GPIOInit>:
/*Arduino LED Pin*/
#define LED_PIN 	9


void SPI1_GPIOInit()
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80001f2:	4b14      	ldr	r3, [pc, #80]	@ (8000244 <SPI1_GPIOInit+0x58>)
 80001f4:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001f6:	2302      	movs	r3, #2
 80001f8:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80001fa:	2305      	movs	r3, #5
 80001fc:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_PO_TYPE_PP;
 80001fe:	2300      	movs	r3, #0
 8000200:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000202:	2300      	movs	r3, #0
 8000204:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000206:	2302      	movs	r3, #2
 8000208:	72bb      	strb	r3, [r7, #10]

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3; //SCLK
 800020a:	2303      	movs	r3, #3
 800020c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins); /* GPIO_Init operates only one pin at a time so call for every pin.*/
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	4618      	mov	r0, r3
 8000212:	f000 fa35 	bl	8000680 <GPIO_Init>

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5; //MOSI
 8000216:	2305      	movs	r3, #5
 8000218:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f000 fa2f 	bl	8000680 <GPIO_Init>

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4; //MISO
 8000222:	2304      	movs	r3, #4
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 fa29 	bl	8000680 <GPIO_Init>

	//Setup NSS manually - if working with internal setup
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0; //NSS
 800022e:	2300      	movs	r3, #0
 8000230:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 fa23 	bl	8000680 <GPIO_Init>

}
 800023a:	bf00      	nop
 800023c:	3710      	adds	r7, #16
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	48000400 	.word	0x48000400

08000248 <SPI1_Init>:

void SPI1_Init()
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI1handle;

	SPI1handle.pSPIx = SPI1;
 800024e:	4b0c      	ldr	r3, [pc, #48]	@ (8000280 <SPI1_Init+0x38>)
 8000250:	607b      	str	r3, [r7, #4]
	SPI1handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000252:	2301      	movs	r3, #1
 8000254:	727b      	strb	r3, [r7, #9]
	SPI1handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000256:	2301      	movs	r3, #1
 8000258:	723b      	strb	r3, [r7, #8]
	SPI1handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV16;
 800025a:	2303      	movs	r3, #3
 800025c:	72bb      	strb	r3, [r7, #10]
	SPI1handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800025e:	2307      	movs	r3, #7
 8000260:	72fb      	strb	r3, [r7, #11]
	SPI1handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000262:	2300      	movs	r3, #0
 8000264:	733b      	strb	r3, [r7, #12]
	SPI1handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000266:	2300      	movs	r3, #0
 8000268:	737b      	strb	r3, [r7, #13]
	SPI1handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management
 800026a:	2300      	movs	r3, #0
 800026c:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI1handle);
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	4618      	mov	r0, r3
 8000272:	f000 fc21 	bl	8000ab8 <SPI_Init>

}
 8000276:	bf00      	nop
 8000278:	3710      	adds	r7, #16
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40013000 	.word	0x40013000

08000284 <GPIO_Button_Init>:

void GPIO_Button_Init()
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpio_btn;


	gpio_btn.pGPIOx = GPIOC;
 800028a:	4b09      	ldr	r3, [pc, #36]	@ (80002b0 <GPIO_Button_Init+0x2c>)
 800028c:	607b      	str	r3, [r7, #4]
	gpio_btn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800028e:	230d      	movs	r3, #13
 8000290:	723b      	strb	r3, [r7, #8]
	gpio_btn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000292:	2300      	movs	r3, #0
 8000294:	727b      	strb	r3, [r7, #9]
	gpio_btn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000296:	2302      	movs	r3, #2
 8000298:	72bb      	strb	r3, [r7, #10]
	//gpio_btn.GPIO_PinConfig.GPIO_PinOPType = GPIO_PO_TYPE_PP; //Applicable only when the mode is output
	gpio_btn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD; //(Check for L496ZG - Pulled Down for PC13) Usuallu External pull up already available in Nucleo Board (Pull down in Discovery)
 800029a:	2300      	movs	r3, #0
 800029c:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&gpio_btn);
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 f9ed 	bl	8000680 <GPIO_Init>


}
 80002a6:	bf00      	nop
 80002a8:	3710      	adds	r7, #16
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	48000800 	.word	0x48000800

080002b4 <delay>:

void delay(){
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<250000; i++);
 80002ba:	2300      	movs	r3, #0
 80002bc:	607b      	str	r3, [r7, #4]
 80002be:	e002      	b.n	80002c6 <delay+0x12>
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	3301      	adds	r3, #1
 80002c4:	607b      	str	r3, [r7, #4]
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a04      	ldr	r2, [pc, #16]	@ (80002dc <delay+0x28>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d9f8      	bls.n	80002c0 <delay+0xc>
}
 80002ce:	bf00      	nop
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bc80      	pop	{r7}
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	0003d08f 	.word	0x0003d08f

080002e0 <SPI_VerifyResponse>:

uint8_t SPI_VerifyResponse(uint8_t ackbyte)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	71fb      	strb	r3, [r7, #7]
	if(ackbyte == 0xF5) //According to the client code
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	2bf5      	cmp	r3, #245	@ 0xf5
 80002ee:	d101      	bne.n	80002f4 <SPI_VerifyResponse+0x14>
	{
		//ACK
		return 1;
 80002f0:	2301      	movs	r3, #1
 80002f2:	e000      	b.n	80002f6 <SPI_VerifyResponse+0x16>
	}
	return 0;
 80002f4:	2300      	movs	r3, #0
}
 80002f6:	4618      	mov	r0, r3
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr

08000300 <main>:

int main(void){
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0

	/*SPI won't initiate the communication by itself to receive the ACK or NACK byte, so we have to send a dummy variable*/
	uint8_t dummy_write = 0xff;
 8000306:	23ff      	movs	r3, #255	@ 0xff
 8000308:	73fb      	strb	r3, [r7, #15]
	uint8_t dummy_read; /*When we read the  Data Register, RXNE flag will be automatically cleared.*/

	GPIO_Button_Init();
 800030a:	f7ff ffbb 	bl	8000284 <GPIO_Button_Init>

	SPI1_GPIOInit();
 800030e:	f7ff ff6d 	bl	80001ec <SPI1_GPIOInit>

	SPI1_Init();
 8000312:	f7ff ff99 	bl	8000248 <SPI1_Init>

	/*SS output is enabled in master mode and when the SPI interface is enabled in hardware mode.*/
	SPI_SSOEConfig(SPI1, ENABLE);
 8000316:	2101      	movs	r1, #1
 8000318:	484f      	ldr	r0, [pc, #316]	@ (8000458 <main+0x158>)
 800031a:	f000 fcd9 	bl	8000cd0 <SPI_SSOEConfig>

	while(1){

		while(!(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)));
 800031e:	bf00      	nop
 8000320:	210d      	movs	r1, #13
 8000322:	484e      	ldr	r0, [pc, #312]	@ (800045c <main+0x15c>)
 8000324:	f000 fb5a 	bl	80009dc <GPIO_ReadFromInputPin>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0f8      	beq.n	8000320 <main+0x20>

		delay();
 800032e:	f7ff ffc1 	bl	80002b4 <delay>

		SPI_FRXTHConfig(SPI1, ENABLE); /* Specific to L4 series, check SPI CR2 register*/
 8000332:	2101      	movs	r1, #1
 8000334:	4848      	ldr	r0, [pc, #288]	@ (8000458 <main+0x158>)
 8000336:	f000 fce6 	bl	8000d06 <SPI_FRXTHConfig>

		/*It recommended to configure all SPI parameters while its not active, when its active it will
		 * be performing communications continuously and will not accept any changes. So we have the set
		 * the SPE bit in CR1 at this stage*/
		SPI_Peripheral_Control(SPI1, ENABLE);
 800033a:	2101      	movs	r1, #1
 800033c:	4846      	ldr	r0, [pc, #280]	@ (8000458 <main+0x158>)
 800033e:	f000 fcac 	bl	8000c9a <SPI_Peripheral_Control>



		/*--------------- 1. CMD_LED_CTRL <pin no (1)>  <value(1)> ---------------*/

		uint8_t commandcode = CMD_LED_CTRL;
 8000342:	2350      	movs	r3, #80	@ 0x50
 8000344:	737b      	strb	r3, [r7, #13]
		uint8_t ackbyte;
		uint8_t args[2];


		SPI_SendData(SPI1, &commandcode, 1);
 8000346:	f107 030d 	add.w	r3, r7, #13
 800034a:	2201      	movs	r2, #1
 800034c:	4619      	mov	r1, r3
 800034e:	4842      	ldr	r0, [pc, #264]	@ (8000458 <main+0x158>)
 8000350:	f000 fc21 	bl	8000b96 <SPI_SendData>
		 * the  Data Register, RXNE flag will be automatically cleared.
		 *
		 * Reading the SPIx_DR register differs from reading a regular variable. The hardware is
		 * specifically designed to detect when read accesses are made to the SPIx_DR register and
		 *  respond accordingly by clearing the RXNE flag.*/
		SPI_ReceiveData(SPI1, &dummy_read, 1);
 8000354:	f107 030e 	add.w	r3, r7, #14
 8000358:	2201      	movs	r2, #1
 800035a:	4619      	mov	r1, r3
 800035c:	483e      	ldr	r0, [pc, #248]	@ (8000458 <main+0x158>)
 800035e:	f000 fc5b 	bl	8000c18 <SPI_ReceiveData>

		//Send dummy byte to fetch the response from the slave
		SPI_SendData(SPI1, &dummy_write, 1);
 8000362:	f107 030f 	add.w	r3, r7, #15
 8000366:	2201      	movs	r2, #1
 8000368:	4619      	mov	r1, r3
 800036a:	483b      	ldr	r0, [pc, #236]	@ (8000458 <main+0x158>)
 800036c:	f000 fc13 	bl	8000b96 <SPI_SendData>

		SPI_ReceiveData(SPI1, &ackbyte, 1);
 8000370:	f107 030c 	add.w	r3, r7, #12
 8000374:	2201      	movs	r2, #1
 8000376:	4619      	mov	r1, r3
 8000378:	4837      	ldr	r0, [pc, #220]	@ (8000458 <main+0x158>)
 800037a:	f000 fc4d 	bl	8000c18 <SPI_ReceiveData>

		if(SPI_VerifyResponse(ackbyte))
 800037e:	7b3b      	ldrb	r3, [r7, #12]
 8000380:	4618      	mov	r0, r3
 8000382:	f7ff ffad 	bl	80002e0 <SPI_VerifyResponse>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d00a      	beq.n	80003a2 <main+0xa2>
		{
			/*Send arguments if the response is ACK*/
			args[0] = LED_PIN;
 800038c:	2309      	movs	r3, #9
 800038e:	723b      	strb	r3, [r7, #8]
			args[1] = LED_ON;
 8000390:	2301      	movs	r3, #1
 8000392:	727b      	strb	r3, [r7, #9]
			SPI_SendData(SPI1, args, 2);
 8000394:	f107 0308 	add.w	r3, r7, #8
 8000398:	2202      	movs	r2, #2
 800039a:	4619      	mov	r1, r3
 800039c:	482e      	ldr	r0, [pc, #184]	@ (8000458 <main+0x158>)
 800039e:	f000 fbfa 	bl	8000b96 <SPI_SendData>
		}

		/*--------------- 2. CMD_SENSOR_READ <analog pin number(1)> ---------------*/

		while(!(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)));
 80003a2:	bf00      	nop
 80003a4:	210d      	movs	r1, #13
 80003a6:	482d      	ldr	r0, [pc, #180]	@ (800045c <main+0x15c>)
 80003a8:	f000 fb18 	bl	80009dc <GPIO_ReadFromInputPin>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0f8      	beq.n	80003a4 <main+0xa4>

		delay();
 80003b2:	f7ff ff7f 	bl	80002b4 <delay>

		commandcode = CMD_SENSOR_READ;
 80003b6:	2351      	movs	r3, #81	@ 0x51
 80003b8:	737b      	strb	r3, [r7, #13]

		SPI_SendData(SPI1, &commandcode, 1);
 80003ba:	f107 030d 	add.w	r3, r7, #13
 80003be:	2201      	movs	r2, #1
 80003c0:	4619      	mov	r1, r3
 80003c2:	4825      	ldr	r0, [pc, #148]	@ (8000458 <main+0x158>)
 80003c4:	f000 fbe7 	bl	8000b96 <SPI_SendData>

		SPI_ReceiveData(SPI1, &dummy_read, 1); //To clear RXNE
 80003c8:	f107 030e 	add.w	r3, r7, #14
 80003cc:	2201      	movs	r2, #1
 80003ce:	4619      	mov	r1, r3
 80003d0:	4821      	ldr	r0, [pc, #132]	@ (8000458 <main+0x158>)
 80003d2:	f000 fc21 	bl	8000c18 <SPI_ReceiveData>

		//Send dummy byte to fetch the response from the slave
		SPI_SendData(SPI1, &dummy_write, 1);
 80003d6:	f107 030f 	add.w	r3, r7, #15
 80003da:	2201      	movs	r2, #1
 80003dc:	4619      	mov	r1, r3
 80003de:	481e      	ldr	r0, [pc, #120]	@ (8000458 <main+0x158>)
 80003e0:	f000 fbd9 	bl	8000b96 <SPI_SendData>

		SPI_ReceiveData(SPI1, &ackbyte, 1);
 80003e4:	f107 030c 	add.w	r3, r7, #12
 80003e8:	2201      	movs	r2, #1
 80003ea:	4619      	mov	r1, r3
 80003ec:	481a      	ldr	r0, [pc, #104]	@ (8000458 <main+0x158>)
 80003ee:	f000 fc13 	bl	8000c18 <SPI_ReceiveData>

		if(SPI_VerifyResponse(ackbyte))
 80003f2:	7b3b      	ldrb	r3, [r7, #12]
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff ff73 	bl	80002e0 <SPI_VerifyResponse>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d017      	beq.n	8000430 <main+0x130>
		{
			/*Send arguments if the response is ACK*/
			args[0] = ANALOG_PIN_0;
 8000400:	2300      	movs	r3, #0
 8000402:	723b      	strb	r3, [r7, #8]
			SPI_SendData(SPI1, args, 2);
 8000404:	f107 0308 	add.w	r3, r7, #8
 8000408:	2202      	movs	r2, #2
 800040a:	4619      	mov	r1, r3
 800040c:	4812      	ldr	r0, [pc, #72]	@ (8000458 <main+0x158>)
 800040e:	f000 fbc2 	bl	8000b96 <SPI_SendData>

			/*Slave actually takes some time to read the analog value from the ADC, so master should wait
			 * for some time before generating the dummy bits to fetch the result, so add delay*/
			delay();
 8000412:	f7ff ff4f 	bl	80002b4 <delay>

			//Send dummy byte to fetch the response from the slave
			SPI_SendData(SPI1, &dummy_write, 1);
 8000416:	f107 030f 	add.w	r3, r7, #15
 800041a:	2201      	movs	r2, #1
 800041c:	4619      	mov	r1, r3
 800041e:	480e      	ldr	r0, [pc, #56]	@ (8000458 <main+0x158>)
 8000420:	f000 fbb9 	bl	8000b96 <SPI_SendData>
			uint8_t analog_read;
			SPI_ReceiveData(SPI1, &analog_read, 1);
 8000424:	1dfb      	adds	r3, r7, #7
 8000426:	2201      	movs	r2, #1
 8000428:	4619      	mov	r1, r3
 800042a:	480b      	ldr	r0, [pc, #44]	@ (8000458 <main+0x158>)
 800042c:	f000 fbf4 	bl	8000c18 <SPI_ReceiveData>
		}

		SPI_ReceiveData(SPI1, &dummy_read, 1); //To clear RXNE
 8000430:	f107 030e 	add.w	r3, r7, #14
 8000434:	2201      	movs	r2, #1
 8000436:	4619      	mov	r1, r3
 8000438:	4807      	ldr	r0, [pc, #28]	@ (8000458 <main+0x158>)
 800043a:	f000 fbed 	bl	8000c18 <SPI_ReceiveData>

		/*Confirm that SPI is not busy before disabling, full data may not be sent if closed abruptly*/
		while(SPI_GetFlagStatus(SPI1, SPI_BSY_FLAG));
 800043e:	bf00      	nop
 8000440:	2180      	movs	r1, #128	@ 0x80
 8000442:	4805      	ldr	r0, [pc, #20]	@ (8000458 <main+0x158>)
 8000444:	f000 fb94 	bl	8000b70 <SPI_GetFlagStatus>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d1f8      	bne.n	8000440 <main+0x140>


		SPI_Peripheral_Control(SPI1, DISABLE);
 800044e:	2100      	movs	r1, #0
 8000450:	4801      	ldr	r0, [pc, #4]	@ (8000458 <main+0x158>)
 8000452:	f000 fc22 	bl	8000c9a <SPI_Peripheral_Control>
	while(1){
 8000456:	e762      	b.n	800031e <main+0x1e>
 8000458:	40013000 	.word	0x40013000
 800045c:	48000800 	.word	0x48000800

08000460 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000460:	480d      	ldr	r0, [pc, #52]	@ (8000498 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000462:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000464:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000468:	480c      	ldr	r0, [pc, #48]	@ (800049c <LoopForever+0x6>)
  ldr r1, =_edata
 800046a:	490d      	ldr	r1, [pc, #52]	@ (80004a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800046c:	4a0d      	ldr	r2, [pc, #52]	@ (80004a4 <LoopForever+0xe>)
  movs r3, #0
 800046e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000470:	e002      	b.n	8000478 <LoopCopyDataInit>

08000472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000476:	3304      	adds	r3, #4

08000478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800047a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800047c:	d3f9      	bcc.n	8000472 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800047e:	4a0a      	ldr	r2, [pc, #40]	@ (80004a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000480:	4c0a      	ldr	r4, [pc, #40]	@ (80004ac <LoopForever+0x16>)
  movs r3, #0
 8000482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000484:	e001      	b.n	800048a <LoopFillZerobss>

08000486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000488:	3204      	adds	r2, #4

0800048a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800048a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800048c:	d3fb      	bcc.n	8000486 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800048e:	f000 fc55 	bl	8000d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000492:	f7ff ff35 	bl	8000300 <main>

08000496 <LoopForever>:

LoopForever:
  b LoopForever
 8000496:	e7fe      	b.n	8000496 <LoopForever>
  ldr   r0, =_estack
 8000498:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800049c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004a4:	08000da4 	.word	0x08000da4
  ldr r2, =_sbss
 80004a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004ac:	2000001c 	.word	0x2000001c

080004b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b0:	e7fe      	b.n	80004b0 <ADC1_2_IRQHandler>
	...

080004b4 <GPIO_PeriClockControl>:
 *
 * @Note:		-
 *****************************************************************************/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	460b      	mov	r3, r1
 80004be:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80004c0:	78fb      	ldrb	r3, [r7, #3]
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d162      	bne.n	800058c <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA){
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80004cc:	d106      	bne.n	80004dc <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80004ce:	4b63      	ldr	r3, [pc, #396]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 80004d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004d2:	4a62      	ldr	r2, [pc, #392]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
			GPIOI_PCLK_DI();
		}

	}

}
 80004da:	e0b9      	b.n	8000650 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB){
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a60      	ldr	r2, [pc, #384]	@ (8000660 <GPIO_PeriClockControl+0x1ac>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d106      	bne.n	80004f2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80004e4:	4b5d      	ldr	r3, [pc, #372]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 80004e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004e8:	4a5c      	ldr	r2, [pc, #368]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 80004ea:	f043 0302 	orr.w	r3, r3, #2
 80004ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004f0:	e0ae      	b.n	8000650 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC){
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4a5b      	ldr	r2, [pc, #364]	@ (8000664 <GPIO_PeriClockControl+0x1b0>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d106      	bne.n	8000508 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80004fa:	4b58      	ldr	r3, [pc, #352]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004fe:	4a57      	ldr	r2, [pc, #348]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 8000500:	f043 0304 	orr.w	r3, r3, #4
 8000504:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000506:	e0a3      	b.n	8000650 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD){
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4a57      	ldr	r2, [pc, #348]	@ (8000668 <GPIO_PeriClockControl+0x1b4>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d106      	bne.n	800051e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000510:	4b52      	ldr	r3, [pc, #328]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 8000512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000514:	4a51      	ldr	r2, [pc, #324]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 8000516:	f043 0308 	orr.w	r3, r3, #8
 800051a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800051c:	e098      	b.n	8000650 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE){
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4a52      	ldr	r2, [pc, #328]	@ (800066c <GPIO_PeriClockControl+0x1b8>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d106      	bne.n	8000534 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000526:	4b4d      	ldr	r3, [pc, #308]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052a:	4a4c      	ldr	r2, [pc, #304]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 800052c:	f043 0310 	orr.w	r3, r3, #16
 8000530:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000532:	e08d      	b.n	8000650 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF){
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4a4e      	ldr	r2, [pc, #312]	@ (8000670 <GPIO_PeriClockControl+0x1bc>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d106      	bne.n	800054a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800053c:	4b47      	ldr	r3, [pc, #284]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 800053e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000540:	4a46      	ldr	r2, [pc, #280]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 8000542:	f043 0320 	orr.w	r3, r3, #32
 8000546:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000548:	e082      	b.n	8000650 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG){
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4a49      	ldr	r2, [pc, #292]	@ (8000674 <GPIO_PeriClockControl+0x1c0>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d106      	bne.n	8000560 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000552:	4b42      	ldr	r3, [pc, #264]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000556:	4a41      	ldr	r2, [pc, #260]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 8000558:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800055c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800055e:	e077      	b.n	8000650 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH){
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4a45      	ldr	r2, [pc, #276]	@ (8000678 <GPIO_PeriClockControl+0x1c4>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d106      	bne.n	8000576 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000568:	4b3c      	ldr	r3, [pc, #240]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 800056a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056c:	4a3b      	ldr	r2, [pc, #236]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 800056e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000572:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000574:	e06c      	b.n	8000650 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI){
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4a40      	ldr	r2, [pc, #256]	@ (800067c <GPIO_PeriClockControl+0x1c8>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d168      	bne.n	8000650 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800057e:	4b37      	ldr	r3, [pc, #220]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000582:	4a36      	ldr	r2, [pc, #216]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 8000584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000588:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800058a:	e061      	b.n	8000650 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA){
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000592:	d106      	bne.n	80005a2 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000594:	4b31      	ldr	r3, [pc, #196]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 8000596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000598:	4a30      	ldr	r2, [pc, #192]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 800059a:	f023 0301 	bic.w	r3, r3, #1
 800059e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80005a0:	e056      	b.n	8000650 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB){
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a2e      	ldr	r2, [pc, #184]	@ (8000660 <GPIO_PeriClockControl+0x1ac>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d106      	bne.n	80005b8 <GPIO_PeriClockControl+0x104>
			GPIOA_PCLK_DI();
 80005aa:	4b2c      	ldr	r3, [pc, #176]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ae:	4a2b      	ldr	r2, [pc, #172]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 80005b0:	f023 0301 	bic.w	r3, r3, #1
 80005b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80005b6:	e04b      	b.n	8000650 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC){
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4a2a      	ldr	r2, [pc, #168]	@ (8000664 <GPIO_PeriClockControl+0x1b0>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d106      	bne.n	80005ce <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80005c0:	4b26      	ldr	r3, [pc, #152]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 80005c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c4:	4a25      	ldr	r2, [pc, #148]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 80005c6:	f023 0304 	bic.w	r3, r3, #4
 80005ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80005cc:	e040      	b.n	8000650 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD){
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4a25      	ldr	r2, [pc, #148]	@ (8000668 <GPIO_PeriClockControl+0x1b4>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d106      	bne.n	80005e4 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80005d6:	4b21      	ldr	r3, [pc, #132]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005da:	4a20      	ldr	r2, [pc, #128]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 80005dc:	f023 0308 	bic.w	r3, r3, #8
 80005e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80005e2:	e035      	b.n	8000650 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE){
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a21      	ldr	r2, [pc, #132]	@ (800066c <GPIO_PeriClockControl+0x1b8>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d106      	bne.n	80005fa <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 80005ec:	4b1b      	ldr	r3, [pc, #108]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 80005ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f0:	4a1a      	ldr	r2, [pc, #104]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 80005f2:	f023 0310 	bic.w	r3, r3, #16
 80005f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80005f8:	e02a      	b.n	8000650 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF){
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4a1c      	ldr	r2, [pc, #112]	@ (8000670 <GPIO_PeriClockControl+0x1bc>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d106      	bne.n	8000610 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000602:	4b16      	ldr	r3, [pc, #88]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000606:	4a15      	ldr	r2, [pc, #84]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 8000608:	f023 0320 	bic.w	r3, r3, #32
 800060c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800060e:	e01f      	b.n	8000650 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG){
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4a18      	ldr	r2, [pc, #96]	@ (8000674 <GPIO_PeriClockControl+0x1c0>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d106      	bne.n	8000626 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000618:	4b10      	ldr	r3, [pc, #64]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 800061a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061c:	4a0f      	ldr	r2, [pc, #60]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 800061e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000622:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000624:	e014      	b.n	8000650 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH){
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4a13      	ldr	r2, [pc, #76]	@ (8000678 <GPIO_PeriClockControl+0x1c4>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d106      	bne.n	800063c <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800062e:	4b0b      	ldr	r3, [pc, #44]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000632:	4a0a      	ldr	r2, [pc, #40]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 8000634:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000638:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800063a:	e009      	b.n	8000650 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI){
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a0f      	ldr	r2, [pc, #60]	@ (800067c <GPIO_PeriClockControl+0x1c8>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d105      	bne.n	8000650 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000644:	4b05      	ldr	r3, [pc, #20]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 8000646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000648:	4a04      	ldr	r2, [pc, #16]	@ (800065c <GPIO_PeriClockControl+0x1a8>)
 800064a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800064e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000
 8000660:	48000400 	.word	0x48000400
 8000664:	48000800 	.word	0x48000800
 8000668:	48000c00 	.word	0x48000c00
 800066c:	48001000 	.word	0x48001000
 8000670:	48001400 	.word	0x48001400
 8000674:	48001800 	.word	0x48001800
 8000678:	48001c00 	.word	0x48001c00
 800067c:	48002000 	.word	0x48002000

08000680 <GPIO_Init>:
/*Initializing GPIO with user's required configurations from GPIO_PinConfig_t*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

	/*Enable the peripheral clock so that its easy for the user - added later*/
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2101      	movs	r1, #1
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ff10 	bl	80004b4 <GPIO_PeriClockControl>

	uint32_t  temp=0; //Temporary register
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]

	//1. Configure the mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	795b      	ldrb	r3, [r3, #5]
 800069c:	2b03      	cmp	r3, #3
 800069e:	d820      	bhi.n	80006e2 <GPIO_Init+0x62>
		//Non-interrupt modes
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //2 bits for each pin number so multiply by 2
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	795b      	ldrb	r3, [r3, #5]
 80006a4:	461a      	mov	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	791b      	ldrb	r3, [r3, #4]
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	fa02 f303 	lsl.w	r3, r2, r3
 80006b0:	617b      	str	r3, [r7, #20]
		//Clear required bit fields
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	791b      	ldrb	r3, [r3, #4]
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	2103      	movs	r1, #3
 80006c0:	fa01 f303 	lsl.w	r3, r1, r3
 80006c4:	43db      	mvns	r3, r3
 80006c6:	4619      	mov	r1, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	400a      	ands	r2, r1
 80006ce:	601a      	str	r2, [r3, #0]
		//Now store into actual register
		pGPIOHandle->pGPIOx->MODER |= temp;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	6819      	ldr	r1, [r3, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	697a      	ldr	r2, [r7, #20]
 80006dc:	430a      	orrs	r2, r1
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	e0d7      	b.n	8000892 <GPIO_Init+0x212>
		//Code later - Lecture 108

		/*IMPORTANT Change - To make sure that pin is configured as input, in L496 default is  Analog (0xFFFFFFFF)
		 * for other micro-controllers default might already be in input mode (0x00000000) ************************/

		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	791b      	ldrb	r3, [r3, #4]
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	2103      	movs	r1, #3
 80006f0:	fa01 f303 	lsl.w	r3, r1, r3
 80006f4:	43db      	mvns	r3, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	400a      	ands	r2, r1
 80006fe:	601a      	str	r2, [r3, #0]

		/**********************************************************************************************************/

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	795b      	ldrb	r3, [r3, #5]
 8000704:	2b04      	cmp	r3, #4
 8000706:	d117      	bne.n	8000738 <GPIO_Init+0xb8>
		{
			/*1. Configure FTSR1*/
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000708:	4b4a      	ldr	r3, [pc, #296]	@ (8000834 <GPIO_Init+0x1b4>)
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	7912      	ldrb	r2, [r2, #4]
 8000710:	4611      	mov	r1, r2
 8000712:	2201      	movs	r2, #1
 8000714:	408a      	lsls	r2, r1
 8000716:	4611      	mov	r1, r2
 8000718:	4a46      	ldr	r2, [pc, #280]	@ (8000834 <GPIO_Init+0x1b4>)
 800071a:	430b      	orrs	r3, r1
 800071c:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR1 bit
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800071e:	4b45      	ldr	r3, [pc, #276]	@ (8000834 <GPIO_Init+0x1b4>)
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	7912      	ldrb	r2, [r2, #4]
 8000726:	4611      	mov	r1, r2
 8000728:	2201      	movs	r2, #1
 800072a:	408a      	lsls	r2, r1
 800072c:	43d2      	mvns	r2, r2
 800072e:	4611      	mov	r1, r2
 8000730:	4a40      	ldr	r2, [pc, #256]	@ (8000834 <GPIO_Init+0x1b4>)
 8000732:	400b      	ands	r3, r1
 8000734:	6093      	str	r3, [r2, #8]
 8000736:	e035      	b.n	80007a4 <GPIO_Init+0x124>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	795b      	ldrb	r3, [r3, #5]
 800073c:	2b05      	cmp	r3, #5
 800073e:	d117      	bne.n	8000770 <GPIO_Init+0xf0>
		{
			/*1. Configure RTSR1*/
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000740:	4b3c      	ldr	r3, [pc, #240]	@ (8000834 <GPIO_Init+0x1b4>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	7912      	ldrb	r2, [r2, #4]
 8000748:	4611      	mov	r1, r2
 800074a:	2201      	movs	r2, #1
 800074c:	408a      	lsls	r2, r1
 800074e:	4611      	mov	r1, r2
 8000750:	4a38      	ldr	r2, [pc, #224]	@ (8000834 <GPIO_Init+0x1b4>)
 8000752:	430b      	orrs	r3, r1
 8000754:	6093      	str	r3, [r2, #8]
			//Clear the corresponding FTSR1 bit
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000756:	4b37      	ldr	r3, [pc, #220]	@ (8000834 <GPIO_Init+0x1b4>)
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	7912      	ldrb	r2, [r2, #4]
 800075e:	4611      	mov	r1, r2
 8000760:	2201      	movs	r2, #1
 8000762:	408a      	lsls	r2, r1
 8000764:	43d2      	mvns	r2, r2
 8000766:	4611      	mov	r1, r2
 8000768:	4a32      	ldr	r2, [pc, #200]	@ (8000834 <GPIO_Init+0x1b4>)
 800076a:	400b      	ands	r3, r1
 800076c:	60d3      	str	r3, [r2, #12]
 800076e:	e019      	b.n	80007a4 <GPIO_Init+0x124>

		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FRT)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	795b      	ldrb	r3, [r3, #5]
 8000774:	2b06      	cmp	r3, #6
 8000776:	d115      	bne.n	80007a4 <GPIO_Init+0x124>
		{
			/*1. Configure both FTSR and RTSR, set both*/
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000778:	4b2e      	ldr	r3, [pc, #184]	@ (8000834 <GPIO_Init+0x1b4>)
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	7912      	ldrb	r2, [r2, #4]
 8000780:	4611      	mov	r1, r2
 8000782:	2201      	movs	r2, #1
 8000784:	408a      	lsls	r2, r1
 8000786:	4611      	mov	r1, r2
 8000788:	4a2a      	ldr	r2, [pc, #168]	@ (8000834 <GPIO_Init+0x1b4>)
 800078a:	430b      	orrs	r3, r1
 800078c:	6093      	str	r3, [r2, #8]
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800078e:	4b29      	ldr	r3, [pc, #164]	@ (8000834 <GPIO_Init+0x1b4>)
 8000790:	68db      	ldr	r3, [r3, #12]
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	7912      	ldrb	r2, [r2, #4]
 8000796:	4611      	mov	r1, r2
 8000798:	2201      	movs	r2, #1
 800079a:	408a      	lsls	r2, r1
 800079c:	4611      	mov	r1, r2
 800079e:	4a25      	ldr	r2, [pc, #148]	@ (8000834 <GPIO_Init+0x1b4>)
 80007a0:	430b      	orrs	r3, r1
 80007a2:	60d3      	str	r3, [r2, #12]
		}

		/*2. Configure the GPIO port selection in SYSCGF_EXTICR*/
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	791b      	ldrb	r3, [r3, #4]
 80007a8:	089b      	lsrs	r3, r3, #2
 80007aa:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	791b      	ldrb	r3, [r3, #4]
 80007b0:	f003 0303 	and.w	r3, r3, #3
 80007b4:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80007be:	d04b      	beq.n	8000858 <GPIO_Init+0x1d8>
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a1c      	ldr	r2, [pc, #112]	@ (8000838 <GPIO_Init+0x1b8>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d032      	beq.n	8000830 <GPIO_Init+0x1b0>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a1b      	ldr	r2, [pc, #108]	@ (800083c <GPIO_Init+0x1bc>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d02b      	beq.n	800082c <GPIO_Init+0x1ac>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a19      	ldr	r2, [pc, #100]	@ (8000840 <GPIO_Init+0x1c0>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d024      	beq.n	8000828 <GPIO_Init+0x1a8>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a18      	ldr	r2, [pc, #96]	@ (8000844 <GPIO_Init+0x1c4>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d01d      	beq.n	8000824 <GPIO_Init+0x1a4>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a16      	ldr	r2, [pc, #88]	@ (8000848 <GPIO_Init+0x1c8>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d016      	beq.n	8000820 <GPIO_Init+0x1a0>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a15      	ldr	r2, [pc, #84]	@ (800084c <GPIO_Init+0x1cc>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d00f      	beq.n	800081c <GPIO_Init+0x19c>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a13      	ldr	r2, [pc, #76]	@ (8000850 <GPIO_Init+0x1d0>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d008      	beq.n	8000818 <GPIO_Init+0x198>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a12      	ldr	r2, [pc, #72]	@ (8000854 <GPIO_Init+0x1d4>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d101      	bne.n	8000814 <GPIO_Init+0x194>
 8000810:	2308      	movs	r3, #8
 8000812:	e022      	b.n	800085a <GPIO_Init+0x1da>
 8000814:	2300      	movs	r3, #0
 8000816:	e020      	b.n	800085a <GPIO_Init+0x1da>
 8000818:	2307      	movs	r3, #7
 800081a:	e01e      	b.n	800085a <GPIO_Init+0x1da>
 800081c:	2306      	movs	r3, #6
 800081e:	e01c      	b.n	800085a <GPIO_Init+0x1da>
 8000820:	2305      	movs	r3, #5
 8000822:	e01a      	b.n	800085a <GPIO_Init+0x1da>
 8000824:	2304      	movs	r3, #4
 8000826:	e018      	b.n	800085a <GPIO_Init+0x1da>
 8000828:	2303      	movs	r3, #3
 800082a:	e016      	b.n	800085a <GPIO_Init+0x1da>
 800082c:	2302      	movs	r3, #2
 800082e:	e014      	b.n	800085a <GPIO_Init+0x1da>
 8000830:	2301      	movs	r3, #1
 8000832:	e012      	b.n	800085a <GPIO_Init+0x1da>
 8000834:	40010400 	.word	0x40010400
 8000838:	48000400 	.word	0x48000400
 800083c:	48000800 	.word	0x48000800
 8000840:	48000c00 	.word	0x48000c00
 8000844:	48001000 	.word	0x48001000
 8000848:	48001400 	.word	0x48001400
 800084c:	48001800 	.word	0x48001800
 8000850:	48001c00 	.word	0x48001c00
 8000854:	48002000 	.word	0x48002000
 8000858:	2300      	movs	r3, #0
 800085a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800085c:	4b5c      	ldr	r3, [pc, #368]	@ (80009d0 <GPIO_Init+0x350>)
 800085e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000860:	4a5b      	ldr	r2, [pc, #364]	@ (80009d0 <GPIO_Init+0x350>)
 8000862:	f043 0301 	orr.w	r3, r3, #1
 8000866:	6613      	str	r3, [r2, #96]	@ 0x60
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000868:	7c7a      	ldrb	r2, [r7, #17]
 800086a:	7cbb      	ldrb	r3, [r7, #18]
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	fa02 f103 	lsl.w	r1, r2, r3
 8000872:	4a58      	ldr	r2, [pc, #352]	@ (80009d4 <GPIO_Init+0x354>)
 8000874:	7cfb      	ldrb	r3, [r7, #19]
 8000876:	3302      	adds	r3, #2
 8000878:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		/*3. Enable EXTI interrupt delivery mode using IMR */
		EXTI->IMR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800087c:	4b56      	ldr	r3, [pc, #344]	@ (80009d8 <GPIO_Init+0x358>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	7912      	ldrb	r2, [r2, #4]
 8000884:	4611      	mov	r1, r2
 8000886:	2201      	movs	r2, #1
 8000888:	408a      	lsls	r2, r1
 800088a:	4611      	mov	r1, r2
 800088c:	4a52      	ldr	r2, [pc, #328]	@ (80009d8 <GPIO_Init+0x358>)
 800088e:	430b      	orrs	r3, r1
 8000890:	6013      	str	r3, [r2, #0]

	}

	//Reset value of temp
	temp=0;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]

	//2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	799b      	ldrb	r3, [r3, #6]
 800089a:	461a      	mov	r2, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	791b      	ldrb	r3, [r3, #4]
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	689a      	ldr	r2, [r3, #8]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	791b      	ldrb	r3, [r3, #4]
 80008b2:	4619      	mov	r1, r3
 80008b4:	2303      	movs	r3, #3
 80008b6:	408b      	lsls	r3, r1
 80008b8:	43db      	mvns	r3, r3
 80008ba:	4619      	mov	r1, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	400a      	ands	r2, r1
 80008c2:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	6899      	ldr	r1, [r3, #8]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	697a      	ldr	r2, [r7, #20]
 80008d0:	430a      	orrs	r2, r1
 80008d2:	609a      	str	r2, [r3, #8]

	temp=0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]

	//3. Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	79db      	ldrb	r3, [r3, #7]
 80008dc:	461a      	mov	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	791b      	ldrb	r3, [r3, #4]
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	68da      	ldr	r2, [r3, #12]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	791b      	ldrb	r3, [r3, #4]
 80008f4:	4619      	mov	r1, r3
 80008f6:	2303      	movs	r3, #3
 80008f8:	408b      	lsls	r3, r1
 80008fa:	43db      	mvns	r3, r3
 80008fc:	4619      	mov	r1, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	400a      	ands	r2, r1
 8000904:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	68d9      	ldr	r1, [r3, #12]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	697a      	ldr	r2, [r7, #20]
 8000912:	430a      	orrs	r2, r1
 8000914:	60da      	str	r2, [r3, #12]

	temp=0;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]

	//4. Configure the OPType
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	7a1b      	ldrb	r3, [r3, #8]
 800091e:	461a      	mov	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	791b      	ldrb	r3, [r3, #4]
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	685a      	ldr	r2, [r3, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	791b      	ldrb	r3, [r3, #4]
 8000934:	4619      	mov	r1, r3
 8000936:	2301      	movs	r3, #1
 8000938:	408b      	lsls	r3, r1
 800093a:	43db      	mvns	r3, r3
 800093c:	4619      	mov	r1, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	400a      	ands	r2, r1
 8000944:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	6859      	ldr	r1, [r3, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	697a      	ldr	r2, [r7, #20]
 8000952:	430a      	orrs	r2, r1
 8000954:	605a      	str	r2, [r3, #4]

	temp=0;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]

	//5. Configure AF
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	795b      	ldrb	r3, [r3, #5]
 800095e:	2b02      	cmp	r3, #2
 8000960:	d131      	bne.n	80009c6 <GPIO_Init+0x346>

		uint8_t temp1, temp2; //Check Theory
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	791b      	ldrb	r3, [r3, #4]
 8000966:	08db      	lsrs	r3, r3, #3
 8000968:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	791b      	ldrb	r3, [r3, #4]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0x0F << (4* temp2)); //Clearing
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	7c3a      	ldrb	r2, [r7, #16]
 800097a:	3208      	adds	r2, #8
 800097c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	220f      	movs	r2, #15
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43db      	mvns	r3, r3
 800098c:	4618      	mov	r0, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	7c3a      	ldrb	r2, [r7, #16]
 8000994:	4001      	ands	r1, r0
 8000996:	3208      	adds	r2, #8
 8000998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2)); //Setting
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	7c3a      	ldrb	r2, [r7, #16]
 80009a2:	3208      	adds	r2, #8
 80009a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	7a5b      	ldrb	r3, [r3, #9]
 80009ac:	461a      	mov	r2, r3
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	7c3a      	ldrb	r2, [r7, #16]
 80009be:	4301      	orrs	r1, r0
 80009c0:	3208      	adds	r2, #8
 80009c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 80009c6:	bf00      	nop
 80009c8:	3718      	adds	r7, #24
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40010000 	.word	0x40010000
 80009d8:	40010400 	.word	0x40010400

080009dc <GPIO_ReadFromInputPin>:
		GPIOI_REG_RESET();
	}
}

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	460b      	mov	r3, r1
 80009e6:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	//Right shifting the required pin state bit to LSB and then masking the remaining bits
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	691a      	ldr	r2, [r3, #16]
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	fa22 f303 	lsr.w	r3, r2, r3
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	73fb      	strb	r3, [r7, #15]
	return value;
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
	...

08000a08 <SPI_PeriClockControl>:

#include "stm32l496xx_spi.h"


void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000a14:	78fb      	ldrb	r3, [r7, #3]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d120      	bne.n	8000a5c <SPI_PeriClockControl+0x54>
		if(pSPIx == SPI1){
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a22      	ldr	r2, [pc, #136]	@ (8000aa8 <SPI_PeriClockControl+0xa0>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d106      	bne.n	8000a30 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000a22:	4b22      	ldr	r3, [pc, #136]	@ (8000aac <SPI_PeriClockControl+0xa4>)
 8000a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a26:	4a21      	ldr	r2, [pc, #132]	@ (8000aac <SPI_PeriClockControl+0xa4>)
 8000a28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a2c:	6613      	str	r3, [r2, #96]	@ 0x60
		else if(pSPIx == SPI3){
			SPI3_PCLK_DI();
		}

	}
}
 8000a2e:	e035      	b.n	8000a9c <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI2){
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a1f      	ldr	r2, [pc, #124]	@ (8000ab0 <SPI_PeriClockControl+0xa8>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d106      	bne.n	8000a46 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000a38:	4b1c      	ldr	r3, [pc, #112]	@ (8000aac <SPI_PeriClockControl+0xa4>)
 8000a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000aac <SPI_PeriClockControl+0xa4>)
 8000a3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a42:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000a44:	e02a      	b.n	8000a9c <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI3){
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a1a      	ldr	r2, [pc, #104]	@ (8000ab4 <SPI_PeriClockControl+0xac>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d126      	bne.n	8000a9c <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 8000a4e:	4b17      	ldr	r3, [pc, #92]	@ (8000aac <SPI_PeriClockControl+0xa4>)
 8000a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a52:	4a16      	ldr	r2, [pc, #88]	@ (8000aac <SPI_PeriClockControl+0xa4>)
 8000a54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a58:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000a5a:	e01f      	b.n	8000a9c <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1){
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a12      	ldr	r2, [pc, #72]	@ (8000aa8 <SPI_PeriClockControl+0xa0>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d106      	bne.n	8000a72 <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 8000a64:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <SPI_PeriClockControl+0xa4>)
 8000a66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a68:	4a10      	ldr	r2, [pc, #64]	@ (8000aac <SPI_PeriClockControl+0xa4>)
 8000a6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a6e:	6613      	str	r3, [r2, #96]	@ 0x60
}
 8000a70:	e014      	b.n	8000a9c <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI2){
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab0 <SPI_PeriClockControl+0xa8>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d106      	bne.n	8000a88 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <SPI_PeriClockControl+0xa4>)
 8000a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a7e:	4a0b      	ldr	r2, [pc, #44]	@ (8000aac <SPI_PeriClockControl+0xa4>)
 8000a80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000a84:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000a86:	e009      	b.n	8000a9c <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI3){
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <SPI_PeriClockControl+0xac>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d105      	bne.n	8000a9c <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8000a90:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <SPI_PeriClockControl+0xa4>)
 8000a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a94:	4a05      	ldr	r2, [pc, #20]	@ (8000aac <SPI_PeriClockControl+0xa4>)
 8000a96:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000a9a:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40013000 	.word	0x40013000
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40003800 	.word	0x40003800
 8000ab4:	40003c00 	.word	0x40003c00

08000ab8 <SPI_Init>:

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	/*Enable the peripheral clock so that its easy for the user*/
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff ff9e 	bl	8000a08 <SPI_PeriClockControl>
	/* Configure the SPI_CR1 register */

	uint32_t tempreg1 = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]

	/* 1. Configure the device mode */
	tempreg1 |= (pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSRT);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	791b      	ldrb	r3, [r3, #4]
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	60fb      	str	r3, [r7, #12]

	/* 2. Configure the bus configuration */
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	795b      	ldrb	r3, [r3, #5]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d104      	bne.n	8000aee <SPI_Init+0x36>
	{
		/* Clear the BIDI mode*/
		tempreg1 &= ~(1 << SPI_CR1_BIDIMODE);
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	e014      	b.n	8000b18 <SPI_Init+0x60>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	795b      	ldrb	r3, [r3, #5]
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d104      	bne.n	8000b00 <SPI_Init+0x48>
	{
		/* Enable the BIDI mode*/
		tempreg1 |= (1 << SPI_CR1_BIDIMODE);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	e00b      	b.n	8000b18 <SPI_Init+0x60>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	795b      	ldrb	r3, [r3, #5]
 8000b04:	2b03      	cmp	r3, #3
 8000b06:	d107      	bne.n	8000b18 <SPI_Init+0x60>
	{
		/* CLear the BIDI mode*/
		tempreg1 &= ~(1 << SPI_CR1_BIDIMODE);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000b0e:	60fb      	str	r3, [r7, #12]

		/*RXONLY bit must be set*/
		tempreg1 |= (1 << SPI_CR1_RXONLY);
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b16:	60fb      	str	r3, [r7, #12]
	}

	/*3. Configure the SPI serial clock speed*/
	tempreg1 |= (pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	799b      	ldrb	r3, [r3, #6]
 8000b1c:	00db      	lsls	r3, r3, #3
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	60fb      	str	r3, [r7, #12]

	/*4. Configure the DFF*/
	uint32_t tempreg2=0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
	tempreg2 |= (pSPIHandle->SPIConfig.SPI_DFF << SPI_CR2_DS);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	79db      	ldrb	r3, [r3, #7]
 8000b2c:	021b      	lsls	r3, r3, #8
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	60bb      	str	r3, [r7, #8]

	/*5. Configure the CPOL*/
	tempreg1 |= (pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	7a1b      	ldrb	r3, [r3, #8]
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	60fb      	str	r3, [r7, #12]

	/*6. Configure the CPHA*/
	tempreg1 |= (pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	7a5b      	ldrb	r3, [r3, #9]
 8000b44:	461a      	mov	r2, r3
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]

	/* 7. Configure SSM bit*/
	tempreg1 |= (pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	7a9b      	ldrb	r3, [r3, #10]
 8000b50:	025b      	lsls	r3, r3, #9
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg1;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	601a      	str	r2, [r3, #0]
	pSPIHandle->pSPIx->CR2 = tempreg2;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	68ba      	ldr	r2, [r7, #8]
 8000b66:	605a      	str	r2, [r3, #4]

}
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <SPI_GetFlagStatus>:
		}

}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t flagname) /* This function is an aid to the send and receive functions */
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
	/*Flag names have been defined with their respective position*/
	if(pSPIx->SR & flagname) // Masking with and operator
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	689a      	ldr	r2, [r3, #8]
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	4013      	ands	r3, r2
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e000      	b.n	8000b8c <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr

08000b96 <SPI_SendData>:

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b086      	sub	sp, #24
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	60f8      	str	r0, [r7, #12]
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
	while(len > 0)
 8000ba2:	e031      	b.n	8000c08 <SPI_SendData+0x72>
	{
		/* 1. Wait until TXE (TX Empty flag) is set -  Data should be loaded only when the TX Buffer is empty, else already existing data may be lost */
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET); //while( !(pSPIx->SR & (1 << 1)) );
 8000ba4:	bf00      	nop
 8000ba6:	2102      	movs	r1, #2
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	f7ff ffe1 	bl	8000b70 <SPI_GetFlagStatus>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d0f8      	beq.n	8000ba6 <SPI_SendData+0x10>
		//TODO: Configure other data sizes as well

		/*CUSTOM CODE LOGIC FOR 8 AND 16 BITS DS*/


		uint16_t tempvar = pSPIx->CR2;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	82fb      	strh	r3, [r7, #22]
		tempvar = (tempvar >> SPI_CR2_DS);
 8000bba:	8afb      	ldrh	r3, [r7, #22]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	82fb      	strh	r3, [r7, #22]
		/*The FRXTH bit that will be set for 8 bit SPI communication will be present
		 * in the CR2 register, so make sure that we take only the last 4 bits*/
		tempvar &= 0x0F;
 8000bc0:	8afb      	ldrh	r3, [r7, #22]
 8000bc2:	f003 030f 	and.w	r3, r3, #15
 8000bc6:	82fb      	strh	r3, [r7, #22]


		if(tempvar == SPI_DFF_16BITS) //16-bit mode
 8000bc8:	8afb      	ldrh	r3, [r7, #22]
 8000bca:	2b0f      	cmp	r3, #15
 8000bcc:	d10e      	bne.n	8000bec <SPI_SendData+0x56>
		{
			// Load the data onto the data register DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	60da      	str	r2, [r3, #12]
			len--;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	607b      	str	r3, [r7, #4]
			len--;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	3b01      	subs	r3, #1
 8000be2:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	3301      	adds	r3, #1
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	e00d      	b.n	8000c08 <SPI_SendData+0x72>

		}else if(tempvar == SPI_DFF_8BITS) //8-bit mode
 8000bec:	8afb      	ldrh	r3, [r7, #22]
 8000bee:	2b07      	cmp	r3, #7
 8000bf0:	d10a      	bne.n	8000c08 <SPI_SendData+0x72>
		{
			// Load the data onto the data register DR
			*(volatile uint8_t *)&pSPIx->DR = *(pTxBuffer); /* Refer http://efton.sk/STM32/gotcha/g22.html */
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	330c      	adds	r3, #12
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	7812      	ldrb	r2, [r2, #0]
 8000bfa:	701a      	strb	r2, [r3, #0]
			len--;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	3301      	adds	r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
	while(len > 0)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1ca      	bne.n	8000ba4 <SPI_SendData+0xe>

		}

	}

}
 8000c0e:	bf00      	nop
 8000c10:	bf00      	nop
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <SPI_ReceiveData>:
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t len)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
	while(len > 0)
 8000c24:	e031      	b.n	8000c8a <SPI_ReceiveData+0x72>
	{
		/* 1. Wait until RXNE (TX Empty flag) is set*/
		while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET);
 8000c26:	bf00      	nop
 8000c28:	2101      	movs	r1, #1
 8000c2a:	68f8      	ldr	r0, [r7, #12]
 8000c2c:	f7ff ffa0 	bl	8000b70 <SPI_GetFlagStatus>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d0f8      	beq.n	8000c28 <SPI_ReceiveData+0x10>
		/* 2. Check the Data Size(DFF) in CR2 register */

		//TODO: Configure other data sizes as well

		/*CUSTOM CODE LOGIC FOR 8 AND 16 BITS DS*/
		uint16_t tempvar = pSPIx->CR2;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	82fb      	strh	r3, [r7, #22]
		tempvar = (tempvar >> SPI_CR2_DS);
 8000c3c:	8afb      	ldrh	r3, [r7, #22]
 8000c3e:	0a1b      	lsrs	r3, r3, #8
 8000c40:	82fb      	strh	r3, [r7, #22]
		tempvar &= 0x0F; /* To get the last 4 bits, see logic in send data function*/
 8000c42:	8afb      	ldrh	r3, [r7, #22]
 8000c44:	f003 030f 	and.w	r3, r3, #15
 8000c48:	82fb      	strh	r3, [r7, #22]

		if(tempvar == SPI_DFF_16BITS) //16-bit mode
 8000c4a:	8afb      	ldrh	r3, [r7, #22]
 8000c4c:	2b0f      	cmp	r3, #15
 8000c4e:	d10e      	bne.n	8000c6e <SPI_ReceiveData+0x56>
		{
			// Load the data from DR RxBuffer address
			*((uint16_t*)pRxBuffer) = pSPIx->DR;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	801a      	strh	r2, [r3, #0]
			len--;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	607b      	str	r3, [r7, #4]
			len--;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	607b      	str	r3, [r7, #4]
			(uint16_t*)pRxBuffer++;
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	e00d      	b.n	8000c8a <SPI_ReceiveData+0x72>

		}else if(tempvar == SPI_DFF_8BITS) //8-bit mode
 8000c6e:	8afb      	ldrh	r3, [r7, #22]
 8000c70:	2b07      	cmp	r3, #7
 8000c72:	d10a      	bne.n	8000c8a <SPI_ReceiveData+0x72>
		{

			// Load the data from DR to the buffer
			*(pRxBuffer) = pSPIx->DR;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	701a      	strb	r2, [r3, #0]
			len--;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3b01      	subs	r3, #1
 8000c82:	607b      	str	r3, [r7, #4]
			pRxBuffer++;
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	3301      	adds	r3, #1
 8000c88:	60bb      	str	r3, [r7, #8]
	while(len > 0)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d1ca      	bne.n	8000c26 <SPI_ReceiveData+0xe>

		}

	}

}
 8000c90:	bf00      	nop
 8000c92:	bf00      	nop
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <SPI_Peripheral_Control>:

}


void SPI_Peripheral_Control(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000ca6:	78fb      	ldrb	r3, [r7, #3]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d106      	bne.n	8000cba <SPI_Peripheral_Control+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}

}
 8000cb8:	e005      	b.n	8000cc6 <SPI_Peripheral_Control+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	601a      	str	r2, [r3, #0]
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <SPI_SSOEConfig>:
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	460b      	mov	r3, r1
 8000cda:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000cdc:	78fb      	ldrb	r3, [r7, #3]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d106      	bne.n	8000cf0 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f043 0204 	orr.w	r2, r3, #4
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	605a      	str	r2, [r3, #4]
	}else{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000cee:	e005      	b.n	8000cfc <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f023 0204 	bic.w	r2, r3, #4
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	605a      	str	r2, [r3, #4]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr

08000d06 <SPI_FRXTHConfig>:



void SPI_FRXTHConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000d12:	78fb      	ldrb	r3, [r7, #3]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d106      	bne.n	8000d26 <SPI_FRXTHConfig+0x20>
		{
			pSPIx->CR2 |= (1 << SPI_CR2_FRXTH);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	605a      	str	r2, [r3, #4]
		}else{
			pSPIx->CR2 &= ~(1 << SPI_CR2_FRXTH);
		}
}
 8000d24:	e005      	b.n	8000d32 <SPI_FRXTHConfig+0x2c>
			pSPIx->CR2 &= ~(1 << SPI_CR2_FRXTH);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	605a      	str	r2, [r3, #4]
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <__libc_init_array>:
 8000d3c:	b570      	push	{r4, r5, r6, lr}
 8000d3e:	4d0d      	ldr	r5, [pc, #52]	@ (8000d74 <__libc_init_array+0x38>)
 8000d40:	4c0d      	ldr	r4, [pc, #52]	@ (8000d78 <__libc_init_array+0x3c>)
 8000d42:	1b64      	subs	r4, r4, r5
 8000d44:	10a4      	asrs	r4, r4, #2
 8000d46:	2600      	movs	r6, #0
 8000d48:	42a6      	cmp	r6, r4
 8000d4a:	d109      	bne.n	8000d60 <__libc_init_array+0x24>
 8000d4c:	4d0b      	ldr	r5, [pc, #44]	@ (8000d7c <__libc_init_array+0x40>)
 8000d4e:	4c0c      	ldr	r4, [pc, #48]	@ (8000d80 <__libc_init_array+0x44>)
 8000d50:	f000 f818 	bl	8000d84 <_init>
 8000d54:	1b64      	subs	r4, r4, r5
 8000d56:	10a4      	asrs	r4, r4, #2
 8000d58:	2600      	movs	r6, #0
 8000d5a:	42a6      	cmp	r6, r4
 8000d5c:	d105      	bne.n	8000d6a <__libc_init_array+0x2e>
 8000d5e:	bd70      	pop	{r4, r5, r6, pc}
 8000d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d64:	4798      	blx	r3
 8000d66:	3601      	adds	r6, #1
 8000d68:	e7ee      	b.n	8000d48 <__libc_init_array+0xc>
 8000d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d6e:	4798      	blx	r3
 8000d70:	3601      	adds	r6, #1
 8000d72:	e7f2      	b.n	8000d5a <__libc_init_array+0x1e>
 8000d74:	08000d9c 	.word	0x08000d9c
 8000d78:	08000d9c 	.word	0x08000d9c
 8000d7c:	08000d9c 	.word	0x08000d9c
 8000d80:	08000da0 	.word	0x08000da0

08000d84 <_init>:
 8000d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d86:	bf00      	nop
 8000d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d8a:	bc08      	pop	{r3}
 8000d8c:	469e      	mov	lr, r3
 8000d8e:	4770      	bx	lr

08000d90 <_fini>:
 8000d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d92:	bf00      	nop
 8000d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d96:	bc08      	pop	{r3}
 8000d98:	469e      	mov	lr, r3
 8000d9a:	4770      	bx	lr
