
stm32l4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000970  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b1c  08000b1c  00001b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b28  08000b28  00001b38  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000b28  08000b28  00001b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000b30  08000b38  00001b38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b30  08000b30  00001b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b34  08000b34  00001b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001b38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00001b38  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001280  00000000  00000000  00001b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003fa  00000000  00000000  00002de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  000031e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000dd  00000000  00000000  00003318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000023a6  00000000  00000000  000033f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000018b9  00000000  00000000  0000579b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009877  00000000  00000000  00007054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000108cb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000042c  00000000  00000000  00010910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00010d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000b04 	.word	0x08000b04

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000b04 	.word	0x08000b04

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <SPI1_GPIOInit>:

#include <string.h>
#include "stm32l496xx.h"

void SPI1_GPIOInit()
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000202:	4b0e      	ldr	r3, [pc, #56]	@ (800023c <SPI1_GPIOInit+0x40>)
 8000204:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000206:	2302      	movs	r3, #2
 8000208:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800020a:	2305      	movs	r3, #5
 800020c:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_PO_TYPE_PP;
 800020e:	2300      	movs	r3, #0
 8000210:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000212:	2300      	movs	r3, #0
 8000214:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000216:	2302      	movs	r3, #2
 8000218:	72bb      	strb	r3, [r7, #10]

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3; //SCLK
 800021a:	2303      	movs	r3, #3
 800021c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins); /* GPIO_Init operates only one pin at a time so call for every pin.*/
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f963 	bl	80004ec <GPIO_Init>

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5; //MOSI
 8000226:	2305      	movs	r3, #5
 8000228:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	4618      	mov	r0, r3
 800022e:	f000 f95d 	bl	80004ec <GPIO_Init>
	//GPIO_Init(&SPIPins);

	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0; //NSS
	//GPIO_Init(&SPIPins);

}
 8000232:	bf00      	nop
 8000234:	3710      	adds	r7, #16
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	48000400 	.word	0x48000400

08000240 <SPI1_Init>:

void SPI1_Init()
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI1handle;

	SPI1handle.pSPIx = SPI1;
 8000246:	4b0c      	ldr	r3, [pc, #48]	@ (8000278 <SPI1_Init+0x38>)
 8000248:	607b      	str	r3, [r7, #4]
	SPI1handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800024a:	2301      	movs	r3, #1
 800024c:	727b      	strb	r3, [r7, #9]
	SPI1handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800024e:	2301      	movs	r3, #1
 8000250:	723b      	strb	r3, [r7, #8]
	SPI1handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;
 8000252:	2300      	movs	r3, #0
 8000254:	72bb      	strb	r3, [r7, #10]
	SPI1handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000256:	2307      	movs	r3, #7
 8000258:	72fb      	strb	r3, [r7, #11]
	SPI1handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800025a:	2300      	movs	r3, #0
 800025c:	733b      	strb	r3, [r7, #12]
	SPI1handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800025e:	2300      	movs	r3, #0
 8000260:	737b      	strb	r3, [r7, #13]
	SPI1handle.SPIConfig.SPI_SSM = SPI_SSM_EN;
 8000262:	2301      	movs	r3, #1
 8000264:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI1handle);
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	4618      	mov	r0, r3
 800026a:	f000 fb45 	bl	80008f8 <SPI_Init>

}
 800026e:	bf00      	nop
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40013000 	.word	0x40013000

0800027c <main>:

int main(void){
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0

	char user_data[] = "Hello World";
 8000282:	4a10      	ldr	r2, [pc, #64]	@ (80002c4 <main+0x48>)
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	ca07      	ldmia	r2, {r0, r1, r2}
 8000288:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	SPI1_GPIOInit();
 800028c:	f7ff ffb6 	bl	80001fc <SPI1_GPIOInit>

	SPI1_Init();
 8000290:	f7ff ffd6 	bl	8000240 <SPI1_Init>

	/*See video 150 - This makes NSS signal internally high and avoids MODF error and MTSR register resetting*/
	SPI_SSIConfig(SPI1, ENABLE);
 8000294:	2101      	movs	r1, #1
 8000296:	480c      	ldr	r0, [pc, #48]	@ (80002c8 <main+0x4c>)
 8000298:	f000 fbf5 	bl	8000a86 <SPI_SSIConfig>


	/*It recommended to configure all SPI parameters while its not active, when its active it will
	 * be performing communications continuously and will not accept any changes. So we have the set
	 * the SPE bit in CR1 at this stage*/
	SPI_Peripheral_Control(SPI1, ENABLE);
 800029c:	2101      	movs	r1, #1
 800029e:	480a      	ldr	r0, [pc, #40]	@ (80002c8 <main+0x4c>)
 80002a0:	f000 fbd6 	bl	8000a50 <SPI_Peripheral_Control>

	SPI_SendData(SPI1, (uint8_t*)user_data, strlen(user_data));
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ffa0 	bl	80001ec <strlen>
 80002ac:	4602      	mov	r2, r0
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	4619      	mov	r1, r3
 80002b2:	4805      	ldr	r0, [pc, #20]	@ (80002c8 <main+0x4c>)
 80002b4:	f000 fb8f 	bl	80009d6 <SPI_SendData>

	SPI_Peripheral_Control(SPI1, DISABLE);
 80002b8:	2100      	movs	r1, #0
 80002ba:	4803      	ldr	r0, [pc, #12]	@ (80002c8 <main+0x4c>)
 80002bc:	f000 fbc8 	bl	8000a50 <SPI_Peripheral_Control>

	while(1);
 80002c0:	bf00      	nop
 80002c2:	e7fd      	b.n	80002c0 <main+0x44>
 80002c4:	08000b1c 	.word	0x08000b1c
 80002c8:	40013000 	.word	0x40013000

080002cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002cc:	480d      	ldr	r0, [pc, #52]	@ (8000304 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d4:	480c      	ldr	r0, [pc, #48]	@ (8000308 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d6:	490d      	ldr	r1, [pc, #52]	@ (800030c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000310 <LoopForever+0xe>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002dc:	e002      	b.n	80002e4 <LoopCopyDataInit>

080002de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e2:	3304      	adds	r3, #4

080002e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e8:	d3f9      	bcc.n	80002de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000314 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000318 <LoopForever+0x16>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f0:	e001      	b.n	80002f6 <LoopFillZerobss>

080002f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f4:	3204      	adds	r2, #4

080002f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f8:	d3fb      	bcc.n	80002f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fa:	f000 fbdf 	bl	8000abc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fe:	f7ff ffbd 	bl	800027c <main>

08000302 <LoopForever>:

LoopForever:
  b LoopForever
 8000302:	e7fe      	b.n	8000302 <LoopForever>
  ldr   r0, =_estack
 8000304:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800030c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000310:	08000b38 	.word	0x08000b38
  ldr r2, =_sbss
 8000314:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000318:	2000001c 	.word	0x2000001c

0800031c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800031c:	e7fe      	b.n	800031c <ADC1_2_IRQHandler>
	...

08000320 <GPIO_PeriClockControl>:
 *
 * @Note:		-
 *****************************************************************************/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	460b      	mov	r3, r1
 800032a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 800032c:	78fb      	ldrb	r3, [r7, #3]
 800032e:	2b01      	cmp	r3, #1
 8000330:	d162      	bne.n	80003f8 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA){
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000338:	d106      	bne.n	8000348 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800033a:	4b63      	ldr	r3, [pc, #396]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 800033c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800033e:	4a62      	ldr	r2, [pc, #392]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	64d3      	str	r3, [r2, #76]	@ 0x4c
		else if(pGPIOx == GPIOI){
			GPIOI_PCLK_DI();
		}

	}
}
 8000346:	e0b9      	b.n	80004bc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB){
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a60      	ldr	r2, [pc, #384]	@ (80004cc <GPIO_PeriClockControl+0x1ac>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d106      	bne.n	800035e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000350:	4b5d      	ldr	r3, [pc, #372]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 8000352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000354:	4a5c      	ldr	r2, [pc, #368]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 8000356:	f043 0302 	orr.w	r3, r3, #2
 800035a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800035c:	e0ae      	b.n	80004bc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC){
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a5b      	ldr	r2, [pc, #364]	@ (80004d0 <GPIO_PeriClockControl+0x1b0>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d106      	bne.n	8000374 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000366:	4b58      	ldr	r3, [pc, #352]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 8000368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800036a:	4a57      	ldr	r2, [pc, #348]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 800036c:	f043 0304 	orr.w	r3, r3, #4
 8000370:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000372:	e0a3      	b.n	80004bc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD){
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a57      	ldr	r2, [pc, #348]	@ (80004d4 <GPIO_PeriClockControl+0x1b4>)
 8000378:	4293      	cmp	r3, r2
 800037a:	d106      	bne.n	800038a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800037c:	4b52      	ldr	r3, [pc, #328]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 800037e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000380:	4a51      	ldr	r2, [pc, #324]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 8000382:	f043 0308 	orr.w	r3, r3, #8
 8000386:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000388:	e098      	b.n	80004bc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE){
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4a52      	ldr	r2, [pc, #328]	@ (80004d8 <GPIO_PeriClockControl+0x1b8>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d106      	bne.n	80003a0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000392:	4b4d      	ldr	r3, [pc, #308]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 8000394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000396:	4a4c      	ldr	r2, [pc, #304]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 8000398:	f043 0310 	orr.w	r3, r3, #16
 800039c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800039e:	e08d      	b.n	80004bc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF){
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4a4e      	ldr	r2, [pc, #312]	@ (80004dc <GPIO_PeriClockControl+0x1bc>)
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d106      	bne.n	80003b6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003a8:	4b47      	ldr	r3, [pc, #284]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 80003aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ac:	4a46      	ldr	r2, [pc, #280]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 80003ae:	f043 0320 	orr.w	r3, r3, #32
 80003b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003b4:	e082      	b.n	80004bc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG){
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4a49      	ldr	r2, [pc, #292]	@ (80004e0 <GPIO_PeriClockControl+0x1c0>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d106      	bne.n	80003cc <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003be:	4b42      	ldr	r3, [pc, #264]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 80003c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003c2:	4a41      	ldr	r2, [pc, #260]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 80003c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003ca:	e077      	b.n	80004bc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH){
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4a45      	ldr	r2, [pc, #276]	@ (80004e4 <GPIO_PeriClockControl+0x1c4>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d106      	bne.n	80003e2 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003d4:	4b3c      	ldr	r3, [pc, #240]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 80003d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003d8:	4a3b      	ldr	r2, [pc, #236]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 80003da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003de:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003e0:	e06c      	b.n	80004bc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI){
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a40      	ldr	r2, [pc, #256]	@ (80004e8 <GPIO_PeriClockControl+0x1c8>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d168      	bne.n	80004bc <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80003ea:	4b37      	ldr	r3, [pc, #220]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ee:	4a36      	ldr	r2, [pc, #216]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 80003f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003f6:	e061      	b.n	80004bc <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA){
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80003fe:	d106      	bne.n	800040e <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000400:	4b31      	ldr	r3, [pc, #196]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 8000402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000404:	4a30      	ldr	r2, [pc, #192]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 8000406:	f023 0301 	bic.w	r3, r3, #1
 800040a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800040c:	e056      	b.n	80004bc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB){
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4a2e      	ldr	r2, [pc, #184]	@ (80004cc <GPIO_PeriClockControl+0x1ac>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d106      	bne.n	8000424 <GPIO_PeriClockControl+0x104>
			GPIOA_PCLK_DI();
 8000416:	4b2c      	ldr	r3, [pc, #176]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 8000418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800041a:	4a2b      	ldr	r2, [pc, #172]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 800041c:	f023 0301 	bic.w	r3, r3, #1
 8000420:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000422:	e04b      	b.n	80004bc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC){
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a2a      	ldr	r2, [pc, #168]	@ (80004d0 <GPIO_PeriClockControl+0x1b0>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d106      	bne.n	800043a <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 800042c:	4b26      	ldr	r3, [pc, #152]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 800042e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000430:	4a25      	ldr	r2, [pc, #148]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 8000432:	f023 0304 	bic.w	r3, r3, #4
 8000436:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000438:	e040      	b.n	80004bc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD){
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a25      	ldr	r2, [pc, #148]	@ (80004d4 <GPIO_PeriClockControl+0x1b4>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d106      	bne.n	8000450 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000442:	4b21      	ldr	r3, [pc, #132]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 8000444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000446:	4a20      	ldr	r2, [pc, #128]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 8000448:	f023 0308 	bic.w	r3, r3, #8
 800044c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800044e:	e035      	b.n	80004bc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE){
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a21      	ldr	r2, [pc, #132]	@ (80004d8 <GPIO_PeriClockControl+0x1b8>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d106      	bne.n	8000466 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000458:	4b1b      	ldr	r3, [pc, #108]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 800045a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800045c:	4a1a      	ldr	r2, [pc, #104]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 800045e:	f023 0310 	bic.w	r3, r3, #16
 8000462:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000464:	e02a      	b.n	80004bc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF){
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a1c      	ldr	r2, [pc, #112]	@ (80004dc <GPIO_PeriClockControl+0x1bc>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d106      	bne.n	800047c <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 800046e:	4b16      	ldr	r3, [pc, #88]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 8000470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000472:	4a15      	ldr	r2, [pc, #84]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 8000474:	f023 0320 	bic.w	r3, r3, #32
 8000478:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800047a:	e01f      	b.n	80004bc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG){
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4a18      	ldr	r2, [pc, #96]	@ (80004e0 <GPIO_PeriClockControl+0x1c0>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d106      	bne.n	8000492 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000484:	4b10      	ldr	r3, [pc, #64]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 8000486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000488:	4a0f      	ldr	r2, [pc, #60]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 800048a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800048e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000490:	e014      	b.n	80004bc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH){
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4a13      	ldr	r2, [pc, #76]	@ (80004e4 <GPIO_PeriClockControl+0x1c4>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d106      	bne.n	80004a8 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800049a:	4b0b      	ldr	r3, [pc, #44]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 800049c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800049e:	4a0a      	ldr	r2, [pc, #40]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 80004a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004a6:	e009      	b.n	80004bc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI){
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4a0f      	ldr	r2, [pc, #60]	@ (80004e8 <GPIO_PeriClockControl+0x1c8>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d105      	bne.n	80004bc <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 80004b0:	4b05      	ldr	r3, [pc, #20]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 80004b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004b4:	4a04      	ldr	r2, [pc, #16]	@ (80004c8 <GPIO_PeriClockControl+0x1a8>)
 80004b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80004ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004bc:	bf00      	nop
 80004be:	370c      	adds	r7, #12
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	40021000 	.word	0x40021000
 80004cc:	48000400 	.word	0x48000400
 80004d0:	48000800 	.word	0x48000800
 80004d4:	48000c00 	.word	0x48000c00
 80004d8:	48001000 	.word	0x48001000
 80004dc:	48001400 	.word	0x48001400
 80004e0:	48001800 	.word	0x48001800
 80004e4:	48001c00 	.word	0x48001c00
 80004e8:	48002000 	.word	0x48002000

080004ec <GPIO_Init>:
/*Initializing GPIO with user's required configurations from GPIO_PinConfig_t*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]

	/*Enable the peripheral clock so that its easy for the user - added later*/
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2101      	movs	r1, #1
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff ff10 	bl	8000320 <GPIO_PeriClockControl>

	uint32_t  temp=0; //Temporary register
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]

	//1. Configure the mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	795b      	ldrb	r3, [r3, #5]
 8000508:	2b03      	cmp	r3, #3
 800050a:	d820      	bhi.n	800054e <GPIO_Init+0x62>
		//Non-interrupt modes
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //2 bits for each pin number so multiply by 2
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	795b      	ldrb	r3, [r3, #5]
 8000510:	461a      	mov	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	791b      	ldrb	r3, [r3, #4]
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	fa02 f303 	lsl.w	r3, r2, r3
 800051c:	617b      	str	r3, [r7, #20]
		//Clear required bit fields
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	791b      	ldrb	r3, [r3, #4]
 8000528:	005b      	lsls	r3, r3, #1
 800052a:	2103      	movs	r1, #3
 800052c:	fa01 f303 	lsl.w	r3, r1, r3
 8000530:	43db      	mvns	r3, r3
 8000532:	4619      	mov	r1, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	400a      	ands	r2, r1
 800053a:	601a      	str	r2, [r3, #0]
		//Now store into actual register
		pGPIOHandle->pGPIOx->MODER |= temp;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	6819      	ldr	r1, [r3, #0]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	697a      	ldr	r2, [r7, #20]
 8000548:	430a      	orrs	r2, r1
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	e0d7      	b.n	80006fe <GPIO_Init+0x212>
		//Code later - Lecture 108

		/*IMPORTANT Change - To make sure that pin is configured as input, in L496 default is  Analog (0xFFFFFFFF)
		 * for other micro-controllers default might already be in input mode (0x00000000) ************************/

		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	791b      	ldrb	r3, [r3, #4]
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	2103      	movs	r1, #3
 800055c:	fa01 f303 	lsl.w	r3, r1, r3
 8000560:	43db      	mvns	r3, r3
 8000562:	4619      	mov	r1, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	400a      	ands	r2, r1
 800056a:	601a      	str	r2, [r3, #0]

		/**********************************************************************************************************/

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	795b      	ldrb	r3, [r3, #5]
 8000570:	2b04      	cmp	r3, #4
 8000572:	d117      	bne.n	80005a4 <GPIO_Init+0xb8>
		{
			/*1. Configure FTSR1*/
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000574:	4b4a      	ldr	r3, [pc, #296]	@ (80006a0 <GPIO_Init+0x1b4>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	7912      	ldrb	r2, [r2, #4]
 800057c:	4611      	mov	r1, r2
 800057e:	2201      	movs	r2, #1
 8000580:	408a      	lsls	r2, r1
 8000582:	4611      	mov	r1, r2
 8000584:	4a46      	ldr	r2, [pc, #280]	@ (80006a0 <GPIO_Init+0x1b4>)
 8000586:	430b      	orrs	r3, r1
 8000588:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR1 bit
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800058a:	4b45      	ldr	r3, [pc, #276]	@ (80006a0 <GPIO_Init+0x1b4>)
 800058c:	689b      	ldr	r3, [r3, #8]
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	7912      	ldrb	r2, [r2, #4]
 8000592:	4611      	mov	r1, r2
 8000594:	2201      	movs	r2, #1
 8000596:	408a      	lsls	r2, r1
 8000598:	43d2      	mvns	r2, r2
 800059a:	4611      	mov	r1, r2
 800059c:	4a40      	ldr	r2, [pc, #256]	@ (80006a0 <GPIO_Init+0x1b4>)
 800059e:	400b      	ands	r3, r1
 80005a0:	6093      	str	r3, [r2, #8]
 80005a2:	e035      	b.n	8000610 <GPIO_Init+0x124>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	795b      	ldrb	r3, [r3, #5]
 80005a8:	2b05      	cmp	r3, #5
 80005aa:	d117      	bne.n	80005dc <GPIO_Init+0xf0>
		{
			/*1. Configure RTSR1*/
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ac:	4b3c      	ldr	r3, [pc, #240]	@ (80006a0 <GPIO_Init+0x1b4>)
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	7912      	ldrb	r2, [r2, #4]
 80005b4:	4611      	mov	r1, r2
 80005b6:	2201      	movs	r2, #1
 80005b8:	408a      	lsls	r2, r1
 80005ba:	4611      	mov	r1, r2
 80005bc:	4a38      	ldr	r2, [pc, #224]	@ (80006a0 <GPIO_Init+0x1b4>)
 80005be:	430b      	orrs	r3, r1
 80005c0:	6093      	str	r3, [r2, #8]
			//Clear the corresponding FTSR1 bit
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c2:	4b37      	ldr	r3, [pc, #220]	@ (80006a0 <GPIO_Init+0x1b4>)
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	7912      	ldrb	r2, [r2, #4]
 80005ca:	4611      	mov	r1, r2
 80005cc:	2201      	movs	r2, #1
 80005ce:	408a      	lsls	r2, r1
 80005d0:	43d2      	mvns	r2, r2
 80005d2:	4611      	mov	r1, r2
 80005d4:	4a32      	ldr	r2, [pc, #200]	@ (80006a0 <GPIO_Init+0x1b4>)
 80005d6:	400b      	ands	r3, r1
 80005d8:	60d3      	str	r3, [r2, #12]
 80005da:	e019      	b.n	8000610 <GPIO_Init+0x124>

		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FRT)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	795b      	ldrb	r3, [r3, #5]
 80005e0:	2b06      	cmp	r3, #6
 80005e2:	d115      	bne.n	8000610 <GPIO_Init+0x124>
		{
			/*1. Configure both FTSR and RTSR, set both*/
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e4:	4b2e      	ldr	r3, [pc, #184]	@ (80006a0 <GPIO_Init+0x1b4>)
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	7912      	ldrb	r2, [r2, #4]
 80005ec:	4611      	mov	r1, r2
 80005ee:	2201      	movs	r2, #1
 80005f0:	408a      	lsls	r2, r1
 80005f2:	4611      	mov	r1, r2
 80005f4:	4a2a      	ldr	r2, [pc, #168]	@ (80006a0 <GPIO_Init+0x1b4>)
 80005f6:	430b      	orrs	r3, r1
 80005f8:	6093      	str	r3, [r2, #8]
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005fa:	4b29      	ldr	r3, [pc, #164]	@ (80006a0 <GPIO_Init+0x1b4>)
 80005fc:	68db      	ldr	r3, [r3, #12]
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	7912      	ldrb	r2, [r2, #4]
 8000602:	4611      	mov	r1, r2
 8000604:	2201      	movs	r2, #1
 8000606:	408a      	lsls	r2, r1
 8000608:	4611      	mov	r1, r2
 800060a:	4a25      	ldr	r2, [pc, #148]	@ (80006a0 <GPIO_Init+0x1b4>)
 800060c:	430b      	orrs	r3, r1
 800060e:	60d3      	str	r3, [r2, #12]
		}

		/*2. Configure the GPIO port selection in SYSCGF_EXTICR*/
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	791b      	ldrb	r3, [r3, #4]
 8000614:	089b      	lsrs	r3, r3, #2
 8000616:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	791b      	ldrb	r3, [r3, #4]
 800061c:	f003 0303 	and.w	r3, r3, #3
 8000620:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800062a:	d04b      	beq.n	80006c4 <GPIO_Init+0x1d8>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a1c      	ldr	r2, [pc, #112]	@ (80006a4 <GPIO_Init+0x1b8>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d032      	beq.n	800069c <GPIO_Init+0x1b0>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a1b      	ldr	r2, [pc, #108]	@ (80006a8 <GPIO_Init+0x1bc>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d02b      	beq.n	8000698 <GPIO_Init+0x1ac>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a19      	ldr	r2, [pc, #100]	@ (80006ac <GPIO_Init+0x1c0>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d024      	beq.n	8000694 <GPIO_Init+0x1a8>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a18      	ldr	r2, [pc, #96]	@ (80006b0 <GPIO_Init+0x1c4>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d01d      	beq.n	8000690 <GPIO_Init+0x1a4>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a16      	ldr	r2, [pc, #88]	@ (80006b4 <GPIO_Init+0x1c8>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d016      	beq.n	800068c <GPIO_Init+0x1a0>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a15      	ldr	r2, [pc, #84]	@ (80006b8 <GPIO_Init+0x1cc>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d00f      	beq.n	8000688 <GPIO_Init+0x19c>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a13      	ldr	r2, [pc, #76]	@ (80006bc <GPIO_Init+0x1d0>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d008      	beq.n	8000684 <GPIO_Init+0x198>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a12      	ldr	r2, [pc, #72]	@ (80006c0 <GPIO_Init+0x1d4>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d101      	bne.n	8000680 <GPIO_Init+0x194>
 800067c:	2308      	movs	r3, #8
 800067e:	e022      	b.n	80006c6 <GPIO_Init+0x1da>
 8000680:	2300      	movs	r3, #0
 8000682:	e020      	b.n	80006c6 <GPIO_Init+0x1da>
 8000684:	2307      	movs	r3, #7
 8000686:	e01e      	b.n	80006c6 <GPIO_Init+0x1da>
 8000688:	2306      	movs	r3, #6
 800068a:	e01c      	b.n	80006c6 <GPIO_Init+0x1da>
 800068c:	2305      	movs	r3, #5
 800068e:	e01a      	b.n	80006c6 <GPIO_Init+0x1da>
 8000690:	2304      	movs	r3, #4
 8000692:	e018      	b.n	80006c6 <GPIO_Init+0x1da>
 8000694:	2303      	movs	r3, #3
 8000696:	e016      	b.n	80006c6 <GPIO_Init+0x1da>
 8000698:	2302      	movs	r3, #2
 800069a:	e014      	b.n	80006c6 <GPIO_Init+0x1da>
 800069c:	2301      	movs	r3, #1
 800069e:	e012      	b.n	80006c6 <GPIO_Init+0x1da>
 80006a0:	40010400 	.word	0x40010400
 80006a4:	48000400 	.word	0x48000400
 80006a8:	48000800 	.word	0x48000800
 80006ac:	48000c00 	.word	0x48000c00
 80006b0:	48001000 	.word	0x48001000
 80006b4:	48001400 	.word	0x48001400
 80006b8:	48001800 	.word	0x48001800
 80006bc:	48001c00 	.word	0x48001c00
 80006c0:	48002000 	.word	0x48002000
 80006c4:	2300      	movs	r3, #0
 80006c6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80006c8:	4b5c      	ldr	r3, [pc, #368]	@ (800083c <GPIO_Init+0x350>)
 80006ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006cc:	4a5b      	ldr	r2, [pc, #364]	@ (800083c <GPIO_Init+0x350>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	6613      	str	r3, [r2, #96]	@ 0x60
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 80006d4:	7c7a      	ldrb	r2, [r7, #17]
 80006d6:	7cbb      	ldrb	r3, [r7, #18]
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	fa02 f103 	lsl.w	r1, r2, r3
 80006de:	4a58      	ldr	r2, [pc, #352]	@ (8000840 <GPIO_Init+0x354>)
 80006e0:	7cfb      	ldrb	r3, [r7, #19]
 80006e2:	3302      	adds	r3, #2
 80006e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		/*3. Enable EXTI interrupt delivery mode using IMR */
		EXTI->IMR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006e8:	4b56      	ldr	r3, [pc, #344]	@ (8000844 <GPIO_Init+0x358>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	7912      	ldrb	r2, [r2, #4]
 80006f0:	4611      	mov	r1, r2
 80006f2:	2201      	movs	r2, #1
 80006f4:	408a      	lsls	r2, r1
 80006f6:	4611      	mov	r1, r2
 80006f8:	4a52      	ldr	r2, [pc, #328]	@ (8000844 <GPIO_Init+0x358>)
 80006fa:	430b      	orrs	r3, r1
 80006fc:	6013      	str	r3, [r2, #0]

	}

	//Reset value of temp
	temp=0;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]

	//2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	799b      	ldrb	r3, [r3, #6]
 8000706:	461a      	mov	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	791b      	ldrb	r3, [r3, #4]
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	689a      	ldr	r2, [r3, #8]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	791b      	ldrb	r3, [r3, #4]
 800071e:	4619      	mov	r1, r3
 8000720:	2303      	movs	r3, #3
 8000722:	408b      	lsls	r3, r1
 8000724:	43db      	mvns	r3, r3
 8000726:	4619      	mov	r1, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	400a      	ands	r2, r1
 800072e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	6899      	ldr	r1, [r3, #8]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	697a      	ldr	r2, [r7, #20]
 800073c:	430a      	orrs	r2, r1
 800073e:	609a      	str	r2, [r3, #8]

	temp=0;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]

	//3. Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	79db      	ldrb	r3, [r3, #7]
 8000748:	461a      	mov	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	791b      	ldrb	r3, [r3, #4]
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	fa02 f303 	lsl.w	r3, r2, r3
 8000754:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	68da      	ldr	r2, [r3, #12]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	791b      	ldrb	r3, [r3, #4]
 8000760:	4619      	mov	r1, r3
 8000762:	2303      	movs	r3, #3
 8000764:	408b      	lsls	r3, r1
 8000766:	43db      	mvns	r3, r3
 8000768:	4619      	mov	r1, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	400a      	ands	r2, r1
 8000770:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	68d9      	ldr	r1, [r3, #12]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	697a      	ldr	r2, [r7, #20]
 800077e:	430a      	orrs	r2, r1
 8000780:	60da      	str	r2, [r3, #12]

	temp=0;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]

	//4. Configure the OPType
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	7a1b      	ldrb	r3, [r3, #8]
 800078a:	461a      	mov	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	791b      	ldrb	r3, [r3, #4]
 8000790:	fa02 f303 	lsl.w	r3, r2, r3
 8000794:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	685a      	ldr	r2, [r3, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	791b      	ldrb	r3, [r3, #4]
 80007a0:	4619      	mov	r1, r3
 80007a2:	2301      	movs	r3, #1
 80007a4:	408b      	lsls	r3, r1
 80007a6:	43db      	mvns	r3, r3
 80007a8:	4619      	mov	r1, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	400a      	ands	r2, r1
 80007b0:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	6859      	ldr	r1, [r3, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	697a      	ldr	r2, [r7, #20]
 80007be:	430a      	orrs	r2, r1
 80007c0:	605a      	str	r2, [r3, #4]

	temp=0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]

	//5. Configure AF
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	795b      	ldrb	r3, [r3, #5]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d131      	bne.n	8000832 <GPIO_Init+0x346>

		uint8_t temp1, temp2; //Check Theory
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	791b      	ldrb	r3, [r3, #4]
 80007d2:	08db      	lsrs	r3, r3, #3
 80007d4:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	791b      	ldrb	r3, [r3, #4]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0x0F << (4* temp2)); //Clearing
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	7c3a      	ldrb	r2, [r7, #16]
 80007e6:	3208      	adds	r2, #8
 80007e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	220f      	movs	r2, #15
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	43db      	mvns	r3, r3
 80007f8:	4618      	mov	r0, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	7c3a      	ldrb	r2, [r7, #16]
 8000800:	4001      	ands	r1, r0
 8000802:	3208      	adds	r2, #8
 8000804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2)); //Setting
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	7c3a      	ldrb	r2, [r7, #16]
 800080e:	3208      	adds	r2, #8
 8000810:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	7a5b      	ldrb	r3, [r3, #9]
 8000818:	461a      	mov	r2, r3
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
 8000822:	4618      	mov	r0, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	7c3a      	ldrb	r2, [r7, #16]
 800082a:	4301      	orrs	r1, r0
 800082c:	3208      	adds	r2, #8
 800082e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 8000832:	bf00      	nop
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000
 8000840:	40010000 	.word	0x40010000
 8000844:	40010400 	.word	0x40010400

08000848 <SPI_PeriClockControl>:

#include "stm32l496xx_spi.h"


void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	460b      	mov	r3, r1
 8000852:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000854:	78fb      	ldrb	r3, [r7, #3]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d120      	bne.n	800089c <SPI_PeriClockControl+0x54>
		if(pSPIx == SPI1){
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a22      	ldr	r2, [pc, #136]	@ (80008e8 <SPI_PeriClockControl+0xa0>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d106      	bne.n	8000870 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000862:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <SPI_PeriClockControl+0xa4>)
 8000864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000866:	4a21      	ldr	r2, [pc, #132]	@ (80008ec <SPI_PeriClockControl+0xa4>)
 8000868:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800086c:	6613      	str	r3, [r2, #96]	@ 0x60
		else if(pSPIx == SPI3){
			SPI3_PCLK_DI();
		}

	}
}
 800086e:	e035      	b.n	80008dc <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI2){
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a1f      	ldr	r2, [pc, #124]	@ (80008f0 <SPI_PeriClockControl+0xa8>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d106      	bne.n	8000886 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000878:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <SPI_PeriClockControl+0xa4>)
 800087a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800087c:	4a1b      	ldr	r2, [pc, #108]	@ (80008ec <SPI_PeriClockControl+0xa4>)
 800087e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000882:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000884:	e02a      	b.n	80008dc <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI3){
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4a1a      	ldr	r2, [pc, #104]	@ (80008f4 <SPI_PeriClockControl+0xac>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d126      	bne.n	80008dc <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 800088e:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <SPI_PeriClockControl+0xa4>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000892:	4a16      	ldr	r2, [pc, #88]	@ (80008ec <SPI_PeriClockControl+0xa4>)
 8000894:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000898:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800089a:	e01f      	b.n	80008dc <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1){
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a12      	ldr	r2, [pc, #72]	@ (80008e8 <SPI_PeriClockControl+0xa0>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d106      	bne.n	80008b2 <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <SPI_PeriClockControl+0xa4>)
 80008a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008a8:	4a10      	ldr	r2, [pc, #64]	@ (80008ec <SPI_PeriClockControl+0xa4>)
 80008aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008ae:	6613      	str	r3, [r2, #96]	@ 0x60
}
 80008b0:	e014      	b.n	80008dc <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI2){
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a0e      	ldr	r2, [pc, #56]	@ (80008f0 <SPI_PeriClockControl+0xa8>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d106      	bne.n	80008c8 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 80008ba:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <SPI_PeriClockControl+0xa4>)
 80008bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008be:	4a0b      	ldr	r2, [pc, #44]	@ (80008ec <SPI_PeriClockControl+0xa4>)
 80008c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80008c4:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80008c6:	e009      	b.n	80008dc <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI3){
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <SPI_PeriClockControl+0xac>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d105      	bne.n	80008dc <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <SPI_PeriClockControl+0xa4>)
 80008d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d4:	4a05      	ldr	r2, [pc, #20]	@ (80008ec <SPI_PeriClockControl+0xa4>)
 80008d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80008da:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40013000 	.word	0x40013000
 80008ec:	40021000 	.word	0x40021000
 80008f0:	40003800 	.word	0x40003800
 80008f4:	40003c00 	.word	0x40003c00

080008f8 <SPI_Init>:

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	/*Enable the peripheral clock so that its easy for the user*/
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2101      	movs	r1, #1
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ff9e 	bl	8000848 <SPI_PeriClockControl>
	/* Configure the SPI_CR1 register */

	uint32_t tempreg1 = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]

	/* 1. Configure the device mode */
	tempreg1 |= (pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSRT);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	791b      	ldrb	r3, [r3, #4]
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	68fa      	ldr	r2, [r7, #12]
 8000918:	4313      	orrs	r3, r2
 800091a:	60fb      	str	r3, [r7, #12]

	/* 2. Configure the bus configuration */
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	795b      	ldrb	r3, [r3, #5]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d104      	bne.n	800092e <SPI_Init+0x36>
	{
		/* Clear the BIDI mode*/
		tempreg1 &= ~(1 << SPI_CR1_BIDIMODE);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	e014      	b.n	8000958 <SPI_Init+0x60>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	795b      	ldrb	r3, [r3, #5]
 8000932:	2b02      	cmp	r3, #2
 8000934:	d104      	bne.n	8000940 <SPI_Init+0x48>
	{
		/* Enable the BIDI mode*/
		tempreg1 |= (1 << SPI_CR1_BIDIMODE);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	e00b      	b.n	8000958 <SPI_Init+0x60>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	795b      	ldrb	r3, [r3, #5]
 8000944:	2b03      	cmp	r3, #3
 8000946:	d107      	bne.n	8000958 <SPI_Init+0x60>
	{
		/* CLear the BIDI mode*/
		tempreg1 &= ~(1 << SPI_CR1_BIDIMODE);
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800094e:	60fb      	str	r3, [r7, #12]

		/*RXONLY bit must be set*/
		tempreg1 |= (1 << SPI_CR1_RXONLY);
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000956:	60fb      	str	r3, [r7, #12]
	}

	/*3. Configure the SPI serial clock speed*/
	tempreg1 |= (pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	799b      	ldrb	r3, [r3, #6]
 800095c:	00db      	lsls	r3, r3, #3
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	4313      	orrs	r3, r2
 8000962:	60fb      	str	r3, [r7, #12]

	/*4. Configure the DFF*/
	uint32_t tempreg2=0;
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
	tempreg2 |= (pSPIHandle->SPIConfig.SPI_DFF << SPI_CR2_DS);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	79db      	ldrb	r3, [r3, #7]
 800096c:	021b      	lsls	r3, r3, #8
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	4313      	orrs	r3, r2
 8000972:	60bb      	str	r3, [r7, #8]

	/*5. Configure the CPOL*/
	tempreg1 |= (pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	7a1b      	ldrb	r3, [r3, #8]
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	4313      	orrs	r3, r2
 800097e:	60fb      	str	r3, [r7, #12]

	/*6. Configure the CPHA*/
	tempreg1 |= (pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	7a5b      	ldrb	r3, [r3, #9]
 8000984:	461a      	mov	r2, r3
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	4313      	orrs	r3, r2
 800098a:	60fb      	str	r3, [r7, #12]

	/* 7. Configure SSM bit*/
	tempreg1 |= (pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	7a9b      	ldrb	r3, [r3, #10]
 8000990:	025b      	lsls	r3, r3, #9
 8000992:	68fa      	ldr	r2, [r7, #12]
 8000994:	4313      	orrs	r3, r2
 8000996:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg1;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	68fa      	ldr	r2, [r7, #12]
 800099e:	601a      	str	r2, [r3, #0]
	pSPIHandle->pSPIx->CR2 = tempreg2;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	68ba      	ldr	r2, [r7, #8]
 80009a6:	605a      	str	r2, [r3, #4]

}
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <SPI_GetFlagStatus>:
		}

}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t flagname) /* This function is an aid to the send and receive functions */
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
	/*Flag names have been defined with their respective position*/
	if(pSPIx->SR & flagname) // Masking with and operator
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	689a      	ldr	r2, [r3, #8]
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	4013      	ands	r3, r2
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e000      	b.n	80009cc <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80009ca:	2300      	movs	r3, #0
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr

080009d6 <SPI_SendData>:

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b086      	sub	sp, #24
 80009da:	af00      	add	r7, sp, #0
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
	while(len > 0)
 80009e2:	e02d      	b.n	8000a40 <SPI_SendData+0x6a>
	{
		/* 1. Wait until TXE (TX Empty flag) is set -  Data should be loaded only when the TX Buffer is empty, else already existing data may be lost */
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET); //while( !(pSPIx->SR & (1 << 1)) );
 80009e4:	bf00      	nop
 80009e6:	2102      	movs	r1, #2
 80009e8:	68f8      	ldr	r0, [r7, #12]
 80009ea:	f7ff ffe1 	bl	80009b0 <SPI_GetFlagStatus>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d0f8      	beq.n	80009e6 <SPI_SendData+0x10>
		/* 2. Check the Data Size(DFF) in CR2 register */

		//TODO: Configure other data sizes as well

		//TODO: Verify the below logic, self made
		uint16_t tempvar = pSPIx->CR2;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	82fb      	strh	r3, [r7, #22]
		tempvar = (tempvar >> SPI_CR2_DS);
 80009fa:	8afb      	ldrh	r3, [r7, #22]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	82fb      	strh	r3, [r7, #22]

		if(tempvar == SPI_DFF_16BITS) //16-bit mode
 8000a00:	8afb      	ldrh	r3, [r7, #22]
 8000a02:	2b0f      	cmp	r3, #15
 8000a04:	d10e      	bne.n	8000a24 <SPI_SendData+0x4e>
		{
			// Load the data onto the data register DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	60da      	str	r2, [r3, #12]
			len--;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	607b      	str	r3, [r7, #4]
			len--;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	e00d      	b.n	8000a40 <SPI_SendData+0x6a>

		}else if(tempvar == SPI_DFF_8BITS) //8-bit mode
 8000a24:	8afb      	ldrh	r3, [r7, #22]
 8000a26:	2b07      	cmp	r3, #7
 8000a28:	d10a      	bne.n	8000a40 <SPI_SendData+0x6a>
		{
			// Load the data onto the data register DR
			pSPIx->DR = *(pTxBuffer);
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	60da      	str	r2, [r3, #12]
			len--;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	60bb      	str	r3, [r7, #8]
	while(len > 0)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1ce      	bne.n	80009e4 <SPI_SendData+0xe>

		}

	}

}
 8000a46:	bf00      	nop
 8000a48:	bf00      	nop
 8000a4a:	3718      	adds	r7, #24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <SPI_Peripheral_Control>:

}


void SPI_Peripheral_Control(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a5c:	78fb      	ldrb	r3, [r7, #3]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d106      	bne.n	8000a70 <SPI_Peripheral_Control+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}

}
 8000a6e:	e005      	b.n	8000a7c <SPI_Peripheral_Control+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	601a      	str	r2, [r3, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr

08000a86 <SPI_SSIConfig>:

void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b083      	sub	sp, #12
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a92:	78fb      	ldrb	r3, [r7, #3]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d106      	bne.n	8000aa6 <SPI_SSIConfig+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}
 8000aa4:	e005      	b.n	8000ab2 <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <__libc_init_array>:
 8000abc:	b570      	push	{r4, r5, r6, lr}
 8000abe:	4d0d      	ldr	r5, [pc, #52]	@ (8000af4 <__libc_init_array+0x38>)
 8000ac0:	4c0d      	ldr	r4, [pc, #52]	@ (8000af8 <__libc_init_array+0x3c>)
 8000ac2:	1b64      	subs	r4, r4, r5
 8000ac4:	10a4      	asrs	r4, r4, #2
 8000ac6:	2600      	movs	r6, #0
 8000ac8:	42a6      	cmp	r6, r4
 8000aca:	d109      	bne.n	8000ae0 <__libc_init_array+0x24>
 8000acc:	4d0b      	ldr	r5, [pc, #44]	@ (8000afc <__libc_init_array+0x40>)
 8000ace:	4c0c      	ldr	r4, [pc, #48]	@ (8000b00 <__libc_init_array+0x44>)
 8000ad0:	f000 f818 	bl	8000b04 <_init>
 8000ad4:	1b64      	subs	r4, r4, r5
 8000ad6:	10a4      	asrs	r4, r4, #2
 8000ad8:	2600      	movs	r6, #0
 8000ada:	42a6      	cmp	r6, r4
 8000adc:	d105      	bne.n	8000aea <__libc_init_array+0x2e>
 8000ade:	bd70      	pop	{r4, r5, r6, pc}
 8000ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ae4:	4798      	blx	r3
 8000ae6:	3601      	adds	r6, #1
 8000ae8:	e7ee      	b.n	8000ac8 <__libc_init_array+0xc>
 8000aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aee:	4798      	blx	r3
 8000af0:	3601      	adds	r6, #1
 8000af2:	e7f2      	b.n	8000ada <__libc_init_array+0x1e>
 8000af4:	08000b30 	.word	0x08000b30
 8000af8:	08000b30 	.word	0x08000b30
 8000afc:	08000b30 	.word	0x08000b30
 8000b00:	08000b34 	.word	0x08000b34

08000b04 <_init>:
 8000b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b06:	bf00      	nop
 8000b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b0a:	bc08      	pop	{r3}
 8000b0c:	469e      	mov	lr, r3
 8000b0e:	4770      	bx	lr

08000b10 <_fini>:
 8000b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b12:	bf00      	nop
 8000b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b16:	bc08      	pop	{r3}
 8000b18:	469e      	mov	lr, r3
 8000b1a:	4770      	bx	lr
