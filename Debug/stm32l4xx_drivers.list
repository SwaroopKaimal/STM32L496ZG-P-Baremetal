
stm32l4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000aa8  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000c54  08000c54  00001c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c60  08000c60  00001c70  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000c60  08000c60  00001c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000c68  08000c70  00001c70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c68  08000c68  00001c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000c6c  08000c6c  00001c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001c70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00001c70  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001384  00000000  00000000  00001c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000045d  00000000  00000000  0000301e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000150  00000000  00000000  00003480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f0  00000000  00000000  000035d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000023b4  00000000  00000000  000036c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000196d  00000000  00000000  00005a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000098bb  00000000  00000000  000073e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00010c9c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004a0  00000000  00000000  00010ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00011180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000c3c 	.word	0x08000c3c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000c3c 	.word	0x08000c3c

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <SPI1_GPIOInit>:

#include <string.h>
#include "stm32l496xx.h"

void SPI1_GPIOInit()
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000202:	4b11      	ldr	r3, [pc, #68]	@ (8000248 <SPI1_GPIOInit+0x4c>)
 8000204:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000206:	2302      	movs	r3, #2
 8000208:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800020a:	2305      	movs	r3, #5
 800020c:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_PO_TYPE_PP;
 800020e:	2300      	movs	r3, #0
 8000210:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000212:	2300      	movs	r3, #0
 8000214:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000216:	2302      	movs	r3, #2
 8000218:	72bb      	strb	r3, [r7, #10]

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3; //SCLK
 800021a:	2303      	movs	r3, #3
 800021c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins); /* GPIO_Init operates only one pin at a time so call for every pin.*/
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f9c5 	bl	80005b0 <GPIO_Init>

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5; //MOSI
 8000226:	2305      	movs	r3, #5
 8000228:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	4618      	mov	r0, r3
 800022e:	f000 f9bf 	bl	80005b0 <GPIO_Init>

	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4; //MISO
	//GPIO_Init(&SPIPins);

	//Setup NSS manually - if working with internal setup
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0; //NSS
 8000232:	2300      	movs	r3, #0
 8000234:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f9b9 	bl	80005b0 <GPIO_Init>

}
 800023e:	bf00      	nop
 8000240:	3710      	adds	r7, #16
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	48000400 	.word	0x48000400

0800024c <SPI1_Init>:

void SPI1_Init()
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b084      	sub	sp, #16
 8000250:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI1handle;

	SPI1handle.pSPIx = SPI1;
 8000252:	4b0c      	ldr	r3, [pc, #48]	@ (8000284 <SPI1_Init+0x38>)
 8000254:	607b      	str	r3, [r7, #4]
	SPI1handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000256:	2301      	movs	r3, #1
 8000258:	727b      	strb	r3, [r7, #9]
	SPI1handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800025a:	2301      	movs	r3, #1
 800025c:	723b      	strb	r3, [r7, #8]
	SPI1handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8; //Generated 2MHz
 800025e:	2302      	movs	r3, #2
 8000260:	72bb      	strb	r3, [r7, #10]
	SPI1handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000262:	2307      	movs	r3, #7
 8000264:	72fb      	strb	r3, [r7, #11]
	SPI1handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000266:	2300      	movs	r3, #0
 8000268:	733b      	strb	r3, [r7, #12]
	SPI1handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800026a:	2300      	movs	r3, #0
 800026c:	737b      	strb	r3, [r7, #13]
	SPI1handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management
 800026e:	2300      	movs	r3, #0
 8000270:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI1handle);
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	4618      	mov	r0, r3
 8000276:	f000 fbdb 	bl	8000a30 <SPI_Init>

}
 800027a:	bf00      	nop
 800027c:	3710      	adds	r7, #16
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	40013000 	.word	0x40013000

08000288 <GPIO_Button_Init>:

void GPIO_Button_Init()
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b086      	sub	sp, #24
 800028c:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpio_btn, gpio_nss;


	gpio_btn.pGPIOx = GPIOC;
 800028e:	4b09      	ldr	r3, [pc, #36]	@ (80002b4 <GPIO_Button_Init+0x2c>)
 8000290:	60fb      	str	r3, [r7, #12]
	gpio_btn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000292:	230d      	movs	r3, #13
 8000294:	743b      	strb	r3, [r7, #16]
	gpio_btn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000296:	2300      	movs	r3, #0
 8000298:	747b      	strb	r3, [r7, #17]
	gpio_btn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800029a:	2302      	movs	r3, #2
 800029c:	74bb      	strb	r3, [r7, #18]
	//gpio_btn.GPIO_PinConfig.GPIO_PinOPType = GPIO_PO_TYPE_PP; //Applicable only when the mode is output
	gpio_btn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD; //(Check for L496ZG - Pulled Down for PC13) Usuallu External pull up already available in Nucleo Board (Pull down in Discovery)
 800029e:	2300      	movs	r3, #0
 80002a0:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&gpio_btn);
 80002a2:	f107 030c 	add.w	r3, r7, #12
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 f982 	bl	80005b0 <GPIO_Init>


}
 80002ac:	bf00      	nop
 80002ae:	3718      	adds	r7, #24
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	48000800 	.word	0x48000800

080002b8 <delay>:

void delay(){
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<250000; i++);
 80002be:	2300      	movs	r3, #0
 80002c0:	607b      	str	r3, [r7, #4]
 80002c2:	e002      	b.n	80002ca <delay+0x12>
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	3301      	adds	r3, #1
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4a04      	ldr	r2, [pc, #16]	@ (80002e0 <delay+0x28>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d9f8      	bls.n	80002c4 <delay+0xc>
}
 80002d2:	bf00      	nop
 80002d4:	bf00      	nop
 80002d6:	370c      	adds	r7, #12
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	0003d08f 	.word	0x0003d08f

080002e4 <main>:

int main(void){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0

	char user_data[] = "Hello World";
 80002ea:	4a25      	ldr	r2, [pc, #148]	@ (8000380 <main+0x9c>)
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80002f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	GPIO_Button_Init();
 80002f4:	f7ff ffc8 	bl	8000288 <GPIO_Button_Init>

	SPI1_GPIOInit();
 80002f8:	f7ff ff80 	bl	80001fc <SPI1_GPIOInit>

	SPI1_Init();
 80002fc:	f7ff ffa6 	bl	800024c <SPI1_Init>

	/*SS output is enabled in master mode and when the SPI interface is enabled in hardware mode.*/
	SPI_SSOEConfig(SPI1, ENABLE);
 8000300:	2101      	movs	r1, #1
 8000302:	4820      	ldr	r0, [pc, #128]	@ (8000384 <main+0xa0>)
 8000304:	f000 fc5b 	bl	8000bbe <SPI_SSOEConfig>

	while(1){

		while(!(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)));
 8000308:	bf00      	nop
 800030a:	210d      	movs	r1, #13
 800030c:	481e      	ldr	r0, [pc, #120]	@ (8000388 <main+0xa4>)
 800030e:	f000 fafd 	bl	800090c <GPIO_ReadFromInputPin>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d0f8      	beq.n	800030a <main+0x26>

		delay();
 8000318:	f7ff ffce 	bl	80002b8 <delay>

		/*It recommended to configure all SPI parameters while its not active, when its active it will
		 * be performing communications continuously and will not accept any changes. So we have the set
		 * the SPE bit in CR1 at this stage*/
		SPI_Peripheral_Control(SPI1, ENABLE);
 800031c:	2101      	movs	r1, #1
 800031e:	4819      	ldr	r0, [pc, #100]	@ (8000384 <main+0xa0>)
 8000320:	f000 fc32 	bl	8000b88 <SPI_Peripheral_Control>

		GPIO_WriteToOutputPin(GPIOB, GPIO_PIN_NO_7, LOW);
 8000324:	2200      	movs	r2, #0
 8000326:	2107      	movs	r1, #7
 8000328:	4818      	ldr	r0, [pc, #96]	@ (800038c <main+0xa8>)
 800032a:	f000 fb04 	bl	8000936 <GPIO_WriteToOutputPin>

		/*First send length of the data to be sent*/
		uint8_t dataLen = strlen(user_data);
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	4618      	mov	r0, r3
 8000332:	f7ff ff5b 	bl	80001ec <strlen>
 8000336:	4603      	mov	r3, r0
 8000338:	b2db      	uxtb	r3, r3
 800033a:	70fb      	strb	r3, [r7, #3]
		SPI_SendData(SPI1, &dataLen, 1); //Arduino code expects one byte of data length information
 800033c:	1cfb      	adds	r3, r7, #3
 800033e:	2201      	movs	r2, #1
 8000340:	4619      	mov	r1, r3
 8000342:	4810      	ldr	r0, [pc, #64]	@ (8000384 <main+0xa0>)
 8000344:	f000 fbe3 	bl	8000b0e <SPI_SendData>

		SPI_SendData(SPI1, (uint8_t*)user_data, strlen(user_data));
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	4618      	mov	r0, r3
 800034c:	f7ff ff4e 	bl	80001ec <strlen>
 8000350:	4602      	mov	r2, r0
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4619      	mov	r1, r3
 8000356:	480b      	ldr	r0, [pc, #44]	@ (8000384 <main+0xa0>)
 8000358:	f000 fbd9 	bl	8000b0e <SPI_SendData>

		/*Confirm that SPI is not busy before disabling, full data may not be sent if closed abruptly*/
		while(SPI_GetFlagStatus(SPI1, SPI_BSY_FLAG));
 800035c:	bf00      	nop
 800035e:	2180      	movs	r1, #128	@ 0x80
 8000360:	4808      	ldr	r0, [pc, #32]	@ (8000384 <main+0xa0>)
 8000362:	f000 fbc1 	bl	8000ae8 <SPI_GetFlagStatus>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d1f8      	bne.n	800035e <main+0x7a>

		SPI_Peripheral_Control(SPI1, DISABLE);
 800036c:	2100      	movs	r1, #0
 800036e:	4805      	ldr	r0, [pc, #20]	@ (8000384 <main+0xa0>)
 8000370:	f000 fc0a 	bl	8000b88 <SPI_Peripheral_Control>

		GPIO_WriteToOutputPin(GPIOB, GPIO_PIN_NO_7, HIGH);
 8000374:	2201      	movs	r2, #1
 8000376:	2107      	movs	r1, #7
 8000378:	4804      	ldr	r0, [pc, #16]	@ (800038c <main+0xa8>)
 800037a:	f000 fadc 	bl	8000936 <GPIO_WriteToOutputPin>
	while(1){
 800037e:	e7c3      	b.n	8000308 <main+0x24>
 8000380:	08000c54 	.word	0x08000c54
 8000384:	40013000 	.word	0x40013000
 8000388:	48000800 	.word	0x48000800
 800038c:	48000400 	.word	0x48000400

08000390 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000390:	480d      	ldr	r0, [pc, #52]	@ (80003c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000392:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000394:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000398:	480c      	ldr	r0, [pc, #48]	@ (80003cc <LoopForever+0x6>)
  ldr r1, =_edata
 800039a:	490d      	ldr	r1, [pc, #52]	@ (80003d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800039c:	4a0d      	ldr	r2, [pc, #52]	@ (80003d4 <LoopForever+0xe>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a0:	e002      	b.n	80003a8 <LoopCopyDataInit>

080003a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a6:	3304      	adds	r3, #4

080003a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ac:	d3f9      	bcc.n	80003a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ae:	4a0a      	ldr	r2, [pc, #40]	@ (80003d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b0:	4c0a      	ldr	r4, [pc, #40]	@ (80003dc <LoopForever+0x16>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b4:	e001      	b.n	80003ba <LoopFillZerobss>

080003b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b8:	3204      	adds	r2, #4

080003ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003bc:	d3fb      	bcc.n	80003b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003be:	f000 fc19 	bl	8000bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003c2:	f7ff ff8f 	bl	80002e4 <main>

080003c6 <LoopForever>:

LoopForever:
  b LoopForever
 80003c6:	e7fe      	b.n	80003c6 <LoopForever>
  ldr   r0, =_estack
 80003c8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80003cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003d4:	08000c70 	.word	0x08000c70
  ldr r2, =_sbss
 80003d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003dc:	2000001c 	.word	0x2000001c

080003e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC1_2_IRQHandler>
	...

080003e4 <GPIO_PeriClockControl>:
 *
 * @Note:		-
 *****************************************************************************/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	460b      	mov	r3, r1
 80003ee:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80003f0:	78fb      	ldrb	r3, [r7, #3]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d162      	bne.n	80004bc <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA){
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80003fc:	d106      	bne.n	800040c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80003fe:	4b63      	ldr	r3, [pc, #396]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 8000400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000402:	4a62      	ldr	r2, [pc, #392]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	64d3      	str	r3, [r2, #76]	@ 0x4c
		else if(pGPIOx == GPIOI){
			GPIOI_PCLK_DI();
		}

	}
}
 800040a:	e0b9      	b.n	8000580 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB){
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a60      	ldr	r2, [pc, #384]	@ (8000590 <GPIO_PeriClockControl+0x1ac>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d106      	bne.n	8000422 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000414:	4b5d      	ldr	r3, [pc, #372]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 8000416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000418:	4a5c      	ldr	r2, [pc, #368]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 800041a:	f043 0302 	orr.w	r3, r3, #2
 800041e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000420:	e0ae      	b.n	8000580 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC){
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a5b      	ldr	r2, [pc, #364]	@ (8000594 <GPIO_PeriClockControl+0x1b0>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d106      	bne.n	8000438 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800042a:	4b58      	ldr	r3, [pc, #352]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 800042c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800042e:	4a57      	ldr	r2, [pc, #348]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 8000430:	f043 0304 	orr.w	r3, r3, #4
 8000434:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000436:	e0a3      	b.n	8000580 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD){
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4a57      	ldr	r2, [pc, #348]	@ (8000598 <GPIO_PeriClockControl+0x1b4>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d106      	bne.n	800044e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000440:	4b52      	ldr	r3, [pc, #328]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 8000442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000444:	4a51      	ldr	r2, [pc, #324]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 8000446:	f043 0308 	orr.w	r3, r3, #8
 800044a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800044c:	e098      	b.n	8000580 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE){
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a52      	ldr	r2, [pc, #328]	@ (800059c <GPIO_PeriClockControl+0x1b8>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d106      	bne.n	8000464 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000456:	4b4d      	ldr	r3, [pc, #308]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 8000458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800045a:	4a4c      	ldr	r2, [pc, #304]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 800045c:	f043 0310 	orr.w	r3, r3, #16
 8000460:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000462:	e08d      	b.n	8000580 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF){
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4a4e      	ldr	r2, [pc, #312]	@ (80005a0 <GPIO_PeriClockControl+0x1bc>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d106      	bne.n	800047a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800046c:	4b47      	ldr	r3, [pc, #284]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 800046e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000470:	4a46      	ldr	r2, [pc, #280]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 8000472:	f043 0320 	orr.w	r3, r3, #32
 8000476:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000478:	e082      	b.n	8000580 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG){
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a49      	ldr	r2, [pc, #292]	@ (80005a4 <GPIO_PeriClockControl+0x1c0>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d106      	bne.n	8000490 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000482:	4b42      	ldr	r3, [pc, #264]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 8000484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000486:	4a41      	ldr	r2, [pc, #260]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 8000488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800048c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800048e:	e077      	b.n	8000580 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH){
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4a45      	ldr	r2, [pc, #276]	@ (80005a8 <GPIO_PeriClockControl+0x1c4>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d106      	bne.n	80004a6 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000498:	4b3c      	ldr	r3, [pc, #240]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 800049a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800049c:	4a3b      	ldr	r2, [pc, #236]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 800049e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004a4:	e06c      	b.n	8000580 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI){
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4a40      	ldr	r2, [pc, #256]	@ (80005ac <GPIO_PeriClockControl+0x1c8>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d168      	bne.n	8000580 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80004ae:	4b37      	ldr	r3, [pc, #220]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 80004b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004b2:	4a36      	ldr	r2, [pc, #216]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 80004b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004ba:	e061      	b.n	8000580 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA){
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80004c2:	d106      	bne.n	80004d2 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80004c4:	4b31      	ldr	r3, [pc, #196]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 80004c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004c8:	4a30      	ldr	r2, [pc, #192]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 80004ca:	f023 0301 	bic.w	r3, r3, #1
 80004ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004d0:	e056      	b.n	8000580 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB){
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4a2e      	ldr	r2, [pc, #184]	@ (8000590 <GPIO_PeriClockControl+0x1ac>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d106      	bne.n	80004e8 <GPIO_PeriClockControl+0x104>
			GPIOA_PCLK_DI();
 80004da:	4b2c      	ldr	r3, [pc, #176]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004de:	4a2b      	ldr	r2, [pc, #172]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 80004e0:	f023 0301 	bic.w	r3, r3, #1
 80004e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004e6:	e04b      	b.n	8000580 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC){
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a2a      	ldr	r2, [pc, #168]	@ (8000594 <GPIO_PeriClockControl+0x1b0>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d106      	bne.n	80004fe <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80004f0:	4b26      	ldr	r3, [pc, #152]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 80004f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004f4:	4a25      	ldr	r2, [pc, #148]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 80004f6:	f023 0304 	bic.w	r3, r3, #4
 80004fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004fc:	e040      	b.n	8000580 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD){
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4a25      	ldr	r2, [pc, #148]	@ (8000598 <GPIO_PeriClockControl+0x1b4>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d106      	bne.n	8000514 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000506:	4b21      	ldr	r3, [pc, #132]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050a:	4a20      	ldr	r2, [pc, #128]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 800050c:	f023 0308 	bic.w	r3, r3, #8
 8000510:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000512:	e035      	b.n	8000580 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE){
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4a21      	ldr	r2, [pc, #132]	@ (800059c <GPIO_PeriClockControl+0x1b8>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d106      	bne.n	800052a <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 800051c:	4b1b      	ldr	r3, [pc, #108]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 800051e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000520:	4a1a      	ldr	r2, [pc, #104]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 8000522:	f023 0310 	bic.w	r3, r3, #16
 8000526:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000528:	e02a      	b.n	8000580 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF){
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4a1c      	ldr	r2, [pc, #112]	@ (80005a0 <GPIO_PeriClockControl+0x1bc>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d106      	bne.n	8000540 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000532:	4b16      	ldr	r3, [pc, #88]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000536:	4a15      	ldr	r2, [pc, #84]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 8000538:	f023 0320 	bic.w	r3, r3, #32
 800053c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800053e:	e01f      	b.n	8000580 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG){
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4a18      	ldr	r2, [pc, #96]	@ (80005a4 <GPIO_PeriClockControl+0x1c0>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d106      	bne.n	8000556 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000548:	4b10      	ldr	r3, [pc, #64]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 800054a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054c:	4a0f      	ldr	r2, [pc, #60]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 800054e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000552:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000554:	e014      	b.n	8000580 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH){
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a13      	ldr	r2, [pc, #76]	@ (80005a8 <GPIO_PeriClockControl+0x1c4>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d106      	bne.n	800056c <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800055e:	4b0b      	ldr	r3, [pc, #44]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000562:	4a0a      	ldr	r2, [pc, #40]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 8000564:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000568:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800056a:	e009      	b.n	8000580 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI){
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4a0f      	ldr	r2, [pc, #60]	@ (80005ac <GPIO_PeriClockControl+0x1c8>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d105      	bne.n	8000580 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000574:	4b05      	ldr	r3, [pc, #20]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 8000576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000578:	4a04      	ldr	r2, [pc, #16]	@ (800058c <GPIO_PeriClockControl+0x1a8>)
 800057a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800057e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000
 8000590:	48000400 	.word	0x48000400
 8000594:	48000800 	.word	0x48000800
 8000598:	48000c00 	.word	0x48000c00
 800059c:	48001000 	.word	0x48001000
 80005a0:	48001400 	.word	0x48001400
 80005a4:	48001800 	.word	0x48001800
 80005a8:	48001c00 	.word	0x48001c00
 80005ac:	48002000 	.word	0x48002000

080005b0 <GPIO_Init>:
/*Initializing GPIO with user's required configurations from GPIO_PinConfig_t*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

	/*Enable the peripheral clock so that its easy for the user - added later*/
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2101      	movs	r1, #1
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff ff10 	bl	80003e4 <GPIO_PeriClockControl>

	uint32_t  temp=0; //Temporary register
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]

	//1. Configure the mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	795b      	ldrb	r3, [r3, #5]
 80005cc:	2b03      	cmp	r3, #3
 80005ce:	d820      	bhi.n	8000612 <GPIO_Init+0x62>
		//Non-interrupt modes
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //2 bits for each pin number so multiply by 2
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	795b      	ldrb	r3, [r3, #5]
 80005d4:	461a      	mov	r2, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	791b      	ldrb	r3, [r3, #4]
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	fa02 f303 	lsl.w	r3, r2, r3
 80005e0:	617b      	str	r3, [r7, #20]
		//Clear required bit fields
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	791b      	ldrb	r3, [r3, #4]
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	2103      	movs	r1, #3
 80005f0:	fa01 f303 	lsl.w	r3, r1, r3
 80005f4:	43db      	mvns	r3, r3
 80005f6:	4619      	mov	r1, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	400a      	ands	r2, r1
 80005fe:	601a      	str	r2, [r3, #0]
		//Now store into actual register
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	6819      	ldr	r1, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	697a      	ldr	r2, [r7, #20]
 800060c:	430a      	orrs	r2, r1
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	e0d7      	b.n	80007c2 <GPIO_Init+0x212>
		//Code later - Lecture 108

		/*IMPORTANT Change - To make sure that pin is configured as input, in L496 default is  Analog (0xFFFFFFFF)
		 * for other micro-controllers default might already be in input mode (0x00000000) ************************/

		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	791b      	ldrb	r3, [r3, #4]
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	2103      	movs	r1, #3
 8000620:	fa01 f303 	lsl.w	r3, r1, r3
 8000624:	43db      	mvns	r3, r3
 8000626:	4619      	mov	r1, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	400a      	ands	r2, r1
 800062e:	601a      	str	r2, [r3, #0]

		/**********************************************************************************************************/

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	795b      	ldrb	r3, [r3, #5]
 8000634:	2b04      	cmp	r3, #4
 8000636:	d117      	bne.n	8000668 <GPIO_Init+0xb8>
		{
			/*1. Configure FTSR1*/
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000638:	4b4a      	ldr	r3, [pc, #296]	@ (8000764 <GPIO_Init+0x1b4>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	7912      	ldrb	r2, [r2, #4]
 8000640:	4611      	mov	r1, r2
 8000642:	2201      	movs	r2, #1
 8000644:	408a      	lsls	r2, r1
 8000646:	4611      	mov	r1, r2
 8000648:	4a46      	ldr	r2, [pc, #280]	@ (8000764 <GPIO_Init+0x1b4>)
 800064a:	430b      	orrs	r3, r1
 800064c:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR1 bit
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800064e:	4b45      	ldr	r3, [pc, #276]	@ (8000764 <GPIO_Init+0x1b4>)
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	7912      	ldrb	r2, [r2, #4]
 8000656:	4611      	mov	r1, r2
 8000658:	2201      	movs	r2, #1
 800065a:	408a      	lsls	r2, r1
 800065c:	43d2      	mvns	r2, r2
 800065e:	4611      	mov	r1, r2
 8000660:	4a40      	ldr	r2, [pc, #256]	@ (8000764 <GPIO_Init+0x1b4>)
 8000662:	400b      	ands	r3, r1
 8000664:	6093      	str	r3, [r2, #8]
 8000666:	e035      	b.n	80006d4 <GPIO_Init+0x124>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	795b      	ldrb	r3, [r3, #5]
 800066c:	2b05      	cmp	r3, #5
 800066e:	d117      	bne.n	80006a0 <GPIO_Init+0xf0>
		{
			/*1. Configure RTSR1*/
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000670:	4b3c      	ldr	r3, [pc, #240]	@ (8000764 <GPIO_Init+0x1b4>)
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	7912      	ldrb	r2, [r2, #4]
 8000678:	4611      	mov	r1, r2
 800067a:	2201      	movs	r2, #1
 800067c:	408a      	lsls	r2, r1
 800067e:	4611      	mov	r1, r2
 8000680:	4a38      	ldr	r2, [pc, #224]	@ (8000764 <GPIO_Init+0x1b4>)
 8000682:	430b      	orrs	r3, r1
 8000684:	6093      	str	r3, [r2, #8]
			//Clear the corresponding FTSR1 bit
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000686:	4b37      	ldr	r3, [pc, #220]	@ (8000764 <GPIO_Init+0x1b4>)
 8000688:	68db      	ldr	r3, [r3, #12]
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	7912      	ldrb	r2, [r2, #4]
 800068e:	4611      	mov	r1, r2
 8000690:	2201      	movs	r2, #1
 8000692:	408a      	lsls	r2, r1
 8000694:	43d2      	mvns	r2, r2
 8000696:	4611      	mov	r1, r2
 8000698:	4a32      	ldr	r2, [pc, #200]	@ (8000764 <GPIO_Init+0x1b4>)
 800069a:	400b      	ands	r3, r1
 800069c:	60d3      	str	r3, [r2, #12]
 800069e:	e019      	b.n	80006d4 <GPIO_Init+0x124>

		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FRT)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	795b      	ldrb	r3, [r3, #5]
 80006a4:	2b06      	cmp	r3, #6
 80006a6:	d115      	bne.n	80006d4 <GPIO_Init+0x124>
		{
			/*1. Configure both FTSR and RTSR, set both*/
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006a8:	4b2e      	ldr	r3, [pc, #184]	@ (8000764 <GPIO_Init+0x1b4>)
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	7912      	ldrb	r2, [r2, #4]
 80006b0:	4611      	mov	r1, r2
 80006b2:	2201      	movs	r2, #1
 80006b4:	408a      	lsls	r2, r1
 80006b6:	4611      	mov	r1, r2
 80006b8:	4a2a      	ldr	r2, [pc, #168]	@ (8000764 <GPIO_Init+0x1b4>)
 80006ba:	430b      	orrs	r3, r1
 80006bc:	6093      	str	r3, [r2, #8]
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006be:	4b29      	ldr	r3, [pc, #164]	@ (8000764 <GPIO_Init+0x1b4>)
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	7912      	ldrb	r2, [r2, #4]
 80006c6:	4611      	mov	r1, r2
 80006c8:	2201      	movs	r2, #1
 80006ca:	408a      	lsls	r2, r1
 80006cc:	4611      	mov	r1, r2
 80006ce:	4a25      	ldr	r2, [pc, #148]	@ (8000764 <GPIO_Init+0x1b4>)
 80006d0:	430b      	orrs	r3, r1
 80006d2:	60d3      	str	r3, [r2, #12]
		}

		/*2. Configure the GPIO port selection in SYSCGF_EXTICR*/
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	791b      	ldrb	r3, [r3, #4]
 80006d8:	089b      	lsrs	r3, r3, #2
 80006da:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	791b      	ldrb	r3, [r3, #4]
 80006e0:	f003 0303 	and.w	r3, r3, #3
 80006e4:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80006ee:	d04b      	beq.n	8000788 <GPIO_Init+0x1d8>
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a1c      	ldr	r2, [pc, #112]	@ (8000768 <GPIO_Init+0x1b8>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d032      	beq.n	8000760 <GPIO_Init+0x1b0>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a1b      	ldr	r2, [pc, #108]	@ (800076c <GPIO_Init+0x1bc>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d02b      	beq.n	800075c <GPIO_Init+0x1ac>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a19      	ldr	r2, [pc, #100]	@ (8000770 <GPIO_Init+0x1c0>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d024      	beq.n	8000758 <GPIO_Init+0x1a8>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a18      	ldr	r2, [pc, #96]	@ (8000774 <GPIO_Init+0x1c4>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d01d      	beq.n	8000754 <GPIO_Init+0x1a4>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a16      	ldr	r2, [pc, #88]	@ (8000778 <GPIO_Init+0x1c8>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d016      	beq.n	8000750 <GPIO_Init+0x1a0>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a15      	ldr	r2, [pc, #84]	@ (800077c <GPIO_Init+0x1cc>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d00f      	beq.n	800074c <GPIO_Init+0x19c>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a13      	ldr	r2, [pc, #76]	@ (8000780 <GPIO_Init+0x1d0>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d008      	beq.n	8000748 <GPIO_Init+0x198>
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a12      	ldr	r2, [pc, #72]	@ (8000784 <GPIO_Init+0x1d4>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d101      	bne.n	8000744 <GPIO_Init+0x194>
 8000740:	2308      	movs	r3, #8
 8000742:	e022      	b.n	800078a <GPIO_Init+0x1da>
 8000744:	2300      	movs	r3, #0
 8000746:	e020      	b.n	800078a <GPIO_Init+0x1da>
 8000748:	2307      	movs	r3, #7
 800074a:	e01e      	b.n	800078a <GPIO_Init+0x1da>
 800074c:	2306      	movs	r3, #6
 800074e:	e01c      	b.n	800078a <GPIO_Init+0x1da>
 8000750:	2305      	movs	r3, #5
 8000752:	e01a      	b.n	800078a <GPIO_Init+0x1da>
 8000754:	2304      	movs	r3, #4
 8000756:	e018      	b.n	800078a <GPIO_Init+0x1da>
 8000758:	2303      	movs	r3, #3
 800075a:	e016      	b.n	800078a <GPIO_Init+0x1da>
 800075c:	2302      	movs	r3, #2
 800075e:	e014      	b.n	800078a <GPIO_Init+0x1da>
 8000760:	2301      	movs	r3, #1
 8000762:	e012      	b.n	800078a <GPIO_Init+0x1da>
 8000764:	40010400 	.word	0x40010400
 8000768:	48000400 	.word	0x48000400
 800076c:	48000800 	.word	0x48000800
 8000770:	48000c00 	.word	0x48000c00
 8000774:	48001000 	.word	0x48001000
 8000778:	48001400 	.word	0x48001400
 800077c:	48001800 	.word	0x48001800
 8000780:	48001c00 	.word	0x48001c00
 8000784:	48002000 	.word	0x48002000
 8000788:	2300      	movs	r3, #0
 800078a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800078c:	4b5c      	ldr	r3, [pc, #368]	@ (8000900 <GPIO_Init+0x350>)
 800078e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000790:	4a5b      	ldr	r2, [pc, #364]	@ (8000900 <GPIO_Init+0x350>)
 8000792:	f043 0301 	orr.w	r3, r3, #1
 8000796:	6613      	str	r3, [r2, #96]	@ 0x60
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000798:	7c7a      	ldrb	r2, [r7, #17]
 800079a:	7cbb      	ldrb	r3, [r7, #18]
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	fa02 f103 	lsl.w	r1, r2, r3
 80007a2:	4a58      	ldr	r2, [pc, #352]	@ (8000904 <GPIO_Init+0x354>)
 80007a4:	7cfb      	ldrb	r3, [r7, #19]
 80007a6:	3302      	adds	r3, #2
 80007a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		/*3. Enable EXTI interrupt delivery mode using IMR */
		EXTI->IMR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007ac:	4b56      	ldr	r3, [pc, #344]	@ (8000908 <GPIO_Init+0x358>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	7912      	ldrb	r2, [r2, #4]
 80007b4:	4611      	mov	r1, r2
 80007b6:	2201      	movs	r2, #1
 80007b8:	408a      	lsls	r2, r1
 80007ba:	4611      	mov	r1, r2
 80007bc:	4a52      	ldr	r2, [pc, #328]	@ (8000908 <GPIO_Init+0x358>)
 80007be:	430b      	orrs	r3, r1
 80007c0:	6013      	str	r3, [r2, #0]

	}

	//Reset value of temp
	temp=0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]

	//2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	799b      	ldrb	r3, [r3, #6]
 80007ca:	461a      	mov	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	791b      	ldrb	r3, [r3, #4]
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	fa02 f303 	lsl.w	r3, r2, r3
 80007d6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	689a      	ldr	r2, [r3, #8]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	791b      	ldrb	r3, [r3, #4]
 80007e2:	4619      	mov	r1, r3
 80007e4:	2303      	movs	r3, #3
 80007e6:	408b      	lsls	r3, r1
 80007e8:	43db      	mvns	r3, r3
 80007ea:	4619      	mov	r1, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	400a      	ands	r2, r1
 80007f2:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	6899      	ldr	r1, [r3, #8]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	697a      	ldr	r2, [r7, #20]
 8000800:	430a      	orrs	r2, r1
 8000802:	609a      	str	r2, [r3, #8]

	temp=0;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]

	//3. Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	79db      	ldrb	r3, [r3, #7]
 800080c:	461a      	mov	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	791b      	ldrb	r3, [r3, #4]
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	fa02 f303 	lsl.w	r3, r2, r3
 8000818:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	68da      	ldr	r2, [r3, #12]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	791b      	ldrb	r3, [r3, #4]
 8000824:	4619      	mov	r1, r3
 8000826:	2303      	movs	r3, #3
 8000828:	408b      	lsls	r3, r1
 800082a:	43db      	mvns	r3, r3
 800082c:	4619      	mov	r1, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	400a      	ands	r2, r1
 8000834:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	68d9      	ldr	r1, [r3, #12]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	430a      	orrs	r2, r1
 8000844:	60da      	str	r2, [r3, #12]

	temp=0;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]

	//4. Configure the OPType
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	7a1b      	ldrb	r3, [r3, #8]
 800084e:	461a      	mov	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	791b      	ldrb	r3, [r3, #4]
 8000854:	fa02 f303 	lsl.w	r3, r2, r3
 8000858:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	685a      	ldr	r2, [r3, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	791b      	ldrb	r3, [r3, #4]
 8000864:	4619      	mov	r1, r3
 8000866:	2301      	movs	r3, #1
 8000868:	408b      	lsls	r3, r1
 800086a:	43db      	mvns	r3, r3
 800086c:	4619      	mov	r1, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	400a      	ands	r2, r1
 8000874:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	6859      	ldr	r1, [r3, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	697a      	ldr	r2, [r7, #20]
 8000882:	430a      	orrs	r2, r1
 8000884:	605a      	str	r2, [r3, #4]

	temp=0;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]

	//5. Configure AF
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	795b      	ldrb	r3, [r3, #5]
 800088e:	2b02      	cmp	r3, #2
 8000890:	d131      	bne.n	80008f6 <GPIO_Init+0x346>

		uint8_t temp1, temp2; //Check Theory
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	791b      	ldrb	r3, [r3, #4]
 8000896:	08db      	lsrs	r3, r3, #3
 8000898:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	791b      	ldrb	r3, [r3, #4]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0x0F << (4* temp2)); //Clearing
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	7c3a      	ldrb	r2, [r7, #16]
 80008aa:	3208      	adds	r2, #8
 80008ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	220f      	movs	r2, #15
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	43db      	mvns	r3, r3
 80008bc:	4618      	mov	r0, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	7c3a      	ldrb	r2, [r7, #16]
 80008c4:	4001      	ands	r1, r0
 80008c6:	3208      	adds	r2, #8
 80008c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2)); //Setting
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	7c3a      	ldrb	r2, [r7, #16]
 80008d2:	3208      	adds	r2, #8
 80008d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	7a5b      	ldrb	r3, [r3, #9]
 80008dc:	461a      	mov	r2, r3
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	4618      	mov	r0, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	7c3a      	ldrb	r2, [r7, #16]
 80008ee:	4301      	orrs	r1, r0
 80008f0:	3208      	adds	r2, #8
 80008f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 80008f6:	bf00      	nop
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000
 8000904:	40010000 	.word	0x40010000
 8000908:	40010400 	.word	0x40010400

0800090c <GPIO_ReadFromInputPin>:
		GPIOI_REG_RESET();
	}
}

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	460b      	mov	r3, r1
 8000916:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	//Right shifting the required pin state bit to LSB and then masking the remaining bits
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	691a      	ldr	r2, [r3, #16]
 800091c:	78fb      	ldrb	r3, [r7, #3]
 800091e:	fa22 f303 	lsr.w	r3, r2, r3
 8000922:	b2db      	uxtb	r3, r3
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	73fb      	strb	r3, [r7, #15]
	return value;
 800092a:	7bfb      	ldrb	r3, [r7, #15]
}
 800092c:	4618      	mov	r0, r3
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr

08000936 <GPIO_WriteToOutputPin>:
	value = (uint16_t)(pGPIOx->IDR);
	return value;
}

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
 800093e:	460b      	mov	r3, r1
 8000940:	70fb      	strb	r3, [r7, #3]
 8000942:	4613      	mov	r3, r2
 8000944:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET){
 8000946:	78bb      	ldrb	r3, [r7, #2]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d109      	bne.n	8000960 <GPIO_WriteToOutputPin+0x2a>
		pGPIOx->ODR |= (1 << PinNumber);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	695b      	ldr	r3, [r3, #20]
 8000950:	78fa      	ldrb	r2, [r7, #3]
 8000952:	2101      	movs	r1, #1
 8000954:	fa01 f202 	lsl.w	r2, r1, r2
 8000958:	431a      	orrs	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	615a      	str	r2, [r3, #20]
	}
	else{
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
 800095e:	e009      	b.n	8000974 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	695b      	ldr	r3, [r3, #20]
 8000964:	78fa      	ldrb	r2, [r7, #3]
 8000966:	2101      	movs	r1, #1
 8000968:	fa01 f202 	lsl.w	r2, r1, r2
 800096c:	43d2      	mvns	r2, r2
 800096e:	401a      	ands	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	615a      	str	r2, [r3, #20]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
	...

08000980 <SPI_PeriClockControl>:

#include "stm32l496xx_spi.h"


void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d120      	bne.n	80009d4 <SPI_PeriClockControl+0x54>
		if(pSPIx == SPI1){
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a22      	ldr	r2, [pc, #136]	@ (8000a20 <SPI_PeriClockControl+0xa0>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d106      	bne.n	80009a8 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 800099a:	4b22      	ldr	r3, [pc, #136]	@ (8000a24 <SPI_PeriClockControl+0xa4>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800099e:	4a21      	ldr	r2, [pc, #132]	@ (8000a24 <SPI_PeriClockControl+0xa4>)
 80009a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009a4:	6613      	str	r3, [r2, #96]	@ 0x60
		else if(pSPIx == SPI3){
			SPI3_PCLK_DI();
		}

	}
}
 80009a6:	e035      	b.n	8000a14 <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI2){
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a1f      	ldr	r2, [pc, #124]	@ (8000a28 <SPI_PeriClockControl+0xa8>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d106      	bne.n	80009be <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 80009b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a24 <SPI_PeriClockControl+0xa4>)
 80009b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a24 <SPI_PeriClockControl+0xa4>)
 80009b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009ba:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80009bc:	e02a      	b.n	8000a14 <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI3){
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a1a      	ldr	r2, [pc, #104]	@ (8000a2c <SPI_PeriClockControl+0xac>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d126      	bne.n	8000a14 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 80009c6:	4b17      	ldr	r3, [pc, #92]	@ (8000a24 <SPI_PeriClockControl+0xa4>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ca:	4a16      	ldr	r2, [pc, #88]	@ (8000a24 <SPI_PeriClockControl+0xa4>)
 80009cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009d0:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80009d2:	e01f      	b.n	8000a14 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1){
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a12      	ldr	r2, [pc, #72]	@ (8000a20 <SPI_PeriClockControl+0xa0>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d106      	bne.n	80009ea <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 80009dc:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <SPI_PeriClockControl+0xa4>)
 80009de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009e0:	4a10      	ldr	r2, [pc, #64]	@ (8000a24 <SPI_PeriClockControl+0xa4>)
 80009e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80009e6:	6613      	str	r3, [r2, #96]	@ 0x60
}
 80009e8:	e014      	b.n	8000a14 <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI2){
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000a28 <SPI_PeriClockControl+0xa8>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d106      	bne.n	8000a00 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 80009f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a24 <SPI_PeriClockControl+0xa4>)
 80009f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f6:	4a0b      	ldr	r2, [pc, #44]	@ (8000a24 <SPI_PeriClockControl+0xa4>)
 80009f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80009fc:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80009fe:	e009      	b.n	8000a14 <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI3){
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <SPI_PeriClockControl+0xac>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d105      	bne.n	8000a14 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <SPI_PeriClockControl+0xa4>)
 8000a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a0c:	4a05      	ldr	r2, [pc, #20]	@ (8000a24 <SPI_PeriClockControl+0xa4>)
 8000a0e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000a12:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40013000 	.word	0x40013000
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40003800 	.word	0x40003800
 8000a2c:	40003c00 	.word	0x40003c00

08000a30 <SPI_Init>:

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	/*Enable the peripheral clock so that its easy for the user*/
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff ff9e 	bl	8000980 <SPI_PeriClockControl>
	/* Configure the SPI_CR1 register */

	uint32_t tempreg1 = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]

	/* 1. Configure the device mode */
	tempreg1 |= (pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSRT);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	791b      	ldrb	r3, [r3, #4]
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]

	/* 2. Configure the bus configuration */
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	795b      	ldrb	r3, [r3, #5]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d104      	bne.n	8000a66 <SPI_Init+0x36>
	{
		/* Clear the BIDI mode*/
		tempreg1 &= ~(1 << SPI_CR1_BIDIMODE);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	e014      	b.n	8000a90 <SPI_Init+0x60>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	795b      	ldrb	r3, [r3, #5]
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d104      	bne.n	8000a78 <SPI_Init+0x48>
	{
		/* Enable the BIDI mode*/
		tempreg1 |= (1 << SPI_CR1_BIDIMODE);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	e00b      	b.n	8000a90 <SPI_Init+0x60>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	795b      	ldrb	r3, [r3, #5]
 8000a7c:	2b03      	cmp	r3, #3
 8000a7e:	d107      	bne.n	8000a90 <SPI_Init+0x60>
	{
		/* CLear the BIDI mode*/
		tempreg1 &= ~(1 << SPI_CR1_BIDIMODE);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000a86:	60fb      	str	r3, [r7, #12]

		/*RXONLY bit must be set*/
		tempreg1 |= (1 << SPI_CR1_RXONLY);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a8e:	60fb      	str	r3, [r7, #12]
	}

	/*3. Configure the SPI serial clock speed*/
	tempreg1 |= (pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	799b      	ldrb	r3, [r3, #6]
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	60fb      	str	r3, [r7, #12]

	/*4. Configure the DFF*/
	uint32_t tempreg2=0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
	tempreg2 |= (pSPIHandle->SPIConfig.SPI_DFF << SPI_CR2_DS);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	79db      	ldrb	r3, [r3, #7]
 8000aa4:	021b      	lsls	r3, r3, #8
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	60bb      	str	r3, [r7, #8]

	/*5. Configure the CPOL*/
	tempreg1 |= (pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	7a1b      	ldrb	r3, [r3, #8]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]

	/*6. Configure the CPHA*/
	tempreg1 |= (pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	7a5b      	ldrb	r3, [r3, #9]
 8000abc:	461a      	mov	r2, r3
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	60fb      	str	r3, [r7, #12]

	/* 7. Configure SSM bit*/
	tempreg1 |= (pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	7a9b      	ldrb	r3, [r3, #10]
 8000ac8:	025b      	lsls	r3, r3, #9
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg1;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	68fa      	ldr	r2, [r7, #12]
 8000ad6:	601a      	str	r2, [r3, #0]
	pSPIHandle->pSPIx->CR2 = tempreg2;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	68ba      	ldr	r2, [r7, #8]
 8000ade:	605a      	str	r2, [r3, #4]

}
 8000ae0:	bf00      	nop
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <SPI_GetFlagStatus>:
		}

}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t flagname) /* This function is an aid to the send and receive functions */
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
	/*Flag names have been defined with their respective position*/
	if(pSPIx->SR & flagname) // Masking with and operator
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	4013      	ands	r3, r2
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e000      	b.n	8000b04 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000b02:	2300      	movs	r3, #0
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr

08000b0e <SPI_SendData>:

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	60f8      	str	r0, [r7, #12]
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
	while(len > 0)
 8000b1a:	e02d      	b.n	8000b78 <SPI_SendData+0x6a>
	{
		/* 1. Wait until TXE (TX Empty flag) is set -  Data should be loaded only when the TX Buffer is empty, else already existing data may be lost */
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET); //while( !(pSPIx->SR & (1 << 1)) );
 8000b1c:	bf00      	nop
 8000b1e:	2102      	movs	r1, #2
 8000b20:	68f8      	ldr	r0, [r7, #12]
 8000b22:	f7ff ffe1 	bl	8000ae8 <SPI_GetFlagStatus>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d0f8      	beq.n	8000b1e <SPI_SendData+0x10>
		/* 2. Check the Data Size(DFF) in CR2 register */

		//TODO: Configure other data sizes as well

		/*CUSTOM CODE LOGIC FOR 8 AND 16 BITS DS*/
		uint16_t tempvar = pSPIx->CR2;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	82fb      	strh	r3, [r7, #22]
		tempvar = (tempvar >> SPI_CR2_DS);
 8000b32:	8afb      	ldrh	r3, [r7, #22]
 8000b34:	0a1b      	lsrs	r3, r3, #8
 8000b36:	82fb      	strh	r3, [r7, #22]

		if(tempvar == SPI_DFF_16BITS) //16-bit mode
 8000b38:	8afb      	ldrh	r3, [r7, #22]
 8000b3a:	2b0f      	cmp	r3, #15
 8000b3c:	d10e      	bne.n	8000b5c <SPI_SendData+0x4e>
		{
			// Load the data onto the data register DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	461a      	mov	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	60da      	str	r2, [r3, #12]
			len--;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	607b      	str	r3, [r7, #4]
			len--;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3b01      	subs	r3, #1
 8000b52:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	3301      	adds	r3, #1
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	e00d      	b.n	8000b78 <SPI_SendData+0x6a>

		}else if(tempvar == SPI_DFF_8BITS) //8-bit mode
 8000b5c:	8afb      	ldrh	r3, [r7, #22]
 8000b5e:	2b07      	cmp	r3, #7
 8000b60:	d10a      	bne.n	8000b78 <SPI_SendData+0x6a>
		{
			// Load the data onto the data register DR
			pSPIx->DR = *(pTxBuffer);
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	461a      	mov	r2, r3
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	60da      	str	r2, [r3, #12]
			len--;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	3301      	adds	r3, #1
 8000b76:	60bb      	str	r3, [r7, #8]
	while(len > 0)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d1ce      	bne.n	8000b1c <SPI_SendData+0xe>

		}

	}

}
 8000b7e:	bf00      	nop
 8000b80:	bf00      	nop
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <SPI_Peripheral_Control>:

}


void SPI_Peripheral_Control(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000b94:	78fb      	ldrb	r3, [r7, #3]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d106      	bne.n	8000ba8 <SPI_Peripheral_Control+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}

}
 8000ba6:	e005      	b.n	8000bb4 <SPI_Peripheral_Control+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	601a      	str	r2, [r3, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr

08000bbe <SPI_SSOEConfig>:
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000bca:	78fb      	ldrb	r3, [r7, #3]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d106      	bne.n	8000bde <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f043 0204 	orr.w	r2, r3, #4
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	605a      	str	r2, [r3, #4]
	}else{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000bdc:	e005      	b.n	8000bea <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f023 0204 	bic.w	r2, r3, #4
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	605a      	str	r2, [r3, #4]
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <__libc_init_array>:
 8000bf4:	b570      	push	{r4, r5, r6, lr}
 8000bf6:	4d0d      	ldr	r5, [pc, #52]	@ (8000c2c <__libc_init_array+0x38>)
 8000bf8:	4c0d      	ldr	r4, [pc, #52]	@ (8000c30 <__libc_init_array+0x3c>)
 8000bfa:	1b64      	subs	r4, r4, r5
 8000bfc:	10a4      	asrs	r4, r4, #2
 8000bfe:	2600      	movs	r6, #0
 8000c00:	42a6      	cmp	r6, r4
 8000c02:	d109      	bne.n	8000c18 <__libc_init_array+0x24>
 8000c04:	4d0b      	ldr	r5, [pc, #44]	@ (8000c34 <__libc_init_array+0x40>)
 8000c06:	4c0c      	ldr	r4, [pc, #48]	@ (8000c38 <__libc_init_array+0x44>)
 8000c08:	f000 f818 	bl	8000c3c <_init>
 8000c0c:	1b64      	subs	r4, r4, r5
 8000c0e:	10a4      	asrs	r4, r4, #2
 8000c10:	2600      	movs	r6, #0
 8000c12:	42a6      	cmp	r6, r4
 8000c14:	d105      	bne.n	8000c22 <__libc_init_array+0x2e>
 8000c16:	bd70      	pop	{r4, r5, r6, pc}
 8000c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c1c:	4798      	blx	r3
 8000c1e:	3601      	adds	r6, #1
 8000c20:	e7ee      	b.n	8000c00 <__libc_init_array+0xc>
 8000c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c26:	4798      	blx	r3
 8000c28:	3601      	adds	r6, #1
 8000c2a:	e7f2      	b.n	8000c12 <__libc_init_array+0x1e>
 8000c2c:	08000c68 	.word	0x08000c68
 8000c30:	08000c68 	.word	0x08000c68
 8000c34:	08000c68 	.word	0x08000c68
 8000c38:	08000c6c 	.word	0x08000c6c

08000c3c <_init>:
 8000c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c3e:	bf00      	nop
 8000c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c42:	bc08      	pop	{r3}
 8000c44:	469e      	mov	lr, r3
 8000c46:	4770      	bx	lr

08000c48 <_fini>:
 8000c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c4a:	bf00      	nop
 8000c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c4e:	bc08      	pop	{r3}
 8000c50:	469e      	mov	lr, r3
 8000c52:	4770      	bx	lr
